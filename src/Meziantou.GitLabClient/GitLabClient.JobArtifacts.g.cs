// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabJobArtifactsClient JobArtifacts
        {
            get;
        }
    }

    public partial interface IGitLabJobArtifactsClient
    {
        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/:job_id/artifacts</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#get-job-artifacts" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadArtifactArchiveByJobIdAsync(Meziantou.GitLab.DownloadArtifactArchiveByJobIdJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/artifacts/:ref_name/download</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-the-artifacts-archive" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadArtifactArchiveFromTagOrBranchAsync(Meziantou.GitLab.DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/:job_id/artifacts/*artifact_path</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-a-single-artifact-file-by-job-id" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadArtifactFileByJobIdAsync(Meziantou.GitLab.DownloadArtifactFileByJobIdJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-a-single-artifact-file-from-specific-tag-or-branch" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadArtifactFileFromTagOrBranchAsync(Meziantou.GitLab.DownloadArtifactFileFromTagOrBranchJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabJobArtifactsClient
    {
        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/:job_id/artifacts</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#get-job-artifacts" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> Meziantou.GitLab.IGitLabJobArtifactsClient.DownloadArtifactArchiveByJobIdAsync(Meziantou.GitLab.DownloadArtifactArchiveByJobIdJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.JobArtifacts_DownloadArtifactArchiveByJobIdAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/artifacts/:ref_name/download</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-the-artifacts-archive" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> Meziantou.GitLab.IGitLabJobArtifactsClient.DownloadArtifactArchiveFromTagOrBranchAsync(Meziantou.GitLab.DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.JobArtifacts_DownloadArtifactArchiveFromTagOrBranchAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/:job_id/artifacts/*artifact_path</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-a-single-artifact-file-by-job-id" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> Meziantou.GitLab.IGitLabJobArtifactsClient.DownloadArtifactFileByJobIdAsync(Meziantou.GitLab.DownloadArtifactFileByJobIdJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.JobArtifacts_DownloadArtifactFileByJobIdAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-a-single-artifact-file-from-specific-tag-or-branch" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> Meziantou.GitLab.IGitLabJobArtifactsClient.DownloadArtifactFileFromTagOrBranchAsync(Meziantou.GitLab.DownloadArtifactFileFromTagOrBranchJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.JobArtifacts_DownloadArtifactFileFromTagOrBranchAsync(request, requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabJobArtifactsClient JobArtifacts
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/:job_id/artifacts</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#get-job-artifacts" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> JobArtifacts_DownloadArtifactArchiveByJobIdAsync(Meziantou.GitLab.DownloadArtifactArchiveByJobIdJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.JobArtifacts_DownloadArtifactArchiveByJobIdAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Get;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    if ((response.StatusCode == System.Net.HttpStatusCode.NotFound))
                    {
                        return default;
                    }

                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Meziantou.GitLab.HttpResponseStream? result = await response.ToStreamAsync(cancellationToken).ConfigureAwait(false);
                    return result;
                }
                catch
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }

                    throw;
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string JobArtifacts_DownloadArtifactArchiveByJobIdAsync_BuildUrl(Meziantou.GitLab.DownloadArtifactArchiveByJobIdJobArtifactRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().ValueAsString);
                }

                urlBuilder.Append("/jobs/");
                if ((!object.ReferenceEquals(request.JobId, null)))
                {
                    urlBuilder.AppendParameter(request.JobId);
                }

                urlBuilder.Append("/artifacts");
                char separator = '?';
                if ((!object.ReferenceEquals(request.JobToken, null)))
                {
                    urlBuilder.Append(separator);
                    separator = '&';
                    urlBuilder.Append("job_token=");
                    urlBuilder.AppendParameter(request.JobToken);
                }

                url = urlBuilder.ToString();
            }

            return url;
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/artifacts/:ref_name/download</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-the-artifacts-archive" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> JobArtifacts_DownloadArtifactArchiveFromTagOrBranchAsync(Meziantou.GitLab.DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.JobArtifacts_DownloadArtifactArchiveFromTagOrBranchAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Get;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    if ((response.StatusCode == System.Net.HttpStatusCode.NotFound))
                    {
                        return default;
                    }

                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Meziantou.GitLab.HttpResponseStream? result = await response.ToStreamAsync(cancellationToken).ConfigureAwait(false);
                    return result;
                }
                catch
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }

                    throw;
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string JobArtifacts_DownloadArtifactArchiveFromTagOrBranchAsync_BuildUrl(Meziantou.GitLab.DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().ValueAsString);
                }

                urlBuilder.Append("/jobs/artifacts/");
                if ((!object.ReferenceEquals(request.RefName, null)))
                {
                    urlBuilder.AppendParameter(request.RefName);
                }

                urlBuilder.Append("/download");
                char separator = '?';
                if ((!object.ReferenceEquals(request.Job, null)))
                {
                    urlBuilder.Append(separator);
                    separator = '&';
                    urlBuilder.Append("job=");
                    urlBuilder.AppendParameter(request.Job);
                }

                if ((!object.ReferenceEquals(request.JobToken, null)))
                {
                    urlBuilder.Append(separator);
                    separator = '&';
                    urlBuilder.Append("job_token=");
                    urlBuilder.AppendParameter(request.JobToken);
                }

                url = urlBuilder.ToString();
            }

            return url;
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/:job_id/artifacts/*artifact_path</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-a-single-artifact-file-by-job-id" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> JobArtifacts_DownloadArtifactFileByJobIdAsync(Meziantou.GitLab.DownloadArtifactFileByJobIdJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.JobArtifacts_DownloadArtifactFileByJobIdAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Get;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    if ((response.StatusCode == System.Net.HttpStatusCode.NotFound))
                    {
                        return default;
                    }

                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Meziantou.GitLab.HttpResponseStream? result = await response.ToStreamAsync(cancellationToken).ConfigureAwait(false);
                    return result;
                }
                catch
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }

                    throw;
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string JobArtifacts_DownloadArtifactFileByJobIdAsync_BuildUrl(Meziantou.GitLab.DownloadArtifactFileByJobIdJobArtifactRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().ValueAsString);
                }

                urlBuilder.Append("/jobs/");
                if (request.JobId.HasValue)
                {
                    urlBuilder.AppendParameter(request.JobId.GetValueOrDefault());
                }

                urlBuilder.Append("/artifacts/*artifact_path");
                char separator = '?';
                if ((!object.ReferenceEquals(request.ArtifactPath, null)))
                {
                    urlBuilder.Append(separator);
                    separator = '&';
                    urlBuilder.Append("artifact_path=");
                    urlBuilder.AppendParameter(request.ArtifactPath);
                }

                url = urlBuilder.ToString();
            }

            return url;
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-a-single-artifact-file-from-specific-tag-or-branch" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> JobArtifacts_DownloadArtifactFileFromTagOrBranchAsync(Meziantou.GitLab.DownloadArtifactFileFromTagOrBranchJobArtifactRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.JobArtifacts_DownloadArtifactFileFromTagOrBranchAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Get;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    if ((response.StatusCode == System.Net.HttpStatusCode.NotFound))
                    {
                        return default;
                    }

                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Meziantou.GitLab.HttpResponseStream? result = await response.ToStreamAsync(cancellationToken).ConfigureAwait(false);
                    return result;
                }
                catch
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }

                    throw;
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string JobArtifacts_DownloadArtifactFileFromTagOrBranchAsync_BuildUrl(Meziantou.GitLab.DownloadArtifactFileFromTagOrBranchJobArtifactRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().ValueAsString);
                }

                urlBuilder.Append("/jobs/artifacts/");
                if ((!object.ReferenceEquals(request.RefName, null)))
                {
                    urlBuilder.AppendParameter(request.RefName);
                }

                urlBuilder.Append("/raw/*artifact_path");
                char separator = '?';
                if ((!object.ReferenceEquals(request.ArtifactPath, null)))
                {
                    urlBuilder.Append(separator);
                    separator = '&';
                    urlBuilder.Append("artifact_path=");
                    urlBuilder.AppendParameter(request.ArtifactPath);
                }

                if ((!object.ReferenceEquals(request.Job, null)))
                {
                    urlBuilder.Append(separator);
                    separator = '&';
                    urlBuilder.Append("job=");
                    urlBuilder.AppendParameter(request.Job);
                }

                url = urlBuilder.ToString();
            }

            return url;
        }
    }

    public static partial class GitLabClientExtensions
    {
        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/:job_id/artifacts</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#get-job-artifacts" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadArtifactArchiveByJobIdAsync(this Meziantou.GitLab.IGitLabJobArtifactsClient client, ProjectIdOrPathRef id, string jobId, string? jobToken = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.DownloadArtifactArchiveByJobIdJobArtifactRequest request = new Meziantou.GitLab.DownloadArtifactArchiveByJobIdJobArtifactRequest(id, jobId);
            request.JobToken = jobToken;
            return client.DownloadArtifactArchiveByJobIdAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/artifacts/:ref_name/download</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-the-artifacts-archive" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadArtifactArchiveFromTagOrBranchAsync(this Meziantou.GitLab.IGitLabJobArtifactsClient client, ProjectIdOrPathRef id, string refName, string job, string? jobToken = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest request = new Meziantou.GitLab.DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest(id, refName, job);
            request.JobToken = jobToken;
            return client.DownloadArtifactArchiveFromTagOrBranchAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/:job_id/artifacts/*artifact_path</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-a-single-artifact-file-by-job-id" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadArtifactFileByJobIdAsync(this Meziantou.GitLab.IGitLabJobArtifactsClient client, ProjectIdOrPathRef id, long jobId, string artifactPath, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.DownloadArtifactFileByJobIdJobArtifactRequest request = new Meziantou.GitLab.DownloadArtifactFileByJobIdJobArtifactRequest(id, jobId, artifactPath);
            return client.DownloadArtifactFileByJobIdAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/jobs/artifacts/:ref_name/raw/*artifact_path</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/job_artifacts.html#download-a-single-artifact-file-from-specific-tag-or-branch" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadArtifactFileFromTagOrBranchAsync(this Meziantou.GitLab.IGitLabJobArtifactsClient client, ProjectIdOrPathRef id, string refName, string artifactPath, string job, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.DownloadArtifactFileFromTagOrBranchJobArtifactRequest request = new Meziantou.GitLab.DownloadArtifactFileFromTagOrBranchJobArtifactRequest(id, refName, artifactPath, job);
            return client.DownloadArtifactFileFromTagOrBranchAsync(request, requestOptions, cancellationToken);
        }
    }

    public partial class DownloadArtifactArchiveByJobIdJobArtifactRequest
    {
        private ProjectIdOrPathRef? _id;

        private string? _jobId;

        private string? _jobToken;

        /// <param name="id">ID or URL-encoded path of the project owned by the authenticated user.</param>
        /// <param name="jobId">ID of a job.</param>
        public DownloadArtifactArchiveByJobIdJobArtifactRequest(ProjectIdOrPathRef? id, string? jobId)
        {
            this._id = id;
            this._jobId = jobId;
        }

        public DownloadArtifactArchiveByJobIdJobArtifactRequest()
        {
        }

        /// <summary>
        ///   <para>ID or URL-encoded path of the project owned by the authenticated user.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdOrPathRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>ID of a job.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? JobId
        {
            get
            {
                return this._jobId;
            }
            set
            {
                this._jobId = value;
            }
        }

        /// <summary>
        ///   <para>To be used with triggers for multi-project pipelines. It should be invoked only inside .gitlab-ci.yml. Its value is always $CI_JOB_TOKEN.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? JobToken
        {
            get
            {
                return this._jobToken;
            }
            set
            {
                this._jobToken = value;
            }
        }
    }

    public partial class DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest
    {
        private ProjectIdOrPathRef? _id;

        private string? _job;

        private string? _jobToken;

        private string? _refName;

        /// <param name="id">ID or URL-encoded path of the project owned by the authenticated user.</param>
        /// <param name="refName">Branch or tag name in repository. HEAD or SHA references are not supported.</param>
        /// <param name="job">The name of the job.</param>
        public DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest(ProjectIdOrPathRef? id, string? refName, string? job)
        {
            this._id = id;
            this._refName = refName;
            this._job = job;
        }

        public DownloadArtifactArchiveFromTagOrBranchJobArtifactRequest()
        {
        }

        /// <summary>
        ///   <para>ID or URL-encoded path of the project owned by the authenticated user.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdOrPathRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>The name of the job.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? Job
        {
            get
            {
                return this._job;
            }
            set
            {
                this._job = value;
            }
        }

        /// <summary>
        ///   <para>To be used with triggers for multi-project pipelines. It should be invoked only inside .gitlab-ci.yml. Its value is always $CI_JOB_TOKEN.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? JobToken
        {
            get
            {
                return this._jobToken;
            }
            set
            {
                this._jobToken = value;
            }
        }

        /// <summary>
        ///   <para>Branch or tag name in repository. HEAD or SHA references are not supported.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? RefName
        {
            get
            {
                return this._refName;
            }
            set
            {
                this._refName = value;
            }
        }
    }

    public partial class DownloadArtifactFileByJobIdJobArtifactRequest
    {
        private string? _artifactPath;

        private ProjectIdOrPathRef? _id;

        private long? _jobId;

        /// <param name="id">ID or URL-encoded path of the project owned by the authenticated user.</param>
        /// <param name="jobId">The unique job identifier.</param>
        /// <param name="artifactPath">Path to a file inside the artifacts archive.</param>
        public DownloadArtifactFileByJobIdJobArtifactRequest(ProjectIdOrPathRef? id, long? jobId, string? artifactPath)
        {
            this._id = id;
            this._jobId = jobId;
            this._artifactPath = artifactPath;
        }

        public DownloadArtifactFileByJobIdJobArtifactRequest()
        {
        }

        /// <summary>
        ///   <para>Path to a file inside the artifacts archive.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? ArtifactPath
        {
            get
            {
                return this._artifactPath;
            }
            set
            {
                this._artifactPath = value;
            }
        }

        /// <summary>
        ///   <para>ID or URL-encoded path of the project owned by the authenticated user.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdOrPathRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>The unique job identifier.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public long? JobId
        {
            get
            {
                return this._jobId;
            }
            set
            {
                this._jobId = value;
            }
        }
    }

    public partial class DownloadArtifactFileFromTagOrBranchJobArtifactRequest
    {
        private string? _artifactPath;

        private ProjectIdOrPathRef? _id;

        private string? _job;

        private string? _refName;

        /// <param name="id">ID or URL-encoded path of the project owned by the authenticated user.</param>
        /// <param name="refName">Branch or tag name in repository. HEAD or SHA references are not supported.</param>
        /// <param name="artifactPath">Path to a file inside the artifacts archive.</param>
        /// <param name="job">The name of the job.</param>
        public DownloadArtifactFileFromTagOrBranchJobArtifactRequest(ProjectIdOrPathRef? id, string? refName, string? artifactPath, string? job)
        {
            this._id = id;
            this._refName = refName;
            this._artifactPath = artifactPath;
            this._job = job;
        }

        public DownloadArtifactFileFromTagOrBranchJobArtifactRequest()
        {
        }

        /// <summary>
        ///   <para>Path to a file inside the artifacts archive.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? ArtifactPath
        {
            get
            {
                return this._artifactPath;
            }
            set
            {
                this._artifactPath = value;
            }
        }

        /// <summary>
        ///   <para>ID or URL-encoded path of the project owned by the authenticated user.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdOrPathRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>The name of the job.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? Job
        {
            get
            {
                return this._job;
            }
            set
            {
                this._job = value;
            }
        }

        /// <summary>
        ///   <para>Branch or tag name in repository. HEAD or SHA references are not supported.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? RefName
        {
            get
            {
                return this._refName;
            }
            set
            {
                this._refName = value;
            }
        }
    }
}
