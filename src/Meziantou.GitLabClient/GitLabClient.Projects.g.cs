// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabProjectsClient Projects
        {
            get;
        }
    }

    public partial interface IGitLabProjectsClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#create-project" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Project> CreateAsync(Meziantou.GitLab.CreateProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-all-projects" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<Project> GetAll(Meziantou.GitLab.GetAllProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#get-single-project" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Project?> GetByIdAsync(Meziantou.GitLab.GetByIdProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-user-projects" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<Project> GetByUser(Meziantou.GitLab.GetByUserProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabProjectsClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#create-project" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Project> Meziantou.GitLab.IGitLabProjectsClient.CreateAsync(Meziantou.GitLab.CreateProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Projects_CreateAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-all-projects" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<Project> Meziantou.GitLab.IGitLabProjectsClient.GetAll(Meziantou.GitLab.GetAllProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.Projects_GetAll(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#get-single-project" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Project?> Meziantou.GitLab.IGitLabProjectsClient.GetByIdAsync(Meziantou.GitLab.GetByIdProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Projects_GetByIdAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-user-projects" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<Project> Meziantou.GitLab.IGitLabProjectsClient.GetByUser(Meziantou.GitLab.GetByUserProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.Projects_GetByUser(request, requestOptions);
        }

        public Meziantou.GitLab.IGitLabProjectsClient Projects
        {
            get
            {
                return this;
            }
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#create-project" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<Project> Projects_CreateAsync(Meziantou.GitLab.CreateProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Name != null))
            {
                body.Add("name", request.Name);
            }

            if ((request.Path != null))
            {
                body.Add("path", request.Path);
            }

            if ((request.NamespaceId != null))
            {
                body.Add("namespace_id", request.NamespaceId);
            }

            if ((request.DefaultBranch != null))
            {
                body.Add("default_branch", request.DefaultBranch);
            }

            if ((request.Description != null))
            {
                body.Add("description", request.Description);
            }

            if ((request.IssuesEnabled != null))
            {
                body.Add("issues_enabled", request.IssuesEnabled);
            }

            if ((request.MergeRequestsEnabled != null))
            {
                body.Add("merge_requests_enabled", request.MergeRequestsEnabled);
            }

            if ((request.JobsEnabled != null))
            {
                body.Add("jobs_enabled", request.JobsEnabled);
            }

            if ((request.WikiEnabled != null))
            {
                body.Add("wiki_enabled", request.WikiEnabled);
            }

            if ((request.SnippetsEnabled != null))
            {
                body.Add("snippets_enabled", request.SnippetsEnabled);
            }

            if ((request.ResolveOutdatedDiffDiscussions != null))
            {
                body.Add("resolve_outdated_diff_discussions", request.ResolveOutdatedDiffDiscussions);
            }

            if ((request.ContainerRegistryEnabled != null))
            {
                body.Add("container_registry_enabled", request.ContainerRegistryEnabled);
            }

            if ((request.SharedRunnersEnabled != null))
            {
                body.Add("shared_runners_enabled", request.SharedRunnersEnabled);
            }

            if ((request.PublicJobs != null))
            {
                body.Add("public_jobs", request.PublicJobs);
            }

            if ((request.OnlyAllowMergeIfPipelineSucceeds != null))
            {
                body.Add("only_allow_merge_if_pipeline_succeeds", request.OnlyAllowMergeIfPipelineSucceeds);
            }

            if ((request.OnlyAllowMergeIfAllDiscussionsAreResolved != null))
            {
                body.Add("only_allow_merge_if_all_discussions_are_resolved", request.OnlyAllowMergeIfAllDiscussionsAreResolved);
            }

            if ((request.RequestAccessEnabled != null))
            {
                body.Add("request_access_enabled", request.RequestAccessEnabled);
            }

            if ((request.LfsEnabled != null))
            {
                body.Add("lfs_enabled", request.LfsEnabled);
            }

            if ((request.PrintingMergeRequestLinkEnabled != null))
            {
                body.Add("printing_merge_request_link_enabled", request.PrintingMergeRequestLinkEnabled);
            }

            if ((request.MergeMethod != null))
            {
                body.Add("merge_method", request.MergeMethod);
            }

            if ((request.Visibility != null))
            {
                body.Add("visibility", request.Visibility);
            }

            if ((request.TagList != null))
            {
                body.Add("tag_list", request.TagList);
            }

            if ((request.CiConfigPath != null))
            {
                body.Add("ci_config_path", request.CiConfigPath);
            }

            if ((request.ApprovalsBeforeMerge != null))
            {
                body.Add("approvals_before_merge", request.ApprovalsBeforeMerge);
            }

            return this.PostJsonAsync<Project>(url, body, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-all-projects" />
        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<Project> Projects_GetAll(Meziantou.GitLab.GetAllProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects");
            urlBuilder.SetValue("archived", request.Archived);
            urlBuilder.SetValue("visibility", request.Visibility);
            urlBuilder.SetValue("search", request.Search);
            urlBuilder.SetValue("simple", request.Simple);
            urlBuilder.SetValue("owned", request.Owned);
            urlBuilder.SetValue("membership", request.Membership);
            urlBuilder.SetValue("starred", request.Starred);
            urlBuilder.SetValue("statistics", request.Statistics);
            urlBuilder.SetValue("with_issues_enabled", request.WithIssuesEnabled);
            urlBuilder.SetValue("with_merge_requests_enabled", request.WithMergeRequestsEnabled);
            urlBuilder.SetValue("wiki_checksum_failed", request.WikiChecksumFailed);
            urlBuilder.SetValue("repository_checksum_failed", request.RepositoryChecksumFailed);
            urlBuilder.SetValue("min_access_level", request.MinAccessLevel);
            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<Project>(this, url, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#get-single-project" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<Project?> Projects_GetByIdAsync(Meziantou.GitLab.GetByIdProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects/:project_id");
            if (request.ProjectId.HasValue)
            {
                urlBuilder.SetValue("project_id", request.ProjectId.Value.ValueAsString);
            }

            string url = urlBuilder.Build();
            return this.GetAsync<Project>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-user-projects" />
        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<Project> Projects_GetByUser(Meziantou.GitLab.GetByUserProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user_id/projects");
            if (request.UserId.HasValue)
            {
                urlBuilder.SetValue("user_id", request.UserId.Value.ValueAsString);
            }

            urlBuilder.SetValue("archived", request.Archived);
            urlBuilder.SetValue("visibility", request.Visibility);
            urlBuilder.SetValue("search", request.Search);
            urlBuilder.SetValue("simple", request.Simple);
            urlBuilder.SetValue("owned", request.Owned);
            urlBuilder.SetValue("membership", request.Membership);
            urlBuilder.SetValue("starred", request.Starred);
            urlBuilder.SetValue("statistics", request.Statistics);
            urlBuilder.SetValue("with_issues_enabled", request.WithIssuesEnabled);
            urlBuilder.SetValue("with_merge_requests_enabled", request.WithMergeRequestsEnabled);
            urlBuilder.SetValue("wiki_checksum_failed", request.WikiChecksumFailed);
            urlBuilder.SetValue("repository_checksum_failed", request.RepositoryChecksumFailed);
            urlBuilder.SetValue("min_access_level", request.MinAccessLevel);
            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<Project>(this, url, requestOptions);
        }
    }

    public static partial class GitLabClientExtensions
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#create-project" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Project> CreateAsync(this Meziantou.GitLab.IGitLabProjectsClient client, string? name = default(string?), string? path = default(string?), long? namespaceId = default(long?), string? defaultBranch = default(string?), string? description = default(string?), bool? issuesEnabled = default(bool?), bool? mergeRequestsEnabled = default(bool?), bool? jobsEnabled = default(bool?), bool? wikiEnabled = default(bool?), bool? snippetsEnabled = default(bool?), bool? resolveOutdatedDiffDiscussions = default(bool?), bool? containerRegistryEnabled = default(bool?), bool? sharedRunnersEnabled = default(bool?), bool? publicJobs = default(bool?), bool? onlyAllowMergeIfPipelineSucceeds = default(bool?), bool? onlyAllowMergeIfAllDiscussionsAreResolved = default(bool?), bool? requestAccessEnabled = default(bool?), bool? lfsEnabled = default(bool?), bool? printingMergeRequestLinkEnabled = default(bool?), MergeMethod? mergeMethod = default(MergeMethod?), ProjectVisibility? visibility = default(ProjectVisibility?), System.Collections.Generic.IEnumerable<string>? tagList = default(System.Collections.Generic.IEnumerable<string>?), string? ciConfigPath = default(string?), int? approvalsBeforeMerge = default(int?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.CreateProjectRequest request = new Meziantou.GitLab.CreateProjectRequest();
            request.Name = name;
            request.Path = path;
            request.NamespaceId = namespaceId;
            request.DefaultBranch = defaultBranch;
            request.Description = description;
            request.IssuesEnabled = issuesEnabled;
            request.MergeRequestsEnabled = mergeRequestsEnabled;
            request.JobsEnabled = jobsEnabled;
            request.WikiEnabled = wikiEnabled;
            request.SnippetsEnabled = snippetsEnabled;
            request.ResolveOutdatedDiffDiscussions = resolveOutdatedDiffDiscussions;
            request.ContainerRegistryEnabled = containerRegistryEnabled;
            request.SharedRunnersEnabled = sharedRunnersEnabled;
            request.PublicJobs = publicJobs;
            request.OnlyAllowMergeIfPipelineSucceeds = onlyAllowMergeIfPipelineSucceeds;
            request.OnlyAllowMergeIfAllDiscussionsAreResolved = onlyAllowMergeIfAllDiscussionsAreResolved;
            request.RequestAccessEnabled = requestAccessEnabled;
            request.LfsEnabled = lfsEnabled;
            request.PrintingMergeRequestLinkEnabled = printingMergeRequestLinkEnabled;
            request.MergeMethod = mergeMethod;
            request.Visibility = visibility;
            request.TagList = tagList;
            request.CiConfigPath = ciConfigPath;
            request.ApprovalsBeforeMerge = approvalsBeforeMerge;
            return client.CreateAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-all-projects" />
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<Project> GetAll(this Meziantou.GitLab.IGitLabProjectsClient client, bool? archived = default(bool?), ProjectVisibility? visibility = default(ProjectVisibility?), string? search = default(string?), bool? simple = default(bool?), bool? owned = default(bool?), bool? membership = default(bool?), bool? starred = default(bool?), bool? statistics = default(bool?), bool? withIssuesEnabled = default(bool?), bool? withMergeRequestsEnabled = default(bool?), bool? wikiChecksumFailed = default(bool?), bool? repositoryChecksumFailed = default(bool?), AccessLevel? minAccessLevel = default(AccessLevel?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetAllProjectRequest request = new Meziantou.GitLab.GetAllProjectRequest();
            request.Archived = archived;
            request.Visibility = visibility;
            request.Search = search;
            request.Simple = simple;
            request.Owned = owned;
            request.Membership = membership;
            request.Starred = starred;
            request.Statistics = statistics;
            request.WithIssuesEnabled = withIssuesEnabled;
            request.WithMergeRequestsEnabled = withMergeRequestsEnabled;
            request.WikiChecksumFailed = wikiChecksumFailed;
            request.RepositoryChecksumFailed = repositoryChecksumFailed;
            request.MinAccessLevel = minAccessLevel;
            return client.GetAll(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#get-single-project" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Project?> GetByIdAsync(this Meziantou.GitLab.IGitLabProjectsClient client, ProjectIdOrPathRef projectId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.GetByIdProjectRequest request = new Meziantou.GitLab.GetByIdProjectRequest(projectId);
            return client.GetByIdAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-user-projects" />
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<Project> GetByUser(this Meziantou.GitLab.IGitLabProjectsClient client, UserRef userId, bool? archived, ProjectVisibility? visibility, string? search, bool? simple, bool? owned, bool? membership, bool? starred, bool? statistics, bool? withIssuesEnabled, bool? withMergeRequestsEnabled, bool? wikiChecksumFailed, bool? repositoryChecksumFailed, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetByUserProjectRequest request = new Meziantou.GitLab.GetByUserProjectRequest(userId);
            request.Archived = archived;
            request.Visibility = visibility;
            request.Search = search;
            request.Simple = simple;
            request.Owned = owned;
            request.Membership = membership;
            request.Starred = starred;
            request.Statistics = statistics;
            request.WithIssuesEnabled = withIssuesEnabled;
            request.WithMergeRequestsEnabled = withMergeRequestsEnabled;
            request.WikiChecksumFailed = wikiChecksumFailed;
            request.RepositoryChecksumFailed = repositoryChecksumFailed;
            return client.GetByUser(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/projects.html#list-user-projects" />
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<Project> GetByUser(this Meziantou.GitLab.IGitLabProjectsClient client, UserRef userId, bool? archived = default(bool?), ProjectVisibility? visibility = default(ProjectVisibility?), string? search = default(string?), bool? simple = default(bool?), bool? owned = default(bool?), bool? membership = default(bool?), bool? starred = default(bool?), bool? statistics = default(bool?), bool? withIssuesEnabled = default(bool?), bool? withMergeRequestsEnabled = default(bool?), bool? wikiChecksumFailed = default(bool?), bool? repositoryChecksumFailed = default(bool?), AccessLevel? minAccessLevel = default(AccessLevel?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetByUserProjectRequest request = new Meziantou.GitLab.GetByUserProjectRequest(userId);
            request.Archived = archived;
            request.Visibility = visibility;
            request.Search = search;
            request.Simple = simple;
            request.Owned = owned;
            request.Membership = membership;
            request.Starred = starred;
            request.Statistics = statistics;
            request.WithIssuesEnabled = withIssuesEnabled;
            request.WithMergeRequestsEnabled = withMergeRequestsEnabled;
            request.WikiChecksumFailed = wikiChecksumFailed;
            request.RepositoryChecksumFailed = repositoryChecksumFailed;
            request.MinAccessLevel = minAccessLevel;
            return client.GetByUser(request, requestOptions);
        }
    }

    public partial class GetAllProjectRequest
    {
        private bool? _archived;

        private bool? _membership;

        private AccessLevel? _minAccessLevel;

        private bool? _owned;

        private bool? _repositoryChecksumFailed;

        private string? _search;

        private bool? _simple;

        private bool? _starred;

        private bool? _statistics;

        private ProjectVisibility? _visibility;

        private bool? _wikiChecksumFailed;

        private bool? _withIssuesEnabled;

        private bool? _withMergeRequestsEnabled;

        public GetAllProjectRequest()
        {
        }

        public bool? Archived
        {
            get
            {
                return this._archived;
            }
            set
            {
                this._archived = value;
            }
        }

        public bool? Membership
        {
            get
            {
                return this._membership;
            }
            set
            {
                this._membership = value;
            }
        }

        public AccessLevel? MinAccessLevel
        {
            get
            {
                return this._minAccessLevel;
            }
            set
            {
                this._minAccessLevel = value;
            }
        }

        public bool? Owned
        {
            get
            {
                return this._owned;
            }
            set
            {
                this._owned = value;
            }
        }

        public bool? RepositoryChecksumFailed
        {
            get
            {
                return this._repositoryChecksumFailed;
            }
            set
            {
                this._repositoryChecksumFailed = value;
            }
        }

        public string? Search
        {
            get
            {
                return this._search;
            }
            set
            {
                this._search = value;
            }
        }

        public bool? Simple
        {
            get
            {
                return this._simple;
            }
            set
            {
                this._simple = value;
            }
        }

        public bool? Starred
        {
            get
            {
                return this._starred;
            }
            set
            {
                this._starred = value;
            }
        }

        public bool? Statistics
        {
            get
            {
                return this._statistics;
            }
            set
            {
                this._statistics = value;
            }
        }

        public ProjectVisibility? Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                this._visibility = value;
            }
        }

        public bool? WikiChecksumFailed
        {
            get
            {
                return this._wikiChecksumFailed;
            }
            set
            {
                this._wikiChecksumFailed = value;
            }
        }

        public bool? WithIssuesEnabled
        {
            get
            {
                return this._withIssuesEnabled;
            }
            set
            {
                this._withIssuesEnabled = value;
            }
        }

        public bool? WithMergeRequestsEnabled
        {
            get
            {
                return this._withMergeRequestsEnabled;
            }
            set
            {
                this._withMergeRequestsEnabled = value;
            }
        }
    }

    public partial class GetByUserProjectRequest
    {
        private bool? _archived;

        private bool? _membership;

        private AccessLevel? _minAccessLevel;

        private bool? _owned;

        private bool? _repositoryChecksumFailed;

        private string? _search;

        private bool? _simple;

        private bool? _starred;

        private bool? _statistics;

        private UserRef? _userId;

        private ProjectVisibility? _visibility;

        private bool? _wikiChecksumFailed;

        private bool? _withIssuesEnabled;

        private bool? _withMergeRequestsEnabled;

        public GetByUserProjectRequest(UserRef? userId)
        {
            this._userId = userId;
        }

        public GetByUserProjectRequest()
        {
        }

        public bool? Archived
        {
            get
            {
                return this._archived;
            }
            set
            {
                this._archived = value;
            }
        }

        public bool? Membership
        {
            get
            {
                return this._membership;
            }
            set
            {
                this._membership = value;
            }
        }

        public AccessLevel? MinAccessLevel
        {
            get
            {
                return this._minAccessLevel;
            }
            set
            {
                this._minAccessLevel = value;
            }
        }

        public bool? Owned
        {
            get
            {
                return this._owned;
            }
            set
            {
                this._owned = value;
            }
        }

        public bool? RepositoryChecksumFailed
        {
            get
            {
                return this._repositoryChecksumFailed;
            }
            set
            {
                this._repositoryChecksumFailed = value;
            }
        }

        public string? Search
        {
            get
            {
                return this._search;
            }
            set
            {
                this._search = value;
            }
        }

        public bool? Simple
        {
            get
            {
                return this._simple;
            }
            set
            {
                this._simple = value;
            }
        }

        public bool? Starred
        {
            get
            {
                return this._starred;
            }
            set
            {
                this._starred = value;
            }
        }

        public bool? Statistics
        {
            get
            {
                return this._statistics;
            }
            set
            {
                this._statistics = value;
            }
        }

        public UserRef? UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }

        public ProjectVisibility? Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                this._visibility = value;
            }
        }

        public bool? WikiChecksumFailed
        {
            get
            {
                return this._wikiChecksumFailed;
            }
            set
            {
                this._wikiChecksumFailed = value;
            }
        }

        public bool? WithIssuesEnabled
        {
            get
            {
                return this._withIssuesEnabled;
            }
            set
            {
                this._withIssuesEnabled = value;
            }
        }

        public bool? WithMergeRequestsEnabled
        {
            get
            {
                return this._withMergeRequestsEnabled;
            }
            set
            {
                this._withMergeRequestsEnabled = value;
            }
        }
    }

    public partial class GetByIdProjectRequest
    {
        private ProjectIdOrPathRef? _projectId;

        public GetByIdProjectRequest(ProjectIdOrPathRef? projectId)
        {
            this._projectId = projectId;
        }

        public GetByIdProjectRequest()
        {
        }

        public ProjectIdOrPathRef? ProjectId
        {
            get
            {
                return this._projectId;
            }
            set
            {
                this._projectId = value;
            }
        }
    }

    public partial class CreateProjectRequest
    {
        private int? _approvalsBeforeMerge;

        private string? _ciConfigPath;

        private bool? _containerRegistryEnabled;

        private string? _defaultBranch;

        private string? _description;

        private bool? _issuesEnabled;

        private bool? _jobsEnabled;

        private bool? _lfsEnabled;

        private MergeMethod? _mergeMethod;

        private bool? _mergeRequestsEnabled;

        private string? _name;

        private long? _namespaceId;

        private bool? _onlyAllowMergeIfAllDiscussionsAreResolved;

        private bool? _onlyAllowMergeIfPipelineSucceeds;

        private string? _path;

        private bool? _printingMergeRequestLinkEnabled;

        private bool? _publicJobs;

        private bool? _requestAccessEnabled;

        private bool? _resolveOutdatedDiffDiscussions;

        private bool? _sharedRunnersEnabled;

        private bool? _snippetsEnabled;

        private System.Collections.Generic.IEnumerable<string>? _tagList;

        private ProjectVisibility? _visibility;

        private bool? _wikiEnabled;

        public CreateProjectRequest()
        {
        }

        public int? ApprovalsBeforeMerge
        {
            get
            {
                return this._approvalsBeforeMerge;
            }
            set
            {
                this._approvalsBeforeMerge = value;
            }
        }

        public string? CiConfigPath
        {
            get
            {
                return this._ciConfigPath;
            }
            set
            {
                this._ciConfigPath = value;
            }
        }

        public bool? ContainerRegistryEnabled
        {
            get
            {
                return this._containerRegistryEnabled;
            }
            set
            {
                this._containerRegistryEnabled = value;
            }
        }

        public string? DefaultBranch
        {
            get
            {
                return this._defaultBranch;
            }
            set
            {
                this._defaultBranch = value;
            }
        }

        public string? Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        public bool? IssuesEnabled
        {
            get
            {
                return this._issuesEnabled;
            }
            set
            {
                this._issuesEnabled = value;
            }
        }

        public bool? JobsEnabled
        {
            get
            {
                return this._jobsEnabled;
            }
            set
            {
                this._jobsEnabled = value;
            }
        }

        public bool? LfsEnabled
        {
            get
            {
                return this._lfsEnabled;
            }
            set
            {
                this._lfsEnabled = value;
            }
        }

        public MergeMethod? MergeMethod
        {
            get
            {
                return this._mergeMethod;
            }
            set
            {
                this._mergeMethod = value;
            }
        }

        public bool? MergeRequestsEnabled
        {
            get
            {
                return this._mergeRequestsEnabled;
            }
            set
            {
                this._mergeRequestsEnabled = value;
            }
        }

        public string? Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        public long? NamespaceId
        {
            get
            {
                return this._namespaceId;
            }
            set
            {
                this._namespaceId = value;
            }
        }

        public bool? OnlyAllowMergeIfAllDiscussionsAreResolved
        {
            get
            {
                return this._onlyAllowMergeIfAllDiscussionsAreResolved;
            }
            set
            {
                this._onlyAllowMergeIfAllDiscussionsAreResolved = value;
            }
        }

        public bool? OnlyAllowMergeIfPipelineSucceeds
        {
            get
            {
                return this._onlyAllowMergeIfPipelineSucceeds;
            }
            set
            {
                this._onlyAllowMergeIfPipelineSucceeds = value;
            }
        }

        public string? Path
        {
            get
            {
                return this._path;
            }
            set
            {
                this._path = value;
            }
        }

        public bool? PrintingMergeRequestLinkEnabled
        {
            get
            {
                return this._printingMergeRequestLinkEnabled;
            }
            set
            {
                this._printingMergeRequestLinkEnabled = value;
            }
        }

        public bool? PublicJobs
        {
            get
            {
                return this._publicJobs;
            }
            set
            {
                this._publicJobs = value;
            }
        }

        public bool? RequestAccessEnabled
        {
            get
            {
                return this._requestAccessEnabled;
            }
            set
            {
                this._requestAccessEnabled = value;
            }
        }

        public bool? ResolveOutdatedDiffDiscussions
        {
            get
            {
                return this._resolveOutdatedDiffDiscussions;
            }
            set
            {
                this._resolveOutdatedDiffDiscussions = value;
            }
        }

        public bool? SharedRunnersEnabled
        {
            get
            {
                return this._sharedRunnersEnabled;
            }
            set
            {
                this._sharedRunnersEnabled = value;
            }
        }

        public bool? SnippetsEnabled
        {
            get
            {
                return this._snippetsEnabled;
            }
            set
            {
                this._snippetsEnabled = value;
            }
        }

        public System.Collections.Generic.IEnumerable<string>? TagList
        {
            get
            {
                return this._tagList;
            }
            set
            {
                this._tagList = value;
            }
        }

        public ProjectVisibility? Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                this._visibility = value;
            }
        }

        public bool? WikiEnabled
        {
            get
            {
                return this._wikiEnabled;
            }
            set
            {
                this._wikiEnabled = value;
            }
        }
    }
}
