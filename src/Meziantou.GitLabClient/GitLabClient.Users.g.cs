// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabUsersClient Users
        {
            get;
        }
    }

    public partial interface IGitLabUsersClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#add-ssh-key-for-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey> AddSSHKeyAsync(Meziantou.GitLab.AddSSHKeyUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#add-ssh-key" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey> AddSSHKeyToCurrentUserAsync(Meziantou.GitLab.AddSSHKeyToCurrentUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#create-an-impersonation-token" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<ImpersonationToken> CreateImpersonationTokenAsync(Meziantou.GitLab.CreateImpersonationTokenUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#user-creation" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User> CreateUserAsync(Meziantou.GitLab.CreateUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-given-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task DeleteSSHKeyAsync(Meziantou.GitLab.DeleteSSHKeyUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-current-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task DeleteSSHKeyFromCurrentUserAsync(Meziantou.GitLab.DeleteSSHKeyFromCurrentUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#for-normal-users" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<UserBasic> GetAll(Meziantou.GitLab.GetAllUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#single-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> GetByIdAsync(Meziantou.GitLab.GetByIdUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-current-user-for-normal-users" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> GetCurrentUserAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#single-ssh-key" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey?> GetCurrentUserSSHKeyAsync(Meziantou.GitLab.GetCurrentUserSSHKeyRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-ssh-keys" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> GetCurrentUserSSHKeysAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#user-status" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> GetCurrentUserStatusAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> GetSSHKeysAsync(Meziantou.GitLab.GetSSHKeysUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#get-the-status-of-a-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> GetStatusAsync(Meziantou.GitLab.GetStatusUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#set-user-status" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus> SetCurrentUserStatusAsync(Meziantou.GitLab.SetCurrentUserStatusRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabUsersClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#add-ssh-key-for-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey> Meziantou.GitLab.IGitLabUsersClient.AddSSHKeyAsync(Meziantou.GitLab.AddSSHKeyUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_AddSSHKeyAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#add-ssh-key" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey> Meziantou.GitLab.IGitLabUsersClient.AddSSHKeyToCurrentUserAsync(Meziantou.GitLab.AddSSHKeyToCurrentUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_AddSSHKeyToCurrentUserAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#create-an-impersonation-token" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<ImpersonationToken> Meziantou.GitLab.IGitLabUsersClient.CreateImpersonationTokenAsync(Meziantou.GitLab.CreateImpersonationTokenUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_CreateImpersonationTokenAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#user-creation" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User> Meziantou.GitLab.IGitLabUsersClient.CreateUserAsync(Meziantou.GitLab.CreateUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_CreateUserAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-given-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task Meziantou.GitLab.IGitLabUsersClient.DeleteSSHKeyAsync(Meziantou.GitLab.DeleteSSHKeyUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_DeleteSSHKeyAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-current-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task Meziantou.GitLab.IGitLabUsersClient.DeleteSSHKeyFromCurrentUserAsync(Meziantou.GitLab.DeleteSSHKeyFromCurrentUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_DeleteSSHKeyFromCurrentUserAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#for-normal-users" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<UserBasic> Meziantou.GitLab.IGitLabUsersClient.GetAll(Meziantou.GitLab.GetAllUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.Users_GetAll(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#single-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> Meziantou.GitLab.IGitLabUsersClient.GetByIdAsync(Meziantou.GitLab.GetByIdUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_GetByIdAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-current-user-for-normal-users" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> Meziantou.GitLab.IGitLabUsersClient.GetCurrentUserAsync(Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_GetCurrentUserAsync(requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#single-ssh-key" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey?> Meziantou.GitLab.IGitLabUsersClient.GetCurrentUserSSHKeyAsync(Meziantou.GitLab.GetCurrentUserSSHKeyRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_GetCurrentUserSSHKeyAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-ssh-keys" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> Meziantou.GitLab.IGitLabUsersClient.GetCurrentUserSSHKeysAsync(Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_GetCurrentUserSSHKeysAsync(requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#user-status" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> Meziantou.GitLab.IGitLabUsersClient.GetCurrentUserStatusAsync(Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_GetCurrentUserStatusAsync(requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> Meziantou.GitLab.IGitLabUsersClient.GetSSHKeysAsync(Meziantou.GitLab.GetSSHKeysUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_GetSSHKeysAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#get-the-status-of-a-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> Meziantou.GitLab.IGitLabUsersClient.GetStatusAsync(Meziantou.GitLab.GetStatusUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_GetStatusAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#set-user-status" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus> Meziantou.GitLab.IGitLabUsersClient.SetCurrentUserStatusAsync(Meziantou.GitLab.SetCurrentUserStatusRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Users_SetCurrentUserStatusAsync(request, requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabUsersClient Users
        {
            get
            {
                return this;
            }
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#add-ssh-key-for-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<SshKey> Users_AddSSHKeyAsync(Meziantou.GitLab.AddSSHKeyUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user_id/keys");
            if (request.UserId.HasValue)
            {
                urlBuilder.SetValue("user_id", request.UserId.Value.ValueAsString);
            }

            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Title != null))
            {
                body.Add("title", request.Title);
            }

            if ((request.Key != null))
            {
                body.Add("key", request.Key);
            }

            return this.PostJsonAsync<SshKey>(url, body, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#add-ssh-key" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<SshKey> Users_AddSSHKeyToCurrentUserAsync(Meziantou.GitLab.AddSSHKeyToCurrentUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/keys");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Title != null))
            {
                body.Add("title", request.Title);
            }

            if ((request.Key != null))
            {
                body.Add("key", request.Key);
            }

            return this.PostJsonAsync<SshKey>(url, body, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#create-an-impersonation-token" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<ImpersonationToken> Users_CreateImpersonationTokenAsync(Meziantou.GitLab.CreateImpersonationTokenUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user_id/impersonation_tokens");
            if (request.UserId.HasValue)
            {
                urlBuilder.SetValue("user_id", request.UserId.Value.ValueAsString);
            }

            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Name != null))
            {
                body.Add("name", request.Name);
            }

            if ((request.ExpiresAt != null))
            {
                body.Add("expires_at", request.ExpiresAt);
            }

            if ((request.Scopes != null))
            {
                body.Add("scopes", request.Scopes);
            }

            return this.PostJsonAsync<ImpersonationToken>(url, body, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#user-creation" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<User> Users_CreateUserAsync(Meziantou.GitLab.CreateUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Email != null))
            {
                body.Add("email", request.Email);
            }

            if ((request.Username != null))
            {
                body.Add("username", request.Username);
            }

            if ((request.Name != null))
            {
                body.Add("name", request.Name);
            }

            if ((request.Password != null))
            {
                body.Add("password", request.Password);
            }

            if ((request.Admin != null))
            {
                body.Add("admin", request.Admin);
            }

            if ((request.CanCreateGroup != null))
            {
                body.Add("can_create_group", request.CanCreateGroup);
            }

            if ((request.SkipConfirmation != null))
            {
                body.Add("skip_confirmation", request.SkipConfirmation);
            }

            return this.PostJsonAsync<User>(url, body, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-given-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task Users_DeleteSSHKeyAsync(Meziantou.GitLab.DeleteSSHKeyUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user_id/keys/:key_id");
            if (request.UserId.HasValue)
            {
                urlBuilder.SetValue("user_id", request.UserId.Value.ValueAsString);
            }

            if (request.KeyId.HasValue)
            {
                urlBuilder.SetValue("key_id", request.KeyId.Value.Value);
            }

            string url = urlBuilder.Build();
            return this.DeleteAsync(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-current-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task Users_DeleteSSHKeyFromCurrentUserAsync(Meziantou.GitLab.DeleteSSHKeyFromCurrentUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/keys/:key_id");
            if (request.KeyId.HasValue)
            {
                urlBuilder.SetValue("key_id", request.KeyId.Value.Value);
            }

            string url = urlBuilder.Build();
            return this.DeleteAsync(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#for-normal-users" />
        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<UserBasic> Users_GetAll(Meziantou.GitLab.GetAllUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users");
            urlBuilder.SetValue("username", request.Username);
            urlBuilder.SetValue("active", request.Active);
            urlBuilder.SetValue("blocked", request.Blocked);
            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<UserBasic>(this, url, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#single-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<User?> Users_GetByIdAsync(Meziantou.GitLab.GetByIdUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user_id");
            urlBuilder.SetValue("user_id", request.UserId);
            string url = urlBuilder.Build();
            return this.GetAsync<User>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-current-user-for-normal-users" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<User?> Users_GetCurrentUserAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user");
            string url = urlBuilder.Build();
            return this.GetAsync<User>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#single-ssh-key" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<SshKey?> Users_GetCurrentUserSSHKeyAsync(Meziantou.GitLab.GetCurrentUserSSHKeyRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/keys/:key_id");
            if (request.KeyId.HasValue)
            {
                urlBuilder.SetValue("key_id", request.KeyId.Value.Value);
            }

            string url = urlBuilder.Build();
            return this.GetAsync<SshKey>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-ssh-keys" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> Users_GetCurrentUserSSHKeysAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/keys");
            string url = urlBuilder.Build();
            return this.GetCollectionAsync<SshKey>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#user-status" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<UserStatus?> Users_GetCurrentUserStatusAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/status");
            string url = urlBuilder.Build();
            return this.GetAsync<UserStatus>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> Users_GetSSHKeysAsync(Meziantou.GitLab.GetSSHKeysUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user_id/keys");
            if (request.UserId.HasValue)
            {
                urlBuilder.SetValue("user_id", request.UserId.Value.ValueAsString);
            }

            string url = urlBuilder.Build();
            return this.GetCollectionAsync<SshKey>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#get-the-status-of-a-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<UserStatus?> Users_GetStatusAsync(Meziantou.GitLab.GetStatusUserRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user_id/status");
            if (request.UserId.HasValue)
            {
                urlBuilder.SetValue("user_id", request.UserId.Value.ValueAsString);
            }

            string url = urlBuilder.Build();
            return this.GetAsync<UserStatus>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#set-user-status" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<UserStatus> Users_SetCurrentUserStatusAsync(Meziantou.GitLab.SetCurrentUserStatusRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/status");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Emoji != null))
            {
                body.Add("emoji", request.Emoji);
            }

            if ((request.Message != null))
            {
                body.Add("message", request.Message);
            }

            return this.PutJsonAsync<UserStatus>(url, body, requestOptions, cancellationToken);
        }
    }

    public static partial class GitLabClientExtensions
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#add-ssh-key-for-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<SshKey> AddSSHKeyAsync(this Meziantou.GitLab.IGitLabUsersClient client, UserRef userId, string title, string key, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.AddSSHKeyUserRequest request = new Meziantou.GitLab.AddSSHKeyUserRequest(userId, title, key);
            return client.AddSSHKeyAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#add-ssh-key" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<SshKey> AddSSHKeyToCurrentUserAsync(this Meziantou.GitLab.IGitLabUsersClient client, string title, string key, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.AddSSHKeyToCurrentUserRequest request = new Meziantou.GitLab.AddSSHKeyToCurrentUserRequest(title, key);
            return client.AddSSHKeyToCurrentUserAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#create-an-impersonation-token" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<ImpersonationToken> CreateImpersonationTokenAsync(this Meziantou.GitLab.IGitLabUsersClient client, UserRef userId, string name, System.DateTime? expiresAt = default(System.DateTime?), System.Collections.Generic.IEnumerable<string>? scopes = default(System.Collections.Generic.IEnumerable<string>?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.CreateImpersonationTokenUserRequest request = new Meziantou.GitLab.CreateImpersonationTokenUserRequest(userId, name);
            request.ExpiresAt = expiresAt;
            request.Scopes = scopes;
            return client.CreateImpersonationTokenAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#user-creation" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<User> CreateUserAsync(this Meziantou.GitLab.IGitLabUsersClient client, string email, string username, string name, string? password = default(string?), bool? admin = default(bool?), bool? canCreateGroup = default(bool?), bool? skipConfirmation = default(bool?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.CreateUserRequest request = new Meziantou.GitLab.CreateUserRequest(email, username, name);
            request.Password = password;
            request.Admin = admin;
            request.CanCreateGroup = canCreateGroup;
            request.SkipConfirmation = skipConfirmation;
            return client.CreateUserAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-given-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task DeleteSSHKeyAsync(this Meziantou.GitLab.IGitLabUsersClient client, UserRef userId, SshKeyRef keyId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.DeleteSSHKeyUserRequest request = new Meziantou.GitLab.DeleteSSHKeyUserRequest(userId, keyId);
            return client.DeleteSSHKeyAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#delete-ssh-key-for-current-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task DeleteSSHKeyFromCurrentUserAsync(this Meziantou.GitLab.IGitLabUsersClient client, SshKeyRef keyId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.DeleteSSHKeyFromCurrentUserRequest request = new Meziantou.GitLab.DeleteSSHKeyFromCurrentUserRequest(keyId);
            return client.DeleteSSHKeyFromCurrentUserAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#for-normal-users" />
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<UserBasic> GetAll(this Meziantou.GitLab.IGitLabUsersClient client, string? username = default(string?), bool? active = default(bool?), bool? blocked = default(bool?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetAllUserRequest request = new Meziantou.GitLab.GetAllUserRequest();
            request.Username = username;
            request.Active = active;
            request.Blocked = blocked;
            return client.GetAll(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#single-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<User?> GetByIdAsync(this Meziantou.GitLab.IGitLabUsersClient client, long userId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.GetByIdUserRequest request = new Meziantou.GitLab.GetByIdUserRequest(userId);
            return client.GetByIdAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#single-ssh-key" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<SshKey?> GetCurrentUserSSHKeyAsync(this Meziantou.GitLab.IGitLabUsersClient client, SshKeyRef keyId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.GetCurrentUserSSHKeyRequest request = new Meziantou.GitLab.GetCurrentUserSSHKeyRequest(keyId);
            return client.GetCurrentUserSSHKeyAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#list-ssh-keys-for-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> GetSSHKeysAsync(this Meziantou.GitLab.IGitLabUsersClient client, UserRef userId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.GetSSHKeysUserRequest request = new Meziantou.GitLab.GetSSHKeysUserRequest(userId);
            return client.GetSSHKeysAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#get-the-status-of-a-user" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<UserStatus?> GetStatusAsync(this Meziantou.GitLab.IGitLabUsersClient client, UserRef userId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.GetStatusUserRequest request = new Meziantou.GitLab.GetStatusUserRequest(userId);
            return client.GetStatusAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/users.html#set-user-status" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<UserStatus> SetCurrentUserStatusAsync(this Meziantou.GitLab.IGitLabUsersClient client, string? emoji = default(string?), string? message = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.SetCurrentUserStatusRequest request = new Meziantou.GitLab.SetCurrentUserStatusRequest();
            request.Emoji = emoji;
            request.Message = message;
            return client.SetCurrentUserStatusAsync(request, requestOptions, cancellationToken);
        }
    }

    public partial class GetByIdUserRequest
    {
        private long? _userId;

        public GetByIdUserRequest(long? userId)
        {
            this._userId = userId;
        }

        public GetByIdUserRequest()
        {
        }

        public long? UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }
    }

    public partial class GetAllUserRequest
    {
        private bool? _active;

        private bool? _blocked;

        private string? _username;

        public GetAllUserRequest()
        {
        }

        public bool? Active
        {
            get
            {
                return this._active;
            }
            set
            {
                this._active = value;
            }
        }

        public bool? Blocked
        {
            get
            {
                return this._blocked;
            }
            set
            {
                this._blocked = value;
            }
        }

        public string? Username
        {
            get
            {
                return this._username;
            }
            set
            {
                this._username = value;
            }
        }
    }

    public partial class GetStatusUserRequest
    {
        private UserRef? _userId;

        public GetStatusUserRequest(UserRef? userId)
        {
            this._userId = userId;
        }

        public GetStatusUserRequest()
        {
        }

        public UserRef? UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }
    }

    public partial class SetCurrentUserStatusRequest
    {
        private string? _emoji;

        private string? _message;

        public SetCurrentUserStatusRequest()
        {
        }

        public string? Emoji
        {
            get
            {
                return this._emoji;
            }
            set
            {
                this._emoji = value;
            }
        }

        public string? Message
        {
            get
            {
                return this._message;
            }
            set
            {
                this._message = value;
            }
        }
    }

    public partial class GetSSHKeysUserRequest
    {
        private UserRef? _userId;

        public GetSSHKeysUserRequest(UserRef? userId)
        {
            this._userId = userId;
        }

        public GetSSHKeysUserRequest()
        {
        }

        public UserRef? UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }
    }

    public partial class GetCurrentUserSSHKeyRequest
    {
        private SshKeyRef? _keyId;

        public GetCurrentUserSSHKeyRequest(SshKeyRef? keyId)
        {
            this._keyId = keyId;
        }

        public GetCurrentUserSSHKeyRequest()
        {
        }

        public SshKeyRef? KeyId
        {
            get
            {
                return this._keyId;
            }
            set
            {
                this._keyId = value;
            }
        }
    }

    public partial class AddSSHKeyToCurrentUserRequest
    {
        private string? _key;

        private string? _title;

        public AddSSHKeyToCurrentUserRequest(string? title, string? key)
        {
            this._title = title;
            this._key = key;
        }

        public AddSSHKeyToCurrentUserRequest()
        {
        }

        public string? Key
        {
            get
            {
                return this._key;
            }
            set
            {
                this._key = value;
            }
        }

        public string? Title
        {
            get
            {
                return this._title;
            }
            set
            {
                this._title = value;
            }
        }
    }

    public partial class AddSSHKeyUserRequest
    {
        private string? _key;

        private string? _title;

        private UserRef? _userId;

        public AddSSHKeyUserRequest(UserRef? userId, string? title, string? key)
        {
            this._userId = userId;
            this._title = title;
            this._key = key;
        }

        public AddSSHKeyUserRequest()
        {
        }

        public string? Key
        {
            get
            {
                return this._key;
            }
            set
            {
                this._key = value;
            }
        }

        public string? Title
        {
            get
            {
                return this._title;
            }
            set
            {
                this._title = value;
            }
        }

        public UserRef? UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }
    }

    public partial class DeleteSSHKeyFromCurrentUserRequest
    {
        private SshKeyRef? _keyId;

        public DeleteSSHKeyFromCurrentUserRequest(SshKeyRef? keyId)
        {
            this._keyId = keyId;
        }

        public DeleteSSHKeyFromCurrentUserRequest()
        {
        }

        public SshKeyRef? KeyId
        {
            get
            {
                return this._keyId;
            }
            set
            {
                this._keyId = value;
            }
        }
    }

    public partial class DeleteSSHKeyUserRequest
    {
        private SshKeyRef? _keyId;

        private UserRef? _userId;

        public DeleteSSHKeyUserRequest(UserRef? userId, SshKeyRef? keyId)
        {
            this._userId = userId;
            this._keyId = keyId;
        }

        public DeleteSSHKeyUserRequest()
        {
        }

        public SshKeyRef? KeyId
        {
            get
            {
                return this._keyId;
            }
            set
            {
                this._keyId = value;
            }
        }

        public UserRef? UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }
    }

    public partial class CreateUserRequest
    {
        private bool? _admin;

        private bool? _canCreateGroup;

        private string? _email;

        private string? _name;

        private string? _password;

        private bool? _skipConfirmation;

        private string? _username;

        public CreateUserRequest(string? email, string? username, string? name)
        {
            this._email = email;
            this._username = username;
            this._name = name;
        }

        public CreateUserRequest()
        {
        }

        public bool? Admin
        {
            get
            {
                return this._admin;
            }
            set
            {
                this._admin = value;
            }
        }

        public bool? CanCreateGroup
        {
            get
            {
                return this._canCreateGroup;
            }
            set
            {
                this._canCreateGroup = value;
            }
        }

        public string? Email
        {
            get
            {
                return this._email;
            }
            set
            {
                this._email = value;
            }
        }

        public string? Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        public string? Password
        {
            get
            {
                return this._password;
            }
            set
            {
                this._password = value;
            }
        }

        public bool? SkipConfirmation
        {
            get
            {
                return this._skipConfirmation;
            }
            set
            {
                this._skipConfirmation = value;
            }
        }

        public string? Username
        {
            get
            {
                return this._username;
            }
            set
            {
                this._username = value;
            }
        }
    }

    public partial class CreateImpersonationTokenUserRequest
    {
        private System.DateTime? _expiresAt;

        private string? _name;

        private System.Collections.Generic.IEnumerable<string>? _scopes;

        private UserRef? _userId;

        public CreateImpersonationTokenUserRequest(UserRef? userId, string? name)
        {
            this._userId = userId;
            this._name = name;
        }

        public CreateImpersonationTokenUserRequest()
        {
        }

        public System.DateTime? ExpiresAt
        {
            get
            {
                return this._expiresAt;
            }
            set
            {
                this._expiresAt = value;
            }
        }

        public string? Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        public System.Collections.Generic.IEnumerable<string>? Scopes
        {
            get
            {
                return this._scopes;
            }
            set
            {
                this._scopes = value;
            }
        }

        public UserRef? UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                this._userId = value;
            }
        }
    }
}
