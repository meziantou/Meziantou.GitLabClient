// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabRepositoriesClient Repositories
        {
            get;
        }
    }

    public partial interface IGitLabRepositoriesClient
    {
        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/repository/archive[.format]</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/repositories.html#get-file-archive" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadFileArchiveAsync(Meziantou.GitLab.DownloadFileArchiveRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabRepositoriesClient
    {
        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/repository/archive[.format]</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/repositories.html#get-file-archive" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> Meziantou.GitLab.IGitLabRepositoriesClient.DownloadFileArchiveAsync(Meziantou.GitLab.DownloadFileArchiveRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Repositories_DownloadFileArchiveAsync(request, requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabRepositoriesClient Repositories
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/repository/archive[.format]</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/repositories.html#get-file-archive" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> Repositories_DownloadFileArchiveAsync(Meziantou.GitLab.DownloadFileArchiveRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.Repositories_DownloadFileArchiveAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Get;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    if ((response.StatusCode == System.Net.HttpStatusCode.NotFound))
                    {
                        return default;
                    }

                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Meziantou.GitLab.HttpResponseStream? result = await response.ToStreamAsync(cancellationToken).ConfigureAwait(false);
                    return result;
                }
                catch
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }

                    throw;
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string Repositories_DownloadFileArchiveAsync_BuildUrl(Meziantou.GitLab.DownloadFileArchiveRepositoryRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().ValueAsString);
                }

                urlBuilder.Append("/repository/archive");
                if (request.Format.HasValue)
                {
                    urlBuilder.Append(".");
                    urlBuilder.AppendRawParameter(request.Format.GetValueOrDefault());
                }

                char separator = '?';
                if ((!object.ReferenceEquals(request.Sha, null)))
                {
                    urlBuilder.Append(separator);
                    separator = '&';
                    urlBuilder.Append("sha=");
                    urlBuilder.AppendParameter(request.Sha);
                }

                url = urlBuilder.ToString();
            }

            return url;
        }
    }

    public static partial class GitLabClientExtensions
    {
        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/repository/archive[.format]</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/repositories.html#get-file-archive" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Meziantou.GitLab.HttpResponseStream?> DownloadFileArchiveAsync(this Meziantou.GitLab.IGitLabRepositoriesClient client, ProjectIdOrPathRef id, string? sha = default(string?), RepositoryFileArchiveFormat? format = default(RepositoryFileArchiveFormat?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.DownloadFileArchiveRepositoryRequest request = new Meziantou.GitLab.DownloadFileArchiveRepositoryRequest(id);
            request.Sha = sha;
            request.Format = format;
            return client.DownloadFileArchiveAsync(request, requestOptions, cancellationToken);
        }
    }

    public partial class DownloadFileArchiveRepositoryRequest
    {
        private RepositoryFileArchiveFormat? _format;

        private ProjectIdOrPathRef? _id;

        private string? _sha;

        /// <param name="id">The ID or URL-encoded path of the project owned by the authenticated user.</param>
        public DownloadFileArchiveRepositoryRequest(ProjectIdOrPathRef? id)
        {
            this._id = id;
        }

        public DownloadFileArchiveRepositoryRequest()
        {
        }

        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public RepositoryFileArchiveFormat? Format
        {
            get
            {
                return this._format;
            }
            set
            {
                this._format = value;
            }
        }

        /// <summary>
        ///   <para>The ID or URL-encoded path of the project owned by the authenticated user.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdOrPathRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>The commit SHA to download. A tag, branch reference, or SHA can be used. This defaults to the tip of the default branch if not specified.</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public string? Sha
        {
            get
            {
                return this._sha;
            }
            set
            {
                this._sha = value;
            }
        }
    }
}
