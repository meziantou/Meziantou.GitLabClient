// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabMergeRequestsClient MergeRequests
        {
            get;
        }
    }

    public partial interface IGitLabMergeRequestsClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#create-mr" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<MergeRequest> CreateMergeRequestAsync(Meziantou.GitLab.CreateMergeRequestMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-group-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<MergeRequest> GetGroupMergeRequests(Meziantou.GitLab.GetGroupMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<MergeRequest?> GetMergeRequestAsync(Meziantou.GitLab.GetMergeRequestMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<MergeRequest> GetMergeRequests(Meziantou.GitLab.GetMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-project-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<MergeRequest> GetProjectMergeRequests(Meziantou.GitLab.GetProjectMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabMergeRequestsClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#create-mr" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<MergeRequest> Meziantou.GitLab.IGitLabMergeRequestsClient.CreateMergeRequestAsync(Meziantou.GitLab.CreateMergeRequestMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.MergeRequests_CreateMergeRequestAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-group-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<MergeRequest> Meziantou.GitLab.IGitLabMergeRequestsClient.GetGroupMergeRequests(Meziantou.GitLab.GetGroupMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.MergeRequests_GetGroupMergeRequests(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<MergeRequest?> Meziantou.GitLab.IGitLabMergeRequestsClient.GetMergeRequestAsync(Meziantou.GitLab.GetMergeRequestMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.MergeRequests_GetMergeRequestAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<MergeRequest> Meziantou.GitLab.IGitLabMergeRequestsClient.GetMergeRequests(Meziantou.GitLab.GetMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.MergeRequests_GetMergeRequests(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-project-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<MergeRequest> Meziantou.GitLab.IGitLabMergeRequestsClient.GetProjectMergeRequests(Meziantou.GitLab.GetProjectMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.MergeRequests_GetProjectMergeRequests(request, requestOptions);
        }

        public Meziantou.GitLab.IGitLabMergeRequestsClient MergeRequests
        {
            get
            {
                return this;
            }
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#create-mr" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<MergeRequest> MergeRequests_CreateMergeRequestAsync(Meziantou.GitLab.CreateMergeRequestMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects/:project_id/merge_requests");
            if (request.ProjectId.HasValue)
            {
                urlBuilder.SetValue("project_id", request.ProjectId.Value.ValueAsString);
            }

            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.SourceBranch != null))
            {
                body.Add("source_branch", request.SourceBranch);
            }

            if ((request.TargetBranch != null))
            {
                body.Add("target_branch", request.TargetBranch);
            }

            if ((request.Title != null))
            {
                body.Add("title", request.Title);
            }

            if ((request.Description != null))
            {
                body.Add("description", request.Description);
            }

            if ((request.AssigneeId != null))
            {
                body.Add("assignee_id", request.AssigneeId);
            }

            if ((request.TargetProjectId != null))
            {
                body.Add("target_project_id", request.TargetProjectId);
            }

            if ((request.RemoveSourceBranch != null))
            {
                body.Add("remove_source_branch", request.RemoveSourceBranch);
            }

            if ((request.AllowCollaboration != null))
            {
                body.Add("allow_collaboration", request.AllowCollaboration);
            }

            if ((request.AllowMaintainerToPush != null))
            {
                body.Add("allow_maintainer_to_push", request.AllowMaintainerToPush);
            }

            if ((request.Squash != null))
            {
                body.Add("squash", request.Squash);
            }

            return this.PostJsonAsync<MergeRequest>(url, body, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-group-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<MergeRequest> MergeRequests_GetGroupMergeRequests(Meziantou.GitLab.GetGroupMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("groups/:group_id/merge_requests");
            urlBuilder.SetValue("group_id", request.GroupId);
            urlBuilder.SetValue("state", request.State);
            urlBuilder.SetValue("scope", request.Scope);
            if (request.AssigneeId.HasValue)
            {
                urlBuilder.SetValue("assignee_id", request.AssigneeId.Value.ValueAsString);
            }

            if (request.AuthorId.HasValue)
            {
                urlBuilder.SetValue("author_id", request.AuthorId.Value.ValueAsString);
            }

            urlBuilder.SetValue("milestone", request.Milestone);
            urlBuilder.SetValue("view", request.View);
            urlBuilder.SetValue("labels", request.Labels);
            urlBuilder.SetValue("created_after", request.CreatedAfter);
            urlBuilder.SetValue("created_before", request.CreatedBefore);
            urlBuilder.SetValue("updated_after", request.UpdatedAfter);
            urlBuilder.SetValue("updated_before", request.UpdatedBefore);
            urlBuilder.SetValue("my_reaction_emoji", request.MyReactionEmoji);
            urlBuilder.SetValue("source_branch", request.SourceBranch);
            urlBuilder.SetValue("target_branch", request.TargetBranch);
            urlBuilder.SetValue("search", request.Search);
            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<MergeRequest>(this, url, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<MergeRequest?> MergeRequests_GetMergeRequestAsync(Meziantou.GitLab.GetMergeRequestMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects/:project_id/merge_requests/:merge_request_iid");
            if (request.ProjectId.HasValue)
            {
                urlBuilder.SetValue("project_id", request.ProjectId.Value.ValueAsString);
            }

            if (request.MergeRequestIid.HasValue)
            {
                urlBuilder.SetValue("merge_request_iid", request.MergeRequestIid.Value.Value);
            }

            string url = urlBuilder.Build();
            return this.GetAsync<MergeRequest>(url, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<MergeRequest> MergeRequests_GetMergeRequests(Meziantou.GitLab.GetMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("merge_requests");
            urlBuilder.SetValue("state", request.State);
            urlBuilder.SetValue("scope", request.Scope);
            if (request.AssigneeId.HasValue)
            {
                urlBuilder.SetValue("assignee_id", request.AssigneeId.Value.ValueAsString);
            }

            if (request.AuthorId.HasValue)
            {
                urlBuilder.SetValue("author_id", request.AuthorId.Value.ValueAsString);
            }

            urlBuilder.SetValue("milestone", request.Milestone);
            urlBuilder.SetValue("view", request.View);
            urlBuilder.SetValue("labels", request.Labels);
            urlBuilder.SetValue("created_after", request.CreatedAfter);
            urlBuilder.SetValue("created_before", request.CreatedBefore);
            urlBuilder.SetValue("updated_after", request.UpdatedAfter);
            urlBuilder.SetValue("updated_before", request.UpdatedBefore);
            urlBuilder.SetValue("my_reaction_emoji", request.MyReactionEmoji);
            urlBuilder.SetValue("source_branch", request.SourceBranch);
            urlBuilder.SetValue("target_branch", request.TargetBranch);
            urlBuilder.SetValue("search", request.Search);
            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<MergeRequest>(this, url, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-project-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<MergeRequest> MergeRequests_GetProjectMergeRequests(Meziantou.GitLab.GetProjectMergeRequestsMergeRequestRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects/:project_id/merge_requests");
            if (request.ProjectId.HasValue)
            {
                urlBuilder.SetValue("project_id", request.ProjectId.Value.ValueAsString);
            }

            urlBuilder.SetValue("iids", request.Iids);
            urlBuilder.SetValue("state", request.State);
            urlBuilder.SetValue("scope", request.Scope);
            if (request.AssigneeId.HasValue)
            {
                urlBuilder.SetValue("assignee_id", request.AssigneeId.Value.ValueAsString);
            }

            if (request.AuthorId.HasValue)
            {
                urlBuilder.SetValue("author_id", request.AuthorId.Value.ValueAsString);
            }

            urlBuilder.SetValue("milestone", request.Milestone);
            urlBuilder.SetValue("view", request.View);
            urlBuilder.SetValue("labels", request.Labels);
            urlBuilder.SetValue("created_after", request.CreatedAfter);
            urlBuilder.SetValue("created_before", request.CreatedBefore);
            urlBuilder.SetValue("updated_after", request.UpdatedAfter);
            urlBuilder.SetValue("updated_before", request.UpdatedBefore);
            urlBuilder.SetValue("my_reaction_emoji", request.MyReactionEmoji);
            urlBuilder.SetValue("source_branch", request.SourceBranch);
            urlBuilder.SetValue("target_branch", request.TargetBranch);
            urlBuilder.SetValue("search", request.Search);
            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<MergeRequest>(this, url, requestOptions);
        }
    }

    public static partial class GitLabClientExtensions
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#create-mr" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<MergeRequest> CreateMergeRequestAsync(this Meziantou.GitLab.IGitLabMergeRequestsClient client, ProjectIdOrPathRef projectId, string sourceBranch, string targetBranch, string title, string? description = default(string?), UserRef? assigneeId = default(UserRef?), ProjectIdRef? targetProjectId = default(ProjectIdRef?), bool? removeSourceBranch = default(bool?), bool? allowCollaboration = default(bool?), bool? allowMaintainerToPush = default(bool?), bool? squash = default(bool?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.CreateMergeRequestMergeRequestRequest request = new Meziantou.GitLab.CreateMergeRequestMergeRequestRequest(projectId, sourceBranch, targetBranch, title);
            request.Description = description;
            request.AssigneeId = assigneeId;
            request.TargetProjectId = targetProjectId;
            request.RemoveSourceBranch = removeSourceBranch;
            request.AllowCollaboration = allowCollaboration;
            request.AllowMaintainerToPush = allowMaintainerToPush;
            request.Squash = squash;
            return client.CreateMergeRequestAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-group-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<MergeRequest> GetGroupMergeRequests(this Meziantou.GitLab.IGitLabMergeRequestsClient client, long groupId, MergeRequestState? state = default(MergeRequestState?), MergeRequestScopeFilter? scope = default(MergeRequestScopeFilter?), UserRef? assigneeId = default(UserRef?), UserRef? authorId = default(UserRef?), string? milestone = default(string?), MergeRequestView? view = default(MergeRequestView?), System.Collections.Generic.IEnumerable<string>? labels = default(System.Collections.Generic.IEnumerable<string>?), System.DateTimeOffset? createdAfter = default(System.DateTimeOffset?), System.DateTimeOffset? createdBefore = default(System.DateTimeOffset?), System.DateTimeOffset? updatedAfter = default(System.DateTimeOffset?), System.DateTimeOffset? updatedBefore = default(System.DateTimeOffset?), string? myReactionEmoji = default(string?), string? sourceBranch = default(string?), string? targetBranch = default(string?), string? search = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetGroupMergeRequestsMergeRequestRequest request = new Meziantou.GitLab.GetGroupMergeRequestsMergeRequestRequest(groupId);
            request.State = state;
            request.Scope = scope;
            request.AssigneeId = assigneeId;
            request.AuthorId = authorId;
            request.Milestone = milestone;
            request.View = view;
            request.Labels = labels;
            request.CreatedAfter = createdAfter;
            request.CreatedBefore = createdBefore;
            request.UpdatedAfter = updatedAfter;
            request.UpdatedBefore = updatedBefore;
            request.MyReactionEmoji = myReactionEmoji;
            request.SourceBranch = sourceBranch;
            request.TargetBranch = targetBranch;
            request.Search = search;
            return client.GetGroupMergeRequests(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<MergeRequest?> GetMergeRequestAsync(this Meziantou.GitLab.IGitLabMergeRequestsClient client, ProjectIdOrPathRef projectId, MergeRequestIidRef mergeRequestIid, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.GetMergeRequestMergeRequestRequest request = new Meziantou.GitLab.GetMergeRequestMergeRequestRequest(projectId, mergeRequestIid);
            return client.GetMergeRequestAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<MergeRequest> GetMergeRequests(this Meziantou.GitLab.IGitLabMergeRequestsClient client, MergeRequestState? state = default(MergeRequestState?), MergeRequestScopeFilter? scope = default(MergeRequestScopeFilter?), UserRef? assigneeId = default(UserRef?), UserRef? authorId = default(UserRef?), string? milestone = default(string?), MergeRequestView? view = default(MergeRequestView?), System.Collections.Generic.IEnumerable<string>? labels = default(System.Collections.Generic.IEnumerable<string>?), System.DateTimeOffset? createdAfter = default(System.DateTimeOffset?), System.DateTimeOffset? createdBefore = default(System.DateTimeOffset?), System.DateTimeOffset? updatedAfter = default(System.DateTimeOffset?), System.DateTimeOffset? updatedBefore = default(System.DateTimeOffset?), string? myReactionEmoji = default(string?), string? sourceBranch = default(string?), string? targetBranch = default(string?), string? search = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetMergeRequestsMergeRequestRequest request = new Meziantou.GitLab.GetMergeRequestsMergeRequestRequest();
            request.State = state;
            request.Scope = scope;
            request.AssigneeId = assigneeId;
            request.AuthorId = authorId;
            request.Milestone = milestone;
            request.View = view;
            request.Labels = labels;
            request.CreatedAfter = createdAfter;
            request.CreatedBefore = createdBefore;
            request.UpdatedAfter = updatedAfter;
            request.UpdatedBefore = updatedBefore;
            request.MyReactionEmoji = myReactionEmoji;
            request.SourceBranch = sourceBranch;
            request.TargetBranch = targetBranch;
            request.Search = search;
            return client.GetMergeRequests(request, requestOptions);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/merge_requests.html#list-project-merge-requests" />
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<MergeRequest> GetProjectMergeRequests(this Meziantou.GitLab.IGitLabMergeRequestsClient client, ProjectIdOrPathRef projectId, System.Collections.Generic.IEnumerable<long>? iids = default(System.Collections.Generic.IEnumerable<long>?), MergeRequestState? state = default(MergeRequestState?), MergeRequestScopeFilter? scope = default(MergeRequestScopeFilter?), UserRef? assigneeId = default(UserRef?), UserRef? authorId = default(UserRef?), string? milestone = default(string?), MergeRequestView? view = default(MergeRequestView?), System.Collections.Generic.IEnumerable<string>? labels = default(System.Collections.Generic.IEnumerable<string>?), System.DateTimeOffset? createdAfter = default(System.DateTimeOffset?), System.DateTimeOffset? createdBefore = default(System.DateTimeOffset?), System.DateTimeOffset? updatedAfter = default(System.DateTimeOffset?), System.DateTimeOffset? updatedBefore = default(System.DateTimeOffset?), string? myReactionEmoji = default(string?), string? sourceBranch = default(string?), string? targetBranch = default(string?), string? search = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetProjectMergeRequestsMergeRequestRequest request = new Meziantou.GitLab.GetProjectMergeRequestsMergeRequestRequest(projectId);
            request.Iids = iids;
            request.State = state;
            request.Scope = scope;
            request.AssigneeId = assigneeId;
            request.AuthorId = authorId;
            request.Milestone = milestone;
            request.View = view;
            request.Labels = labels;
            request.CreatedAfter = createdAfter;
            request.CreatedBefore = createdBefore;
            request.UpdatedAfter = updatedAfter;
            request.UpdatedBefore = updatedBefore;
            request.MyReactionEmoji = myReactionEmoji;
            request.SourceBranch = sourceBranch;
            request.TargetBranch = targetBranch;
            request.Search = search;
            return client.GetProjectMergeRequests(request, requestOptions);
        }
    }

    public partial class GetMergeRequestsMergeRequestRequest
    {
        private UserRef? _assigneeId;

        private UserRef? _authorId;

        private System.DateTimeOffset? _createdAfter;

        private System.DateTimeOffset? _createdBefore;

        private System.Collections.Generic.IEnumerable<string>? _labels;

        private string? _milestone;

        private string? _myReactionEmoji;

        private MergeRequestScopeFilter? _scope;

        private string? _search;

        private string? _sourceBranch;

        private MergeRequestState? _state;

        private string? _targetBranch;

        private System.DateTimeOffset? _updatedAfter;

        private System.DateTimeOffset? _updatedBefore;

        private MergeRequestView? _view;

        public GetMergeRequestsMergeRequestRequest()
        {
        }

        public UserRef? AssigneeId
        {
            get
            {
                return this._assigneeId;
            }
            set
            {
                this._assigneeId = value;
            }
        }

        public UserRef? AuthorId
        {
            get
            {
                return this._authorId;
            }
            set
            {
                this._authorId = value;
            }
        }

        public System.DateTimeOffset? CreatedAfter
        {
            get
            {
                return this._createdAfter;
            }
            set
            {
                this._createdAfter = value;
            }
        }

        public System.DateTimeOffset? CreatedBefore
        {
            get
            {
                return this._createdBefore;
            }
            set
            {
                this._createdBefore = value;
            }
        }

        public System.Collections.Generic.IEnumerable<string>? Labels
        {
            get
            {
                return this._labels;
            }
            set
            {
                this._labels = value;
            }
        }

        public string? Milestone
        {
            get
            {
                return this._milestone;
            }
            set
            {
                this._milestone = value;
            }
        }

        public string? MyReactionEmoji
        {
            get
            {
                return this._myReactionEmoji;
            }
            set
            {
                this._myReactionEmoji = value;
            }
        }

        public MergeRequestScopeFilter? Scope
        {
            get
            {
                return this._scope;
            }
            set
            {
                this._scope = value;
            }
        }

        public string? Search
        {
            get
            {
                return this._search;
            }
            set
            {
                this._search = value;
            }
        }

        public string? SourceBranch
        {
            get
            {
                return this._sourceBranch;
            }
            set
            {
                this._sourceBranch = value;
            }
        }

        public MergeRequestState? State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }

        public string? TargetBranch
        {
            get
            {
                return this._targetBranch;
            }
            set
            {
                this._targetBranch = value;
            }
        }

        public System.DateTimeOffset? UpdatedAfter
        {
            get
            {
                return this._updatedAfter;
            }
            set
            {
                this._updatedAfter = value;
            }
        }

        public System.DateTimeOffset? UpdatedBefore
        {
            get
            {
                return this._updatedBefore;
            }
            set
            {
                this._updatedBefore = value;
            }
        }

        public MergeRequestView? View
        {
            get
            {
                return this._view;
            }
            set
            {
                this._view = value;
            }
        }
    }

    public partial class GetGroupMergeRequestsMergeRequestRequest
    {
        private UserRef? _assigneeId;

        private UserRef? _authorId;

        private System.DateTimeOffset? _createdAfter;

        private System.DateTimeOffset? _createdBefore;

        private long? _groupId;

        private System.Collections.Generic.IEnumerable<string>? _labels;

        private string? _milestone;

        private string? _myReactionEmoji;

        private MergeRequestScopeFilter? _scope;

        private string? _search;

        private string? _sourceBranch;

        private MergeRequestState? _state;

        private string? _targetBranch;

        private System.DateTimeOffset? _updatedAfter;

        private System.DateTimeOffset? _updatedBefore;

        private MergeRequestView? _view;

        public GetGroupMergeRequestsMergeRequestRequest(long? groupId)
        {
            this._groupId = groupId;
        }

        public GetGroupMergeRequestsMergeRequestRequest()
        {
        }

        public UserRef? AssigneeId
        {
            get
            {
                return this._assigneeId;
            }
            set
            {
                this._assigneeId = value;
            }
        }

        public UserRef? AuthorId
        {
            get
            {
                return this._authorId;
            }
            set
            {
                this._authorId = value;
            }
        }

        public System.DateTimeOffset? CreatedAfter
        {
            get
            {
                return this._createdAfter;
            }
            set
            {
                this._createdAfter = value;
            }
        }

        public System.DateTimeOffset? CreatedBefore
        {
            get
            {
                return this._createdBefore;
            }
            set
            {
                this._createdBefore = value;
            }
        }

        public long? GroupId
        {
            get
            {
                return this._groupId;
            }
            set
            {
                this._groupId = value;
            }
        }

        public System.Collections.Generic.IEnumerable<string>? Labels
        {
            get
            {
                return this._labels;
            }
            set
            {
                this._labels = value;
            }
        }

        public string? Milestone
        {
            get
            {
                return this._milestone;
            }
            set
            {
                this._milestone = value;
            }
        }

        public string? MyReactionEmoji
        {
            get
            {
                return this._myReactionEmoji;
            }
            set
            {
                this._myReactionEmoji = value;
            }
        }

        public MergeRequestScopeFilter? Scope
        {
            get
            {
                return this._scope;
            }
            set
            {
                this._scope = value;
            }
        }

        public string? Search
        {
            get
            {
                return this._search;
            }
            set
            {
                this._search = value;
            }
        }

        public string? SourceBranch
        {
            get
            {
                return this._sourceBranch;
            }
            set
            {
                this._sourceBranch = value;
            }
        }

        public MergeRequestState? State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }

        public string? TargetBranch
        {
            get
            {
                return this._targetBranch;
            }
            set
            {
                this._targetBranch = value;
            }
        }

        public System.DateTimeOffset? UpdatedAfter
        {
            get
            {
                return this._updatedAfter;
            }
            set
            {
                this._updatedAfter = value;
            }
        }

        public System.DateTimeOffset? UpdatedBefore
        {
            get
            {
                return this._updatedBefore;
            }
            set
            {
                this._updatedBefore = value;
            }
        }

        public MergeRequestView? View
        {
            get
            {
                return this._view;
            }
            set
            {
                this._view = value;
            }
        }
    }

    public partial class GetProjectMergeRequestsMergeRequestRequest
    {
        private UserRef? _assigneeId;

        private UserRef? _authorId;

        private System.DateTimeOffset? _createdAfter;

        private System.DateTimeOffset? _createdBefore;

        private System.Collections.Generic.IEnumerable<long>? _iids;

        private System.Collections.Generic.IEnumerable<string>? _labels;

        private string? _milestone;

        private string? _myReactionEmoji;

        private ProjectIdOrPathRef? _projectId;

        private MergeRequestScopeFilter? _scope;

        private string? _search;

        private string? _sourceBranch;

        private MergeRequestState? _state;

        private string? _targetBranch;

        private System.DateTimeOffset? _updatedAfter;

        private System.DateTimeOffset? _updatedBefore;

        private MergeRequestView? _view;

        public GetProjectMergeRequestsMergeRequestRequest(ProjectIdOrPathRef? projectId)
        {
            this._projectId = projectId;
        }

        public GetProjectMergeRequestsMergeRequestRequest()
        {
        }

        public UserRef? AssigneeId
        {
            get
            {
                return this._assigneeId;
            }
            set
            {
                this._assigneeId = value;
            }
        }

        public UserRef? AuthorId
        {
            get
            {
                return this._authorId;
            }
            set
            {
                this._authorId = value;
            }
        }

        public System.DateTimeOffset? CreatedAfter
        {
            get
            {
                return this._createdAfter;
            }
            set
            {
                this._createdAfter = value;
            }
        }

        public System.DateTimeOffset? CreatedBefore
        {
            get
            {
                return this._createdBefore;
            }
            set
            {
                this._createdBefore = value;
            }
        }

        public System.Collections.Generic.IEnumerable<long>? Iids
        {
            get
            {
                return this._iids;
            }
            set
            {
                this._iids = value;
            }
        }

        public System.Collections.Generic.IEnumerable<string>? Labels
        {
            get
            {
                return this._labels;
            }
            set
            {
                this._labels = value;
            }
        }

        public string? Milestone
        {
            get
            {
                return this._milestone;
            }
            set
            {
                this._milestone = value;
            }
        }

        public string? MyReactionEmoji
        {
            get
            {
                return this._myReactionEmoji;
            }
            set
            {
                this._myReactionEmoji = value;
            }
        }

        public ProjectIdOrPathRef? ProjectId
        {
            get
            {
                return this._projectId;
            }
            set
            {
                this._projectId = value;
            }
        }

        public MergeRequestScopeFilter? Scope
        {
            get
            {
                return this._scope;
            }
            set
            {
                this._scope = value;
            }
        }

        public string? Search
        {
            get
            {
                return this._search;
            }
            set
            {
                this._search = value;
            }
        }

        public string? SourceBranch
        {
            get
            {
                return this._sourceBranch;
            }
            set
            {
                this._sourceBranch = value;
            }
        }

        public MergeRequestState? State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
            }
        }

        public string? TargetBranch
        {
            get
            {
                return this._targetBranch;
            }
            set
            {
                this._targetBranch = value;
            }
        }

        public System.DateTimeOffset? UpdatedAfter
        {
            get
            {
                return this._updatedAfter;
            }
            set
            {
                this._updatedAfter = value;
            }
        }

        public System.DateTimeOffset? UpdatedBefore
        {
            get
            {
                return this._updatedBefore;
            }
            set
            {
                this._updatedBefore = value;
            }
        }

        public MergeRequestView? View
        {
            get
            {
                return this._view;
            }
            set
            {
                this._view = value;
            }
        }
    }

    public partial class GetMergeRequestMergeRequestRequest
    {
        private MergeRequestIidRef? _mergeRequestIid;

        private ProjectIdOrPathRef? _projectId;

        public GetMergeRequestMergeRequestRequest(ProjectIdOrPathRef? projectId, MergeRequestIidRef? mergeRequestIid)
        {
            this._projectId = projectId;
            this._mergeRequestIid = mergeRequestIid;
        }

        public GetMergeRequestMergeRequestRequest()
        {
        }

        public MergeRequestIidRef? MergeRequestIid
        {
            get
            {
                return this._mergeRequestIid;
            }
            set
            {
                this._mergeRequestIid = value;
            }
        }

        public ProjectIdOrPathRef? ProjectId
        {
            get
            {
                return this._projectId;
            }
            set
            {
                this._projectId = value;
            }
        }
    }

    public partial class CreateMergeRequestMergeRequestRequest
    {
        private bool? _allowCollaboration;

        private bool? _allowMaintainerToPush;

        private UserRef? _assigneeId;

        private string? _description;

        private ProjectIdOrPathRef? _projectId;

        private bool? _removeSourceBranch;

        private string? _sourceBranch;

        private bool? _squash;

        private string? _targetBranch;

        private ProjectIdRef? _targetProjectId;

        private string? _title;

        public CreateMergeRequestMergeRequestRequest(ProjectIdOrPathRef? projectId, string? sourceBranch, string? targetBranch, string? title)
        {
            this._projectId = projectId;
            this._sourceBranch = sourceBranch;
            this._targetBranch = targetBranch;
            this._title = title;
        }

        public CreateMergeRequestMergeRequestRequest()
        {
        }

        public bool? AllowCollaboration
        {
            get
            {
                return this._allowCollaboration;
            }
            set
            {
                this._allowCollaboration = value;
            }
        }

        public bool? AllowMaintainerToPush
        {
            get
            {
                return this._allowMaintainerToPush;
            }
            set
            {
                this._allowMaintainerToPush = value;
            }
        }

        public UserRef? AssigneeId
        {
            get
            {
                return this._assigneeId;
            }
            set
            {
                this._assigneeId = value;
            }
        }

        public string? Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        public ProjectIdOrPathRef? ProjectId
        {
            get
            {
                return this._projectId;
            }
            set
            {
                this._projectId = value;
            }
        }

        public bool? RemoveSourceBranch
        {
            get
            {
                return this._removeSourceBranch;
            }
            set
            {
                this._removeSourceBranch = value;
            }
        }

        public string? SourceBranch
        {
            get
            {
                return this._sourceBranch;
            }
            set
            {
                this._sourceBranch = value;
            }
        }

        public bool? Squash
        {
            get
            {
                return this._squash;
            }
            set
            {
                this._squash = value;
            }
        }

        public string? TargetBranch
        {
            get
            {
                return this._targetBranch;
            }
            set
            {
                this._targetBranch = value;
            }
        }

        public ProjectIdRef? TargetProjectId
        {
            get
            {
                return this._targetProjectId;
            }
            set
            {
                this._targetProjectId = value;
            }
        }

        public string? Title
        {
            get
            {
                return this._title;
            }
            set
            {
                this._title = value;
            }
        }
    }
}
