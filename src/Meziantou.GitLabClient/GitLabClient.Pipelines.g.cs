// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabPipelinesClient Pipelines
        {
            get;
        }
    }

    public partial interface IGitLabPipelinesClient
    {
        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipelines/:pipeline_id/cancel</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#cancel-a-pipelines-jobs" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline> CancelPipelineAsync(Meziantou.GitLab.CancelPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipeline</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#create-a-new-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline> CreatePipelineAsync(Meziantou.GitLab.CreatePipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///   <para>URL: <c>DELETE /projects/:id/pipelines/:pipeline_id</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#delete-a-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline> DeletePipelineAsync(Meziantou.GitLab.DeletePipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/pipelines/:pipeline_id</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#get-a-single-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline?> GetPipelineAsync(Meziantou.GitLab.GetPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/pipelines</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#list-project-pipelines" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<PipelineBasic> GetPipelines(Meziantou.GitLab.GetPipelinesRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipelines/:pipeline_id/retry</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#retry-jobs-in-a-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline> RetryPipelineAsync(Meziantou.GitLab.RetryPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabPipelinesClient
    {
        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipelines/:pipeline_id/cancel</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#cancel-a-pipelines-jobs" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline> Meziantou.GitLab.IGitLabPipelinesClient.CancelPipelineAsync(Meziantou.GitLab.CancelPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Pipelines_CancelPipelineAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipeline</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#create-a-new-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline> Meziantou.GitLab.IGitLabPipelinesClient.CreatePipelineAsync(Meziantou.GitLab.CreatePipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Pipelines_CreatePipelineAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>DELETE /projects/:id/pipelines/:pipeline_id</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#delete-a-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline> Meziantou.GitLab.IGitLabPipelinesClient.DeletePipelineAsync(Meziantou.GitLab.DeletePipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Pipelines_DeletePipelineAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/pipelines/:pipeline_id</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#get-a-single-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline?> Meziantou.GitLab.IGitLabPipelinesClient.GetPipelineAsync(Meziantou.GitLab.GetPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Pipelines_GetPipelineAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/pipelines</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#list-project-pipelines" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<PipelineBasic> Meziantou.GitLab.IGitLabPipelinesClient.GetPipelines(Meziantou.GitLab.GetPipelinesRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.Pipelines_GetPipelines(request, requestOptions);
        }

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipelines/:pipeline_id/retry</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#retry-jobs-in-a-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Pipeline> Meziantou.GitLab.IGitLabPipelinesClient.RetryPipelineAsync(Meziantou.GitLab.RetryPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Pipelines_RetryPipelineAsync(request, requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabPipelinesClient Pipelines
        {
            get
            {
                return this;
            }
        }

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipelines/:pipeline_id/cancel</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#cancel-a-pipelines-jobs" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Pipeline> Pipelines_CancelPipelineAsync(Meziantou.GitLab.CancelPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.Pipelines_CancelPipelineAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Post;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Pipeline? result = await response.ToObjectAsync<Pipeline>(cancellationToken).ConfigureAwait(false);
                    if ((result == null))
                    {
                        throw new Meziantou.GitLab.GitLabException(response.RequestMethod, response.RequestUri, response.StatusCode, "The response cannot be converted to 'Pipeline' because the body is null or empty");
                    }

                    return result;
                }
                finally
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string Pipelines_CancelPipelineAsync_BuildUrl(Meziantou.GitLab.CancelPipelineRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().Value);
                }

                urlBuilder.Append("/pipelines/");
                if (request.PipelineId.HasValue)
                {
                    urlBuilder.AppendParameter(request.PipelineId.GetValueOrDefault().Value);
                }

                urlBuilder.Append("/cancel");
                url = urlBuilder.ToString();
            }

            return url;
        }

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipeline</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#create-a-new-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Pipeline> Pipelines_CreatePipelineAsync(Meziantou.GitLab.CreatePipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.Pipelines_CreatePipelineAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Post;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                requestMessage.Content = new Meziantou.GitLab.Internals.JsonContent(request, Meziantou.GitLab.Serialization.JsonSerialization.Options);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Pipeline? result = await response.ToObjectAsync<Pipeline>(cancellationToken).ConfigureAwait(false);
                    if ((result == null))
                    {
                        throw new Meziantou.GitLab.GitLabException(response.RequestMethod, response.RequestUri, response.StatusCode, "The response cannot be converted to 'Pipeline' because the body is null or empty");
                    }

                    return result;
                }
                finally
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string Pipelines_CreatePipelineAsync_BuildUrl(Meziantou.GitLab.CreatePipelineRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().Value);
                }

                urlBuilder.Append("/pipeline");
                url = urlBuilder.ToString();
            }

            return url;
        }

        /// <summary>
        ///   <para>URL: <c>DELETE /projects/:id/pipelines/:pipeline_id</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#delete-a-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Pipeline> Pipelines_DeletePipelineAsync(Meziantou.GitLab.DeletePipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.Pipelines_DeletePipelineAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Delete;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Pipeline? result = await response.ToObjectAsync<Pipeline>(cancellationToken).ConfigureAwait(false);
                    if ((result == null))
                    {
                        throw new Meziantou.GitLab.GitLabException(response.RequestMethod, response.RequestUri, response.StatusCode, "The response cannot be converted to 'Pipeline' because the body is null or empty");
                    }

                    return result;
                }
                finally
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string Pipelines_DeletePipelineAsync_BuildUrl(Meziantou.GitLab.DeletePipelineRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().Value);
                }

                urlBuilder.Append("/pipelines/");
                if (request.PipelineId.HasValue)
                {
                    urlBuilder.AppendParameter(request.PipelineId.GetValueOrDefault().Value);
                }

                url = urlBuilder.ToString();
            }

            return url;
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/pipelines/:pipeline_id</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#get-a-single-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Pipeline?> Pipelines_GetPipelineAsync(Meziantou.GitLab.GetPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.Pipelines_GetPipelineAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Get;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    if ((response.StatusCode == System.Net.HttpStatusCode.NotFound))
                    {
                        return default;
                    }

                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Pipeline? result = await response.ToObjectAsync<Pipeline>(cancellationToken).ConfigureAwait(false);
                    return result;
                }
                finally
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string Pipelines_GetPipelineAsync_BuildUrl(Meziantou.GitLab.GetPipelineRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().Value);
                }

                urlBuilder.Append("/pipelines/");
                if (request.PipelineId.HasValue)
                {
                    urlBuilder.AppendParameter(request.PipelineId.GetValueOrDefault().Value);
                }

                url = urlBuilder.ToString();
            }

            return url;
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/pipelines</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#list-project-pipelines" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<PipelineBasic> Pipelines_GetPipelines(Meziantou.GitLab.GetPipelinesRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            string url = Meziantou.GitLab.GitLabClient.Pipelines_GetPipelines_BuildUrl(request);
            return new Meziantou.GitLab.PagedResponse<PipelineBasic>(this, url, requestOptions);
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string Pipelines_GetPipelines_BuildUrl(Meziantou.GitLab.GetPipelinesRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().Value);
                }

                urlBuilder.Append("/pipelines");
                url = urlBuilder.ToString();
            }

            return url;
        }

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipelines/:pipeline_id/retry</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#retry-jobs-in-a-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private async System.Threading.Tasks.Task<Pipeline> Pipelines_RetryPipelineAsync(Meziantou.GitLab.RetryPipelineRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            string url = Meziantou.GitLab.GitLabClient.Pipelines_RetryPipelineAsync_BuildUrl(request);
            using (System.Net.Http.HttpRequestMessage requestMessage = new System.Net.Http.HttpRequestMessage())
            {
                requestMessage.Method = System.Net.Http.HttpMethod.Post;
                requestMessage.RequestUri = new System.Uri(url, System.UriKind.RelativeOrAbsolute);
                HttpResponse? response = null;
                try
                {
                    response = await this.SendAsync(requestMessage, requestOptions, cancellationToken).ConfigureAwait(false);
                    await response.EnsureStatusCodeAsync(cancellationToken).ConfigureAwait(false);
                    Pipeline? result = await response.ToObjectAsync<Pipeline>(cancellationToken).ConfigureAwait(false);
                    if ((result == null))
                    {
                        throw new Meziantou.GitLab.GitLabException(response.RequestMethod, response.RequestUri, response.StatusCode, "The response cannot be converted to 'Pipeline' because the body is null or empty");
                    }

                    return result;
                }
                finally
                {
                    if ((response != null))
                    {
                        response.Dispose();
                    }
                }
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Reliability", "CA2000:Dispose objects before losing scope", Justification = "The rule doesn't understand ref struct")]
        private static string Pipelines_RetryPipelineAsync_BuildUrl(Meziantou.GitLab.RetryPipelineRequest request)
        {
            string url;
            using (Meziantou.GitLab.Internals.UrlBuilder urlBuilder = new Meziantou.GitLab.Internals.UrlBuilder())
            {
                urlBuilder.Append("projects/");
                if (request.Id.HasValue)
                {
                    urlBuilder.AppendParameter(request.Id.GetValueOrDefault().Value);
                }

                urlBuilder.Append("/pipelines/");
                if (request.PipelineId.HasValue)
                {
                    urlBuilder.AppendParameter(request.PipelineId.GetValueOrDefault().Value);
                }

                urlBuilder.Append("/retry");
                url = urlBuilder.ToString();
            }

            return url;
        }
    }

    public static partial class GitLabClientExtensions
    {
        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipelines/:pipeline_id/cancel</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#cancel-a-pipelines-jobs" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Pipeline> CancelPipelineAsync(this Meziantou.GitLab.IGitLabPipelinesClient client, ProjectIdRef id, PipelineIdRef pipelineId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.CancelPipelineRequest request = new Meziantou.GitLab.CancelPipelineRequest(id, pipelineId);
            return client.CancelPipelineAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipeline</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#create-a-new-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Pipeline> CreatePipelineAsync(this Meziantou.GitLab.IGitLabPipelinesClient client, ProjectIdRef id, string @ref, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.CreatePipelineRequest request = new Meziantou.GitLab.CreatePipelineRequest(id, @ref);
            return client.CreatePipelineAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>DELETE /projects/:id/pipelines/:pipeline_id</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#delete-a-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Pipeline> DeletePipelineAsync(this Meziantou.GitLab.IGitLabPipelinesClient client, ProjectIdRef id, PipelineIdRef pipelineId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.DeletePipelineRequest request = new Meziantou.GitLab.DeletePipelineRequest(id, pipelineId);
            return client.DeletePipelineAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/pipelines/:pipeline_id</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#get-a-single-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Pipeline?> GetPipelineAsync(this Meziantou.GitLab.IGitLabPipelinesClient client, ProjectIdRef id, PipelineIdRef pipelineId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.GetPipelineRequest request = new Meziantou.GitLab.GetPipelineRequest(id, pipelineId);
            return client.GetPipelineAsync(request, requestOptions, cancellationToken);
        }

        /// <summary>
        ///   <para>URL: <c>GET /projects/:id/pipelines</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#list-project-pipelines" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<PipelineBasic> GetPipelines(this Meziantou.GitLab.IGitLabPipelinesClient client, ProjectIdRef id, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetPipelinesRequest request = new Meziantou.GitLab.GetPipelinesRequest(id);
            return client.GetPipelines(request, requestOptions);
        }

        /// <summary>
        ///   <para>URL: <c>POST /projects/:id/pipelines/:pipeline_id/retry</c></para>
        ///   <para>
        ///     <seealso href="https://docs.gitlab.com/ee/api/pipelines.html#retry-jobs-in-a-pipeline" />
        ///   </para>
        /// </summary>
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Pipeline> RetryPipelineAsync(this Meziantou.GitLab.IGitLabPipelinesClient client, ProjectIdRef id, PipelineIdRef pipelineId, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.RetryPipelineRequest request = new Meziantou.GitLab.RetryPipelineRequest(id, pipelineId);
            return client.RetryPipelineAsync(request, requestOptions, cancellationToken);
        }
    }

    public partial class CancelPipelineRequest
    {
        private ProjectIdRef? _id;

        private PipelineIdRef? _pipelineId;

        /// <param name="id">The ID or URL-encoded path of the project owned by the authenticated user</param>
        /// <param name="pipelineId">The ID of a pipeline</param>
        public CancelPipelineRequest(ProjectIdRef? id, PipelineIdRef? pipelineId)
        {
            this._id = id;
            this._pipelineId = pipelineId;
        }

        public CancelPipelineRequest()
        {
        }

        /// <summary>
        ///   <para>The ID or URL-encoded path of the project owned by the authenticated user</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>The ID of a pipeline</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public PipelineIdRef? PipelineId
        {
            get
            {
                return this._pipelineId;
            }
            set
            {
                this._pipelineId = value;
            }
        }
    }

    public partial class CreatePipelineRequest
    {
        private ProjectIdRef? _id;

        private string? _ref;

        /// <param name="id">The ID or URL-encoded path of the project owned by the authenticated user</param>
        /// <param name="ref">Reference to commit</param>
        public CreatePipelineRequest(ProjectIdRef? id, string? @ref)
        {
            this._id = id;
            this._ref = @ref;
        }

        public CreatePipelineRequest()
        {
        }

        /// <summary>
        ///   <para>The ID or URL-encoded path of the project owned by the authenticated user</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>Reference to commit</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("ref")]
        public string? Ref
        {
            get
            {
                return this._ref;
            }
            set
            {
                this._ref = value;
            }
        }
    }

    public partial class DeletePipelineRequest
    {
        private ProjectIdRef? _id;

        private PipelineIdRef? _pipelineId;

        /// <param name="id">The ID or URL-encoded path of the project owned by the authenticated user</param>
        /// <param name="pipelineId">The ID of a pipeline</param>
        public DeletePipelineRequest(ProjectIdRef? id, PipelineIdRef? pipelineId)
        {
            this._id = id;
            this._pipelineId = pipelineId;
        }

        public DeletePipelineRequest()
        {
        }

        /// <summary>
        ///   <para>The ID or URL-encoded path of the project owned by the authenticated user</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>The ID of a pipeline</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public PipelineIdRef? PipelineId
        {
            get
            {
                return this._pipelineId;
            }
            set
            {
                this._pipelineId = value;
            }
        }
    }

    public partial class GetPipelineRequest
    {
        private ProjectIdRef? _id;

        private PipelineIdRef? _pipelineId;

        /// <param name="id">The ID or URL-encoded path of the project owned by the authenticated user</param>
        /// <param name="pipelineId">The ID of a pipeline</param>
        public GetPipelineRequest(ProjectIdRef? id, PipelineIdRef? pipelineId)
        {
            this._id = id;
            this._pipelineId = pipelineId;
        }

        public GetPipelineRequest()
        {
        }

        /// <summary>
        ///   <para>The ID or URL-encoded path of the project owned by the authenticated user</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>The ID of a pipeline</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public PipelineIdRef? PipelineId
        {
            get
            {
                return this._pipelineId;
            }
            set
            {
                this._pipelineId = value;
            }
        }
    }

    public partial class GetPipelinesRequest
    {
        private ProjectIdRef? _id;

        /// <param name="id">The ID or URL-encoded path of the project owned by the authenticated user</param>
        public GetPipelinesRequest(ProjectIdRef? id)
        {
            this._id = id;
        }

        public GetPipelinesRequest()
        {
        }

        /// <summary>
        ///   <para>The ID or URL-encoded path of the project owned by the authenticated user</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
    }

    public partial class RetryPipelineRequest
    {
        private ProjectIdRef? _id;

        private PipelineIdRef? _pipelineId;

        /// <param name="id">The ID or URL-encoded path of the project owned by the authenticated user</param>
        /// <param name="pipelineId">The ID of a pipeline</param>
        public RetryPipelineRequest(ProjectIdRef? id, PipelineIdRef? pipelineId)
        {
            this._id = id;
            this._pipelineId = pipelineId;
        }

        public RetryPipelineRequest()
        {
        }

        /// <summary>
        ///   <para>The ID or URL-encoded path of the project owned by the authenticated user</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public ProjectIdRef? Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///   <para>The ID of a pipeline</para>
        /// </summary>
        [System.Text.Json.Serialization.JsonIgnoreAttribute]
        public PipelineIdRef? PipelineId
        {
            get
            {
                return this._pipelineId;
            }
            set
            {
                this._pipelineId = value;
            }
        }
    }
}
