// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    [System.Text.Json.Serialization.JsonConverterAttribute(typeof(Meziantou.GitLab.Serialization.GitLabObjectReferenceJsonConverterFactory))]
    public readonly partial struct PipelineIdRef : Meziantou.GitLab.Internals.IGitLabObjectReference<long>, System.IEquatable<Meziantou.GitLab.PipelineIdRef>
    {
        private readonly long _value;

        private PipelineIdRef(long pipelineBasicId)
        {
            this._value = pipelineBasicId;
        }

        private PipelineIdRef(PipelineBasic pipelineBasic)
        {
            if ((pipelineBasic == null))
            {
                throw new System.ArgumentNullException(nameof(pipelineBasic));
            }

            this._value = pipelineBasic.Id;
        }

        public long Value
        {
            get
            {
                return this._value;
            }
        }

        public override bool Equals(object? obj)
        {
            if ((obj is Meziantou.GitLab.PipelineIdRef))
            {
                return this.Equals(((Meziantou.GitLab.PipelineIdRef)obj));
            }
            else
            {
                return false;
            }
        }

        public bool Equals(Meziantou.GitLab.PipelineIdRef other)
        {
            return object.Equals(this.Value, other.Value);
        }

        public static Meziantou.GitLab.PipelineIdRef FromPipelineBasic(PipelineBasic pipelineBasic)
        {
            if ((pipelineBasic == null))
            {
                throw new System.ArgumentNullException(nameof(pipelineBasic));
            }

            return new Meziantou.GitLab.PipelineIdRef(pipelineBasic);
        }

        public static Meziantou.GitLab.PipelineIdRef FromPipelineBasicId(long pipelineBasicId)
        {
            return new Meziantou.GitLab.PipelineIdRef(pipelineBasicId);
        }

        public override int GetHashCode()
        {
            return System.HashCode.Combine(this.Value);
        }

        public override string ToString()
        {
            return this.Value.ToString(System.Globalization.CultureInfo.InvariantCulture);
        }

        public static implicit operator Meziantou.GitLab.PipelineIdRef(long pipelineBasicId)
        {
            return Meziantou.GitLab.PipelineIdRef.FromPipelineBasicId(pipelineBasicId);
        }

        public static implicit operator Meziantou.GitLab.PipelineIdRef?(long? pipelineBasicId)
        {
            if (pipelineBasicId.HasValue)
            {
                return Meziantou.GitLab.PipelineIdRef.FromPipelineBasicId(pipelineBasicId.Value);
            }
            else
            {
                return null;
            }
        }

        public static implicit operator Meziantou.GitLab.PipelineIdRef(PipelineBasic pipelineBasic)
        {
            return Meziantou.GitLab.PipelineIdRef.FromPipelineBasic(pipelineBasic);
        }

        public static implicit operator Meziantou.GitLab.PipelineIdRef?(PipelineBasic? pipelineBasic)
        {
            if (object.ReferenceEquals(pipelineBasic, null))
            {
                return null;
            }
            else
            {
                return Meziantou.GitLab.PipelineIdRef.FromPipelineBasic(pipelineBasic);
            }
        }

        public static bool operator !=(Meziantou.GitLab.PipelineIdRef a, Meziantou.GitLab.PipelineIdRef b)
        {
            return (!(a == b));
        }

        public static bool operator ==(Meziantou.GitLab.PipelineIdRef a, Meziantou.GitLab.PipelineIdRef b)
        {
            return System.Collections.Generic.EqualityComparer<Meziantou.GitLab.PipelineIdRef>.Default.Equals(a, b);
        }
    }
}
