// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    [System.Text.Json.Serialization.JsonConverterAttribute(typeof(Meziantou.GitLab.Serialization.RenderedMarkdownJsonConverter))]
    public partial class RenderedMarkdown : Meziantou.GitLab.Core.GitLabObject, System.IEquatable<Meziantou.GitLab.RenderedMarkdown>
    {
        internal RenderedMarkdown(System.Text.Json.JsonElement obj)
            : base(obj)
        {
        }

        [Meziantou.GitLab.Internals.MappedPropertyAttribute("html")]
        public string Html
        {
            get
            {
                return this.GetRequiredNonNullValue<string>("html");
            }
        }

        public override bool Equals(object? obj)
        {
            return this.Equals((obj as Meziantou.GitLab.RenderedMarkdown));
        }

        public virtual bool Equals(Meziantou.GitLab.RenderedMarkdown? obj)
        {
            return ((!object.ReferenceEquals(obj, null)) && (this.Html == obj.Html));
        }

        public override int GetHashCode()
        {
            return System.HashCode.Combine(this.Html);
        }

        public static bool operator !=(Meziantou.GitLab.RenderedMarkdown? a, Meziantou.GitLab.RenderedMarkdown? b)
        {
            return (!(a == b));
        }

        public static bool operator ==(Meziantou.GitLab.RenderedMarkdown? a, Meziantou.GitLab.RenderedMarkdown? b)
        {
            return System.Collections.Generic.EqualityComparer<Meziantou.GitLab.RenderedMarkdown>.Default.Equals(a, b);
        }
    }
}

namespace Meziantou.GitLab.Serialization
{
    internal sealed partial class RenderedMarkdownJsonConverter : Meziantou.GitLab.Serialization.GitLabObjectBaseJsonConverter<Meziantou.GitLab.RenderedMarkdown>
    {
        protected override Meziantou.GitLab.RenderedMarkdown CreateInstance(System.Text.Json.JsonElement jsonElement)
        {
            return new Meziantou.GitLab.RenderedMarkdown(jsonElement);
        }
    }
}
