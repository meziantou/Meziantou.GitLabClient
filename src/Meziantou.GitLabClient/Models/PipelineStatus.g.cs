// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    [System.Text.Json.Serialization.JsonConverterAttribute(typeof(Meziantou.GitLab.Serialization.PipelineStatusJsonConverter))]
    public enum PipelineStatus
    {
        [System.Runtime.Serialization.EnumMemberAttribute(Value = "created")]
        Created,
        [System.Runtime.Serialization.EnumMemberAttribute(Value = "pending")]
        Pending,
        [System.Runtime.Serialization.EnumMemberAttribute(Value = "running")]
        Running,
        [System.Runtime.Serialization.EnumMemberAttribute(Value = "failed")]
        Failed,
        [System.Runtime.Serialization.EnumMemberAttribute(Value = "success")]
        Success,
        [System.Runtime.Serialization.EnumMemberAttribute(Value = "canceled")]
        Canceled,
        [System.Runtime.Serialization.EnumMemberAttribute(Value = "skipped")]
        Skipped
    }
}

namespace Meziantou.GitLab.Serialization
{
    internal partial class EnumMember
    {
        private static readonly Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>[] s_pipelineStatusMembers = Meziantou.GitLab.Serialization.EnumMember.CreatePipelineStatusMembers();

        public static Meziantou.GitLab.PipelineStatus PipelineStatusFromString(string value)
        {
            return Meziantou.GitLab.Serialization.EnumMember.FromString(value, Meziantou.GitLab.Serialization.EnumMember.s_pipelineStatusMembers);
        }

        public static string ToString(Meziantou.GitLab.PipelineStatus value)
        {
            if ((value == Meziantou.GitLab.PipelineStatus.Created))
            {
                return "created";
            }

            if ((value == Meziantou.GitLab.PipelineStatus.Pending))
            {
                return "pending";
            }

            if ((value == Meziantou.GitLab.PipelineStatus.Running))
            {
                return "running";
            }

            if ((value == Meziantou.GitLab.PipelineStatus.Failed))
            {
                return "failed";
            }

            if ((value == Meziantou.GitLab.PipelineStatus.Success))
            {
                return "success";
            }

            if ((value == Meziantou.GitLab.PipelineStatus.Canceled))
            {
                return "canceled";
            }

            if ((value == Meziantou.GitLab.PipelineStatus.Skipped))
            {
                return "skipped";
            }

            throw new System.ArgumentOutOfRangeException(nameof(value), string.Concat("Value '", value.ToString(), "' is not valid"));
        }

        private static Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>[] CreatePipelineStatusMembers()
        {
            Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>[] result = new Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>[7];
            result[0] = new Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>(Meziantou.GitLab.PipelineStatus.Created, "created");
            result[1] = new Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>(Meziantou.GitLab.PipelineStatus.Pending, "pending");
            result[2] = new Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>(Meziantou.GitLab.PipelineStatus.Running, "running");
            result[3] = new Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>(Meziantou.GitLab.PipelineStatus.Failed, "failed");
            result[4] = new Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>(Meziantou.GitLab.PipelineStatus.Success, "success");
            result[5] = new Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>(Meziantou.GitLab.PipelineStatus.Canceled, "canceled");
            result[6] = new Meziantou.GitLab.Serialization.EnumMember<Meziantou.GitLab.PipelineStatus>(Meziantou.GitLab.PipelineStatus.Skipped, "skipped");
            return result;
        }
    }

    internal sealed partial class PipelineStatusJsonConverter : Meziantou.GitLab.Serialization.EnumBaseJsonConverter<Meziantou.GitLab.PipelineStatus>
    {
        protected override Meziantou.GitLab.PipelineStatus FromString(string value)
        {
            return Meziantou.GitLab.Serialization.EnumMember.PipelineStatusFromString(value);
        }

        protected override string ToString(Meziantou.GitLab.PipelineStatus value)
        {
            return Meziantou.GitLab.Serialization.EnumMember.ToString(value);
        }
    }
}

namespace Meziantou.GitLab.Internals
{
    internal partial struct UrlBuilder
    {
        public void AppendParameter(Meziantou.GitLab.PipelineStatus value)
        {
            this.Append(Meziantou.GitLab.Serialization.EnumMember.ToString(value));
        }

        public void AppendRawParameter(Meziantou.GitLab.PipelineStatus value)
        {
            this.Append(Meziantou.GitLab.Serialization.EnumMember.ToString(value));
        }
    }
}
