namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class AppearanceClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Change appearance configuration", MethodType.Put, "/application/appearance", "https://docs.gitlab.com/ee/api/appearance.html#change-appearance-configuration")
                .WithReturnType(Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("logo", Models.)
                .AddOptionalParameter("header_logo", Models.)
                .AddOptionalParameter("favicon", Models.)
                .AddOptionalParameter("new_project_guidelines", Models.)
                .AddOptionalParameter("profile_image_guidelines", Models.)
                .AddOptionalParameter("header_message", Models.)
                .AddOptionalParameter("footer_message", Models.)
                .AddOptionalParameter("message_background_color", Models.)
                .AddOptionalParameter("message_font_color", Models.)
                .AddOptionalParameter("email_header_and_footer_enabled", Models.)
            ;

            methodGroup.AddMethod("Get current appearance configuration", MethodType.Get, "/application/appearance", "https://docs.gitlab.com/ee/api/appearance.html#get-current-appearance-configuration")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ApplicationsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create an application", MethodType.Post, "/applications", "https://docs.gitlab.com/ee/api/applications.html#create-an-application")
                .WithReturnType(Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("redirect_uri", Models.)
                .AddRequiredParameter("scopes", Models.)
                .AddOptionalParameter("confidential", Models.)
            ;

            methodGroup.AddMethod("Delete an application", MethodType.Delete, "/applications/:id", "https://docs.gitlab.com/ee/api/applications.html#delete-an-application")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List all applications", MethodType.Get, "/applications", "https://docs.gitlab.com/ee/api/applications.html#list-all-applications")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ApplicationSettingsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Change application settings", MethodType.Put, "/application/settings", "https://docs.gitlab.com/ee/api/settings.html#change-application-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get current application settings", MethodType.Get, "/application/settings", "https://docs.gitlab.com/ee/api/settings.html#get-current-application-settings")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ApplicationStatisticsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get current application statistics", MethodType.Get, "/application/statistics", "https://docs.gitlab.com/ee/api/statistics.html#get-current-application-statistics")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class AuditEventsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Retrieve a specific group audit event", MethodType.Get, "/groups/:id/audit_events/:audit_event_id", "https://docs.gitlab.com/ee/api/audit_events.html#retrieve-a-specific-group-audit-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("audit_event_id", Models.)
            ;

            methodGroup.AddMethod("Retrieve a specific project audit event", MethodType.Get, "/projects/:id/audit_events/:audit_event_id", "https://docs.gitlab.com/ee/api/audit_events.html#retrieve-a-specific-project-audit-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("audit_event_id", Models.)
            ;

            methodGroup.AddMethod("Retrieve all group audit events", MethodType.Get, "/groups/:id/audit_events", "https://docs.gitlab.com/ee/api/audit_events.html#retrieve-all-group-audit-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
            ;

            methodGroup.AddMethod("Retrieve all instance audit events", MethodType.Get, "/audit_events", "https://docs.gitlab.com/ee/api/audit_events.html#retrieve-all-instance-audit-events")
                .WithReturnType(Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
                .AddOptionalParameter("entity_type", Models.)
                .AddOptionalParameter("entity_id", Models.)
            ;

            methodGroup.AddMethod("Retrieve all project audit events", MethodType.Get, "/projects/:id/audit_events", "https://docs.gitlab.com/ee/api/audit_events.html#retrieve-all-project-audit-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
            ;

            methodGroup.AddMethod("Retrieve single instance audit event", MethodType.Get, "/audit_events/:id", "https://docs.gitlab.com/ee/api/audit_events.html#retrieve-single-instance-audit-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class AwardEmojiClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Award a new emoji", MethodType.Post, "/projects/:id/issues/:issue_iid/award_emoji", "https://docs.gitlab.com/ee/api/award_emoji.html#award-a-new-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("Award a new emoji", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/award_emoji", "https://docs.gitlab.com/ee/api/award_emoji.html#award-a-new-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("Award a new emoji", MethodType.Post, "/projects/:id/snippets/:snippet_id/award_emoji", "https://docs.gitlab.com/ee/api/award_emoji.html#award-a-new-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("Award a new emoji on a comment", MethodType.Post, "/projects/:id/issues/:issue_iid/notes/:note_id/award_emoji", "https://docs.gitlab.com/ee/api/award_emoji.html#award-a-new-emoji-on-a-comment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("Delete an award emoji", MethodType.Delete, "/projects/:id/issues/:issue_iid/award_emoji/:award_id", "https://docs.gitlab.com/ee/api/award_emoji.html#delete-an-award-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("award_id", Models.)
            ;

            methodGroup.AddMethod("Delete an award emoji", MethodType.Delete, "/projects/:id/merge_requests/:merge_request_iid/award_emoji/:award_id", "https://docs.gitlab.com/ee/api/award_emoji.html#delete-an-award-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("award_id", Models.)
            ;

            methodGroup.AddMethod("Delete an award emoji", MethodType.Delete, "/projects/:id/snippets/:snippet_id/award_emoji/:award_id", "https://docs.gitlab.com/ee/api/award_emoji.html#delete-an-award-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("award_id", Models.)
            ;

            methodGroup.AddMethod("Delete an award emoji from a comment", MethodType.Delete, "/projects/:id/issues/:issue_iid/notes/:note_id/award_emoji/:award_id", "https://docs.gitlab.com/ee/api/award_emoji.html#delete-an-award-emoji-from-a-comment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("award_id", Models.)
            ;

            methodGroup.AddMethod("Get an award emoji for a comment", MethodType.Get, "/projects/:id/issues/:issue_iid/notes/:note_id/award_emoji/:award_id", "https://docs.gitlab.com/ee/api/award_emoji.html#get-an-award-emoji-for-a-comment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("award_id", Models.)
            ;

            methodGroup.AddMethod("Get single award emoji", MethodType.Get, "/projects/:id/issues/:issue_iid/award_emoji/:award_id", "https://docs.gitlab.com/ee/api/award_emoji.html#get-single-award-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("award_id", Models.)
            ;

            methodGroup.AddMethod("Get single award emoji", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/award_emoji/:award_id", "https://docs.gitlab.com/ee/api/award_emoji.html#get-single-award-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("award_id", Models.)
            ;

            methodGroup.AddMethod("Get single award emoji", MethodType.Get, "/projects/:id/snippets/:snippet_id/award_emoji/:award_id", "https://docs.gitlab.com/ee/api/award_emoji.html#get-single-award-emoji")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
                .AddRequiredParameter("award_id", Models.)
            ;

            methodGroup.AddMethod("List a comment’s award emojis", MethodType.Get, "/projects/:id/issues/:issue_iid/notes/:note_id/award_emoji", "https://docs.gitlab.com/ee/api/award_emoji.html#list-a-comments-award-emojis")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("List an awardable’s award emojis", MethodType.Get, "/projects/:id/issues/:issue_iid/award_emoji", "https://docs.gitlab.com/ee/api/award_emoji.html#list-an-awardables-award-emojis")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
            ;

            methodGroup.AddMethod("List an awardable’s award emojis", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/award_emoji", "https://docs.gitlab.com/ee/api/award_emoji.html#list-an-awardables-award-emojis")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
            ;

            methodGroup.AddMethod("List an awardable’s award emojis", MethodType.Get, "/projects/:id/snippets/:snippet_id/award_emoji", "https://docs.gitlab.com/ee/api/award_emoji.html#list-an-awardables-award-emojis")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid/merge_request_iid/snippet_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class BranchesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create repository branch", MethodType.Post, "/projects/:id/repository/branches", "https://docs.gitlab.com/ee/api/branches.html#create-repository-branch")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("branch", Models.)
                .AddRequiredParameter("ref", Models.)
            ;

            methodGroup.AddMethod("Delete merged branches", MethodType.Delete, "/projects/:id/repository/merged_branches", "https://docs.gitlab.com/ee/api/branches.html#delete-merged-branches")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Delete repository branch", MethodType.Delete, "/projects/:id/repository/branches/:branch", "https://docs.gitlab.com/ee/api/branches.html#delete-repository-branch")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("branch", Models.)
            ;

            methodGroup.AddMethod("Get single repository branch", MethodType.Get, "/projects/:id/repository/branches/:branch", "https://docs.gitlab.com/ee/api/branches.html#get-single-repository-branch")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("branch", Models.)
            ;

            methodGroup.AddMethod("List repository branches", MethodType.Get, "/projects/:id/repository/branches", "https://docs.gitlab.com/ee/api/branches.html#list-repository-branches")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("search", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class BroadcastMessagesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a broadcast message", MethodType.Post, "/broadcast_messages", "https://docs.gitlab.com/ee/api/broadcast_messages.html#create-a-broadcast-message")
                .WithReturnType(Models.)
                .AddRequiredParameter("message", Models.)
                .AddOptionalParameter("starts_at", Models.)
                .AddOptionalParameter("ends_at", Models.)
                .AddOptionalParameter("color", Models.)
                .AddOptionalParameter("font", Models.)
                .AddOptionalParameter("target_path", Models.)
                .AddOptionalParameter("broadcast_type", Models.)
                .AddOptionalParameter("dismissable", Models.)
            ;

            methodGroup.AddMethod("Delete a broadcast message", MethodType.Delete, "/broadcast_messages/:id", "https://docs.gitlab.com/ee/api/broadcast_messages.html#delete-a-broadcast-message")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get a specific broadcast message", MethodType.Get, "/broadcast_messages/:id", "https://docs.gitlab.com/ee/api/broadcast_messages.html#get-a-specific-broadcast-message")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get all broadcast messages", MethodType.Get, "/broadcast_messages", "https://docs.gitlab.com/ee/api/broadcast_messages.html#get-all-broadcast-messages")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Update a broadcast message", MethodType.Put, "/broadcast_messages/:id", "https://docs.gitlab.com/ee/api/broadcast_messages.html#update-a-broadcast-message")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("message", Models.)
                .AddOptionalParameter("starts_at", Models.)
                .AddOptionalParameter("ends_at", Models.)
                .AddOptionalParameter("color", Models.)
                .AddOptionalParameter("font", Models.)
                .AddOptionalParameter("target_path", Models.)
                .AddOptionalParameter("broadcast_type", Models.)
                .AddOptionalParameter("dismissable", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class CommitsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Cherry pick a commit", MethodType.Post, "/projects/:id/repository/commits/:sha/cherry_pick", "https://docs.gitlab.com/ee/api/commits.html#cherry-pick-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
                .AddRequiredParameter("branch", Models.)
                .AddOptionalParameter("dry_run", Models.)
            ;

            methodGroup.AddMethod("Create a commit with multiple files and actions", MethodType.Post, "/projects/:id/repository/commits", "https://docs.gitlab.com/ee/api/commits.html#create-a-commit-with-multiple-files-and-actions")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("branch", Models.)
                .AddRequiredParameter("commit_message", Models.)
                .AddOptionalParameter("start_branch", Models.)
                .AddOptionalParameter("start_sha", Models.)
                .AddOptionalParameter("start_project", Models.)
                .AddRequiredParameter("actions", Models.)
                .AddOptionalParameter("author_email", Models.)
                .AddOptionalParameter("author_name", Models.)
                .AddOptionalParameter("stats", Models.)
                .AddOptionalParameter("force", Models.)
            ;

            methodGroup.AddMethod("Get a single commit", MethodType.Get, "/projects/:id/repository/commits/:sha", "https://docs.gitlab.com/ee/api/commits.html#get-a-single-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
                .AddOptionalParameter("stats", Models.)
            ;

            methodGroup.AddMethod("Get GPG signature of a commit", MethodType.Get, "/projects/:id/repository/commits/:sha/signature", "https://docs.gitlab.com/ee/api/commits.html#get-gpg-signature-of-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
            ;

            methodGroup.AddMethod("Get references a commit is pushed to", MethodType.Get, "/projects/:id/repository/commits/:sha/refs", "https://docs.gitlab.com/ee/api/commits.html#get-references-a-commit-is-pushed-to")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
                .AddOptionalParameter("type", Models.)
            ;

            methodGroup.AddMethod("Get the comments of a commit", MethodType.Get, "/projects/:id/repository/commits/:sha/comments", "https://docs.gitlab.com/ee/api/commits.html#get-the-comments-of-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
            ;

            methodGroup.AddMethod("Get the diff of a commit", MethodType.Get, "/projects/:id/repository/commits/:sha/diff", "https://docs.gitlab.com/ee/api/commits.html#get-the-diff-of-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
            ;

            methodGroup.AddMethod("Get the discussions of a commit", MethodType.Get, "/projects/:id/repository/commits/:sha/discussions", "https://docs.gitlab.com/ee/api/commits.html#get-the-discussions-of-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
            ;

            methodGroup.AddMethod("List Merge Requests associated with a commit", MethodType.Get, "/projects/:id/repository/commits/:sha/merge_requests", "https://docs.gitlab.com/ee/api/commits.html#list-merge-requests-associated-with-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
            ;

            methodGroup.AddMethod("List repository commits", MethodType.Get, "/projects/:id/repository/commits", "https://docs.gitlab.com/ee/api/commits.html#list-repository-commits")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("ref_name", Models.)
                .AddOptionalParameter("since", Models.)
                .AddOptionalParameter("until", Models.)
                .AddOptionalParameter("path", Models.)
                .AddOptionalParameter("all", Models.)
                .AddOptionalParameter("with_stats", Models.)
                .AddOptionalParameter("first_parent", Models.)
                .AddOptionalParameter("order", Models.)
            ;

            methodGroup.AddMethod("List the statuses of a commit", MethodType.Get, "/projects/:id/repository/commits/:sha/statuses", "https://docs.gitlab.com/ee/api/commits.html#list-the-statuses-of-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
                .AddOptionalParameter("ref", Models.)
                .AddOptionalParameter("stage", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("all", Models.)
            ;

            methodGroup.AddMethod("Post comment to commit", MethodType.Post, "/projects/:id/repository/commits/:sha/comments", "https://docs.gitlab.com/ee/api/commits.html#post-comment-to-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
                .AddRequiredParameter("note", Models.)
                .AddOptionalParameter("path", Models.)
                .AddOptionalParameter("line", Models.)
                .AddOptionalParameter("line_type", Models.)
            ;

            methodGroup.AddMethod("Post the build status to a commit", MethodType.Post, "/projects/:id/statuses/:sha", "https://docs.gitlab.com/ee/api/commits.html#post-the-build-status-to-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
                .AddRequiredParameter("state", Models.)
                .AddOptionalParameter("ref", Models.)
                .AddOptionalParameter("name or context", Models.)
                .AddOptionalParameter("target_url", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("coverage", Models.)
                .AddOptionalParameter("pipeline_id", Models.)
            ;

            methodGroup.AddMethod("Revert a commit", MethodType.Post, "/projects/:id/repository/commits/:sha/revert", "https://docs.gitlab.com/ee/api/commits.html#revert-a-commit")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("sha", Models.)
                .AddRequiredParameter("branch", Models.)
                .AddOptionalParameter("dry_run", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ContainerRegistryClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Delete a registry repository tag", MethodType.Delete, "/projects/:id/registry/repositories/:repository_id/tags/:tag_name", "https://docs.gitlab.com/ee/api/container_registry.html#delete-a-registry-repository-tag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("repository_id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("Delete registry repository", MethodType.Delete, "/projects/:id/registry/repositories/:repository_id", "https://docs.gitlab.com/ee/api/container_registry.html#delete-registry-repository")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("repository_id", Models.)
            ;

            methodGroup.AddMethod("Delete registry repository tags in bulk", MethodType.Delete, "/projects/:id/registry/repositories/:repository_id/tags", "https://docs.gitlab.com/ee/api/container_registry.html#delete-registry-repository-tags-in-bulk")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("repository_id", Models.)
                .AddOptionalParameter("name_regex", Models.)
                .AddRequiredParameter("name_regex_delete", Models.)
                .AddOptionalParameter("name_regex_keep", Models.)
                .AddOptionalParameter("keep_n", Models.)
                .AddOptionalParameter("older_than", Models.)
            ;

            methodGroup.AddMethod("Get details of a registry repository tag", MethodType.Get, "/projects/:id/registry/repositories/:repository_id/tags/:tag_name", "https://docs.gitlab.com/ee/api/container_registry.html#get-details-of-a-registry-repository-tag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("repository_id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("Get details of a single repository", MethodType.Get, "/registry/repositories/:id", "https://docs.gitlab.com/ee/api/container_registry.html#get-details-of-a-single-repository")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("tags", Models.)
                .AddOptionalParameter("tags_count", Models.)
            ;

            methodGroup.AddMethod("Within a group", MethodType.Get, "/groups/:id/registry/repositories", "https://docs.gitlab.com/ee/api/container_registry.html#within-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("tags", Models.)
                .AddOptionalParameter("tags_count", Models.)
            ;

            methodGroup.AddMethod("Within a project", MethodType.Get, "/projects/:id/registry/repositories", "https://docs.gitlab.com/ee/api/container_registry.html#within-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("tags", Models.)
                .AddOptionalParameter("tags_count", Models.)
            ;

            methodGroup.AddMethod("Within a project", MethodType.Get, "/projects/:id/registry/repositories/:repository_id/tags", "https://docs.gitlab.com/ee/api/container_registry.html#within-a-project-1")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("repository_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class CustomAttributesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Delete custom attribute", MethodType.Delete, "/users/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#delete-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("Delete custom attribute", MethodType.Delete, "/groups/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#delete-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("Delete custom attribute", MethodType.Delete, "/projects/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#delete-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("List custom attributes", MethodType.Get, "/users/:id/custom_attributes", "https://docs.gitlab.com/ee/api/custom_attributes.html#list-custom-attributes")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List custom attributes", MethodType.Get, "/groups/:id/custom_attributes", "https://docs.gitlab.com/ee/api/custom_attributes.html#list-custom-attributes")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List custom attributes", MethodType.Get, "/projects/:id/custom_attributes", "https://docs.gitlab.com/ee/api/custom_attributes.html#list-custom-attributes")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Set custom attribute", MethodType.Put, "/users/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#set-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
            ;

            methodGroup.AddMethod("Set custom attribute", MethodType.Put, "/groups/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#set-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
            ;

            methodGroup.AddMethod("Set custom attribute", MethodType.Put, "/projects/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#set-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
            ;

            methodGroup.AddMethod("Single custom attribute", MethodType.Get, "/users/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#single-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("Single custom attribute", MethodType.Get, "/groups/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#single-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("Single custom attribute", MethodType.Get, "/projects/:id/custom_attributes/:key", "https://docs.gitlab.com/ee/api/custom_attributes.html#single-custom-attribute")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class DashboardAnnotationsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a new annotation", MethodType.Post, "/environments/:id/metrics_dashboard/annotations/", "https://docs.gitlab.com/ee/api/metrics_dashboard_annotations.html#create-a-new-annotation")
                .WithReturnType(Models.)
                .AddRequiredParameter("dashboard_path", Models.)
                .AddRequiredParameter("starting_at", Models.)
                .AddOptionalParameter("ending_at", Models.)
                .AddRequiredParameter("description", Models.)
            ;

            methodGroup.AddMethod("Create a new annotation", MethodType.Post, "/clusters/:id/metrics_dashboard/annotations/", "https://docs.gitlab.com/ee/api/metrics_dashboard_annotations.html#create-a-new-annotation")
                .WithReturnType(Models.)
                .AddRequiredParameter("dashboard_path", Models.)
                .AddRequiredParameter("starting_at", Models.)
                .AddOptionalParameter("ending_at", Models.)
                .AddRequiredParameter("description", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class DependenciesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("List project dependencies", MethodType.Get, "/projects/:id/dependencies", "https://docs.gitlab.com/ee/api/dependencies.html#list-project-dependencies")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("package_manager", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class DependencyProxyClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Purge the dependency proxy for a group", MethodType.Delete, "/groups/:id/dependency_proxy/cache", "https://docs.gitlab.com/ee/api/dependency_proxy.html#purge-the-dependency-proxy-for-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class DeployKeysClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add deploy key", MethodType.Post, "/projects/:id/deploy_keys", "https://docs.gitlab.com/ee/api/deploy_keys.html#add-deploy-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("title", Models.)
                .AddRequiredParameter("key", Models.)
                .AddOptionalParameter("can_push", Models.)
            ;

            methodGroup.AddMethod("Delete deploy key", MethodType.Delete, "/projects/:id/deploy_keys/:key_id", "https://docs.gitlab.com/ee/api/deploy_keys.html#delete-deploy-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key_id", Models.)
            ;

            methodGroup.AddMethod("Enable a deploy key", MethodType.Post, "/projects/:id/deploy_keys/:key_id/enable", "https://docs.gitlab.com/ee/api/deploy_keys.html#enable-a-deploy-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key_id", Models.)
            ;

            methodGroup.AddMethod("List all deploy keys", MethodType.Get, "/deploy_keys", "https://docs.gitlab.com/ee/api/deploy_keys.html#list-all-deploy-keys")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List project deploy keys", MethodType.Get, "/projects/:id/deploy_keys", "https://docs.gitlab.com/ee/api/deploy_keys.html#list-project-deploy-keys")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Single deploy key", MethodType.Get, "/projects/:id/deploy_keys/:key_id", "https://docs.gitlab.com/ee/api/deploy_keys.html#single-deploy-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key_id", Models.)
            ;

            methodGroup.AddMethod("Update deploy key", MethodType.Put, "/projects/:id/deploy_keys/:key_id", "https://docs.gitlab.com/ee/api/deploy_keys.html#update-deploy-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("can_push", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class DeploymentsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a deployment", MethodType.Post, "/projects/:id/deployments", "https://docs.gitlab.com/ee/api/deployments.html#create-a-deployment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("environment", Models.)
                .AddRequiredParameter("sha", Models.)
                .AddRequiredParameter("ref", Models.)
                .AddRequiredParameter("tag", Models.)
                .AddRequiredParameter("status", Models.)
            ;

            methodGroup.AddMethod("Get a specific deployment", MethodType.Get, "/projects/:id/deployments/:deployment_id", "https://docs.gitlab.com/ee/api/deployments.html#get-a-specific-deployment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("deployment_id", Models.)
            ;

            methodGroup.AddMethod("List of merge requests associated with a deployment", MethodType.Get, "/projects/:id/deployments/:deployment_id/merge_requests", "https://docs.gitlab.com/ee/api/deployments.html#list-of-merge-requests-associated-with-a-deployment")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List project deployments", MethodType.Get, "/projects/:id/deployments", "https://docs.gitlab.com/ee/api/deployments.html#list-project-deployments")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("environment", Models.)
                .AddOptionalParameter("status", Models.)
            ;

            methodGroup.AddMethod("Updating a deployment", MethodType.Put, "/projects/:id/deployments/:deployment_id", "https://docs.gitlab.com/ee/api/deployments.html#updating-a-deployment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("deployment_id", Models.)
                .AddRequiredParameter("status", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class DiscussionsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add note to existing commit thread", MethodType.Post, "/projects/:id/commits/:commit_id/discussions/:discussion_id/notes", "https://docs.gitlab.com/ee/api/discussions.html#add-note-to-existing-commit-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("commit_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
            ;

            methodGroup.AddMethod("Add note to existing epic thread", MethodType.Post, "/groups/:id/epics/:epic_id/discussions/:discussion_id/notes", "https://docs.gitlab.com/ee/api/discussions.html#add-note-to-existing-epic-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
            ;

            methodGroup.AddMethod("Add note to existing issue thread", MethodType.Post, "/projects/:id/issues/:issue_iid/discussions/:discussion_id/notes", "https://docs.gitlab.com/ee/api/discussions.html#add-note-to-existing-issue-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
            ;

            methodGroup.AddMethod("Add note to existing merge request thread", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes", "https://docs.gitlab.com/ee/api/discussions.html#add-note-to-existing-merge-request-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
            ;

            methodGroup.AddMethod("Add note to existing snippet thread", MethodType.Post, "/projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes", "https://docs.gitlab.com/ee/api/discussions.html#add-note-to-existing-snippet-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
            ;

            methodGroup.AddMethod("Create new commit thread", MethodType.Post, "/projects/:id/commits/:commit_id/discussions", "https://docs.gitlab.com/ee/api/discussions.html#create-new-commit-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("commit_id", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
                .AddOptionalParameter("position", Models.)
                .AddRequiredParameter("position[base_sha]", Models.)
                .AddRequiredParameter("position[start_sha]", Models.)
                .AddRequiredParameter("position[head_sha]", Models.)
                .AddRequiredParameter("position[position_type]", Models.)
                .AddOptionalParameter("position[new_path]", Models.)
                .AddOptionalParameter("position[new_line]", Models.)
                .AddOptionalParameter("position[old_path]", Models.)
                .AddOptionalParameter("position[old_line]", Models.)
                .AddOptionalParameter("position[width]", Models.)
                .AddOptionalParameter("position[height]", Models.)
                .AddOptionalParameter("position[x]", Models.)
                .AddOptionalParameter("position[y]", Models.)
            ;

            methodGroup.AddMethod("Create new epic thread", MethodType.Post, "/groups/:id/epics/:epic_id/discussions", "https://docs.gitlab.com/ee/api/discussions.html#create-new-epic-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
            ;

            methodGroup.AddMethod("Create new issue thread", MethodType.Post, "/projects/:id/issues/:issue_iid/discussions", "https://docs.gitlab.com/ee/api/discussions.html#create-new-issue-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
            ;

            methodGroup.AddMethod("Create new merge request thread", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/discussions", "https://docs.gitlab.com/ee/api/discussions.html#create-new-merge-request-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("commit_id", Models.)
                .AddOptionalParameter("created_at", Models.)
                .AddOptionalParameter("position", Models.)
                .AddRequiredParameter("position[base_sha]", Models.)
                .AddRequiredParameter("position[start_sha]", Models.)
                .AddRequiredParameter("position[head_sha]", Models.)
                .AddRequiredParameter("position[position_type]", Models.)
                .AddOptionalParameter("position[new_path]", Models.)
                .AddOptionalParameter("position[new_line]", Models.)
                .AddOptionalParameter("position[old_path]", Models.)
                .AddOptionalParameter("position[old_line]", Models.)
                .AddOptionalParameter("position[line_range]", Models.)
                .AddOptionalParameter("position[line_range][start]", Models.)
                .AddRequiredParameter("position[line_range][start][line_code]", Models.)
                .AddRequiredParameter("position[line_range][start][type]", Models.)
                .AddOptionalParameter("position[line_range][end]", Models.)
                .AddRequiredParameter("position[line_range][end][line_code]", Models.)
                .AddRequiredParameter("position[line_range][end][type]", Models.)
                .AddOptionalParameter("position[width]", Models.)
                .AddOptionalParameter("position[height]", Models.)
                .AddOptionalParameter("position[x]", Models.)
                .AddOptionalParameter("position[y]", Models.)
            ;

            methodGroup.AddMethod("Create new snippet thread", MethodType.Post, "/projects/:id/snippets/:snippet_id/discussions", "https://docs.gitlab.com/ee/api/discussions.html#create-new-snippet-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
                .AddRequiredParameter("body", Models.)
                .AddOptionalParameter("created_at", Models.)
            ;

            methodGroup.AddMethod("Delete a commit thread note", MethodType.Delete, "/projects/:id/commits/:commit_id/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#delete-a-commit-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("commit_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Delete a merge request thread note", MethodType.Delete, "/projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#delete-a-merge-request-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Delete a snippet thread note", MethodType.Delete, "/projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#delete-a-snippet-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Delete an epic thread note", MethodType.Delete, "/groups/:id/epics/:epic_id/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#delete-an-epic-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Delete an issue thread note", MethodType.Delete, "/projects/:id/issues/:issue_iid/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#delete-an-issue-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Get single commit discussion item", MethodType.Get, "/projects/:id/commits/:commit_id/discussions/:discussion_id", "https://docs.gitlab.com/ee/api/discussions.html#get-single-commit-discussion-item")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("commit_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
            ;

            methodGroup.AddMethod("Get single epic discussion item", MethodType.Get, "/groups/:id/epics/:epic_id/discussions/:discussion_id", "https://docs.gitlab.com/ee/api/discussions.html#get-single-epic-discussion-item")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
            ;

            methodGroup.AddMethod("Get single issue discussion item", MethodType.Get, "/projects/:id/issues/:issue_iid/discussions/:discussion_id", "https://docs.gitlab.com/ee/api/discussions.html#get-single-issue-discussion-item")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
            ;

            methodGroup.AddMethod("Get single merge request discussion item", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id", "https://docs.gitlab.com/ee/api/discussions.html#get-single-merge-request-discussion-item")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
            ;

            methodGroup.AddMethod("Get single snippet discussion item", MethodType.Get, "/projects/:id/snippets/:snippet_id/discussions/:discussion_id", "https://docs.gitlab.com/ee/api/discussions.html#get-single-snippet-discussion-item")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
            ;

            methodGroup.AddMethod("List group epic discussion items", MethodType.Get, "/groups/:id/epics/:epic_id/discussions", "https://docs.gitlab.com/ee/api/discussions.html#list-group-epic-discussion-items")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
            ;

            methodGroup.AddMethod("List project commit discussion items", MethodType.Get, "/projects/:id/commits/:commit_id/discussions", "https://docs.gitlab.com/ee/api/discussions.html#list-project-commit-discussion-items")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("commit_id", Models.)
            ;

            methodGroup.AddMethod("List project issue discussion items", MethodType.Get, "/projects/:id/issues/:issue_iid/discussions", "https://docs.gitlab.com/ee/api/discussions.html#list-project-issue-discussion-items")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("List project merge request discussion items", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/discussions", "https://docs.gitlab.com/ee/api/discussions.html#list-project-merge-request-discussion-items")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("List project snippet discussion items", MethodType.Get, "/projects/:id/snippets/:snippet_id/discussions", "https://docs.gitlab.com/ee/api/discussions.html#list-project-snippet-discussion-items")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
            ;

            methodGroup.AddMethod("Modify an existing commit thread note", MethodType.Put, "/projects/:id/commits/:commit_id/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#modify-an-existing-commit-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("commit_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddOptionalParameter("body", Models.)
            ;

            methodGroup.AddMethod("Modify an existing merge request thread note", MethodType.Put, "/projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#modify-an-existing-merge-request-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddOptionalParameter("body", Models.)
                .AddOptionalParameter("resolved", Models.)
            ;

            methodGroup.AddMethod("Modify existing epic thread note", MethodType.Put, "/groups/:id/epics/:epic_id/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#modify-existing-epic-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
            ;

            methodGroup.AddMethod("Modify existing issue thread note", MethodType.Put, "/projects/:id/issues/:issue_iid/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#modify-existing-issue-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
            ;

            methodGroup.AddMethod("Modify existing snippet thread note", MethodType.Put, "/projects/:id/snippets/:snippet_id/discussions/:discussion_id/notes/:note_id", "https://docs.gitlab.com/ee/api/discussions.html#modify-existing-snippet-thread-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
            ;

            methodGroup.AddMethod("Resolve a merge request thread", MethodType.Put, "/projects/:id/merge_requests/:merge_request_iid/discussions/:discussion_id", "https://docs.gitlab.com/ee/api/discussions.html#resolve-a-merge-request-thread")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("discussion_id", Models.)
                .AddRequiredParameter("resolved", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class EnvironmentsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a new environment", MethodType.Post, "/projects/:id/environments", "https://docs.gitlab.com/ee/api/environments.html#create-a-new-environment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("external_url", Models.)
            ;

            methodGroup.AddMethod("Delete an environment", MethodType.Delete, "/projects/:id/environments/:environment_id", "https://docs.gitlab.com/ee/api/environments.html#delete-an-environment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("environment_id", Models.)
            ;

            methodGroup.AddMethod("Edit an existing environment", MethodType.Put, "/projects/:id/environments/:environments_id", "https://docs.gitlab.com/ee/api/environments.html#edit-an-existing-environment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("environment_id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("external_url", Models.)
            ;

            methodGroup.AddMethod("Get a specific environment", MethodType.Get, "/projects/:id/environments/:environment_id", "https://docs.gitlab.com/ee/api/environments.html#get-a-specific-environment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("environment_id", Models.)
            ;

            methodGroup.AddMethod("List environments", MethodType.Get, "/projects/:id/environments", "https://docs.gitlab.com/ee/api/environments.html#list-environments")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("states", Models.)
            ;

            methodGroup.AddMethod("Stop an environment", MethodType.Post, "/projects/:id/environments/:environment_id/stop", "https://docs.gitlab.com/ee/api/environments.html#stop-an-environment")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("environment_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class EpicIssuesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Assign an issue to the epic", MethodType.Post, "/groups/:id/epics/:epic_iid/issues/:issue_id", "https://docs.gitlab.com/ee/api/epic_issues.html#assign-an-issue-to-the-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
                .AddRequiredParameter("issue_id", Models.)
            ;

            methodGroup.AddMethod("List issues for an epic", MethodType.Get, "/groups/:id/epics/:epic_iid/issues", "https://docs.gitlab.com/ee/api/epic_issues.html#list-issues-for-an-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
            ;

            methodGroup.AddMethod("Remove an issue from the epic", MethodType.Delete, "/groups/:id/epics/:epic_iid/issues/:epic_issue_id", "https://docs.gitlab.com/ee/api/epic_issues.html#remove-an-issue-from-the-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
                .AddRequiredParameter("epic_issue_id", Models.)
            ;

            methodGroup.AddMethod("Update epic - issue association", MethodType.Put, "/groups/:id/epics/:epic_iid/issues/:epic_issue_id", "https://docs.gitlab.com/ee/api/epic_issues.html#update-epic---issue-association")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
                .AddRequiredParameter("epic_issue_id", Models.)
                .AddOptionalParameter("move_before_id", Models.)
                .AddOptionalParameter("move_after_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class EpicLinksClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Assign a child epic", MethodType.Post, "/groups/:id/epics/:epic_iid/epics", "https://docs.gitlab.com/ee/api/epic_links.html#assign-a-child-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
                .AddRequiredParameter("child_epic_id", Models.)
            ;

            methodGroup.AddMethod("List epics related to a given epic", MethodType.Get, "/groups/:id/epics/:epic_iid/epics", "https://docs.gitlab.com/ee/api/epic_links.html#list-epics-related-to-a-given-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
            ;

            methodGroup.AddMethod("Re-order a child epic", MethodType.Put, "/groups/:id/epics/:epic_iid/epics/:child_epic_id", "https://docs.gitlab.com/ee/api/epic_links.html#re-order-a-child-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
                .AddRequiredParameter("child_epic_id", Models.)
                .AddOptionalParameter("move_before_id", Models.)
                .AddOptionalParameter("move_after_id", Models.)
            ;

            methodGroup.AddMethod("Unassign a child epic", MethodType.Delete, "/groups/:id/epics/:epic_iid/epics/:child_epic_id", "https://docs.gitlab.com/ee/api/epic_links.html#unassign-a-child-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
                .AddRequiredParameter("child_epic_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class EpicsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a to-do item", MethodType.Post, "/groups/:id/epics/:epic_iid/todo", "https://docs.gitlab.com/ee/api/epics.html#create-a-to-do-item")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
            ;

            methodGroup.AddMethod("Delete epic", MethodType.Delete, "/groups/:id/epics/:epic_iid", "https://docs.gitlab.com/ee/api/epics.html#delete-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
            ;

            methodGroup.AddMethod("List epics for a group", MethodType.Get, "/groups/:id/epics", "https://docs.gitlab.com/ee/api/epics.html#list-epics-for-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("author_id", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("with_labels_details", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("include_ancestor_groups", Models.)
                .AddOptionalParameter("include_descendant_groups", Models.)
                .AddOptionalParameter("my_reaction_emoji", Models.)
            ;

            methodGroup.AddMethod("New epic", MethodType.Post, "/groups/:id/epics", "https://docs.gitlab.com/ee/api/epics.html#new-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("title", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("created_at", Models.)
                .AddOptionalParameter("start_date_is_fixed", Models.)
                .AddOptionalParameter("start_date_fixed", Models.)
                .AddOptionalParameter("due_date_is_fixed", Models.)
                .AddOptionalParameter("due_date_fixed", Models.)
                .AddOptionalParameter("parent_id", Models.)
            ;

            methodGroup.AddMethod("Single epic", MethodType.Get, "/groups/:id/epics/:epic_iid", "https://docs.gitlab.com/ee/api/epics.html#single-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
            ;

            methodGroup.AddMethod("Update epic", MethodType.Put, "/groups/:id/epics/:epic_iid", "https://docs.gitlab.com/ee/api/epics.html#update-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_iid", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("add_labels", Models.)
                .AddOptionalParameter("remove_labels", Models.)
                .AddOptionalParameter("updated_at", Models.)
                .AddOptionalParameter("start_date_is_fixed", Models.)
                .AddOptionalParameter("start_date_fixed", Models.)
                .AddOptionalParameter("due_date_is_fixed", Models.)
                .AddOptionalParameter("due_date_fixed", Models.)
                .AddOptionalParameter("state_event", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ErrorTrackingSettingsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Enable or disable the Error Tracking project settings", MethodType.Patch, "/projects/:id/error_tracking/settings", "https://docs.gitlab.com/ee/api/error_tracking.html#enable-or-disable-the-error-tracking-project-settings")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("active", Models.)
            ;

            methodGroup.AddMethod("Get Error Tracking settings", MethodType.Get, "/projects/:id/error_tracking/settings", "https://docs.gitlab.com/ee/api/error_tracking.html#get-error-tracking-settings")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class EventsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get user contribution events", MethodType.Get, "/users/:id/events", "https://docs.gitlab.com/ee/api/events.html#get-user-contribution-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("action", Models.)
                .AddOptionalParameter("target_type", Models.)
                .AddOptionalParameter("before", Models.)
                .AddOptionalParameter("after", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("List a Project’s visible events", MethodType.Get, "/projects/:project_id/events", "https://docs.gitlab.com/ee/api/events.html#list-a-projects-visible-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("project_id", Models.)
                .AddOptionalParameter("action", Models.)
                .AddOptionalParameter("target_type", Models.)
                .AddOptionalParameter("before", Models.)
                .AddOptionalParameter("after", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("List currently authenticated user’s events", MethodType.Get, "/events", "https://docs.gitlab.com/ee/api/events.html#list-currently-authenticated-users-events")
                .WithReturnType(Models.)
                .AddOptionalParameter("action", Models.)
                .AddOptionalParameter("target_type", Models.)
                .AddOptionalParameter("before", Models.)
                .AddOptionalParameter("after", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class FeatureFlagsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a feature flag", MethodType.Post, "/projects/:id/feature_flags", "https://docs.gitlab.com/ee/api/feature_flags.html#create-a-feature-flag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("version", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("active", Models.)
                .AddOptionalParameter("strategies", Models.)
                .AddOptionalParameter("strategies:name", Models.)
                .AddOptionalParameter("strategies:parameters", Models.)
                .AddOptionalParameter("strategies:scopes", Models.)
                .AddOptionalParameter("strategies:scopes:environment_scope", Models.)
            ;

            methodGroup.AddMethod("Delete a feature flag", MethodType.Delete, "/projects/:id/feature_flags/:feature_flag_name", "https://docs.gitlab.com/ee/api/feature_flags.html#delete-a-feature-flag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("feature_flag_name", Models.)
            ;

            methodGroup.AddMethod("Get a single feature flag", MethodType.Get, "/projects/:id/feature_flags/:feature_flag_name", "https://docs.gitlab.com/ee/api/feature_flags.html#get-a-single-feature-flag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("feature_flag_name", Models.)
            ;

            methodGroup.AddMethod("List feature flags for a project", MethodType.Get, "/projects/:id/feature_flags", "https://docs.gitlab.com/ee/api/feature_flags.html#list-feature-flags-for-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("scope", Models.)
            ;

            methodGroup.AddMethod("Update a feature flag", MethodType.Put, "/projects/:id/feature_flags/:feature_flag_name", "https://docs.gitlab.com/ee/api/feature_flags.html#update-a-feature-flag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("feature_flag_name", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("active", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("strategies", Models.)
                .AddOptionalParameter("strategies:id", Models.)
                .AddOptionalParameter("strategies:name", Models.)
                .AddOptionalParameter("strategies:parameters", Models.)
                .AddOptionalParameter("strategies:scopes", Models.)
                .AddOptionalParameter("strategies:scopes:id", Models.)
                .AddOptionalParameter("strategies:scopes:environment_scope", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class FeatureFlagUserListsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a feature flag user list", MethodType.Post, "/projects/:id/feature_flags_user_lists", "https://docs.gitlab.com/ee/api/feature_flag_user_lists.html#create-a-feature-flag-user-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("user_xids", Models.)
            ;

            methodGroup.AddMethod("Delete feature flag user list", MethodType.Delete, "/projects/:id/feature_flags_user_lists/:iid", "https://docs.gitlab.com/ee/api/feature_flag_user_lists.html#delete-feature-flag-user-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("iid", Models.)
            ;

            methodGroup.AddMethod("Get a feature flag user list", MethodType.Get, "/projects/:id/feature_flags_user_lists/:iid", "https://docs.gitlab.com/ee/api/feature_flag_user_lists.html#get-a-feature-flag-user-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("iid", Models.)
            ;

            methodGroup.AddMethod("List all feature flag user lists for a project", MethodType.Get, "/projects/:id/feature_flags_user_lists", "https://docs.gitlab.com/ee/api/feature_flag_user_lists.html#list-all-feature-flag-user-lists-for-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("search", Models.)
            ;

            methodGroup.AddMethod("Update a feature flag user list", MethodType.Put, "/projects/:id/feature_flags_user_lists/:iid", "https://docs.gitlab.com/ee/api/feature_flag_user_lists.html#update-a-feature-flag-user-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("iid", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("user_xids", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class FreezePeriodsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a Freeze Period", MethodType.Post, "/projects/:id/freeze_periods", "https://docs.gitlab.com/ee/api/freeze_periods.html#create-a-freeze-period")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("freeze_start", Models.)
                .AddRequiredParameter("freeze_end", Models.)
                .AddOptionalParameter("cron_timezone", Models.)
            ;

            methodGroup.AddMethod("Delete a Freeze Period", MethodType.Delete, "/projects/:id/freeze_periods/:freeze_period_id", "https://docs.gitlab.com/ee/api/freeze_periods.html#delete-a-freeze-period")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("freeze_period_id", Models.)
            ;

            methodGroup.AddMethod("Get a Freeze Period by a freeze_period_id", MethodType.Get, "/projects/:id/freeze_periods/:freeze_period_id", "https://docs.gitlab.com/ee/api/freeze_periods.html#get-a-freeze-period-by-a-freeze_period_id")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("freeze_period_id", Models.)
            ;

            methodGroup.AddMethod("List Freeze Periods", MethodType.Get, "/projects/:id/freeze_periods", "https://docs.gitlab.com/ee/api/freeze_periods.html#list-freeze-periods")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Update a Freeze Period", MethodType.Put, "/projects/:id/freeze_periods/:tag_name", "https://docs.gitlab.com/ee/api/freeze_periods.html#update-a-freeze-period")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("freeze_period_id", Models.)
                .AddOptionalParameter("freeze_start", Models.)
                .AddOptionalParameter("freeze_end", Models.)
                .AddOptionalParameter("cron_timezone", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GeoNodesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a new Geo node", MethodType.Post, "/geo_nodes", "https://docs.gitlab.com/ee/api/geo_nodes.html#create-a-new-geo-node")
                .WithReturnType(Models.)
                .AddOptionalParameter("primary", Models.)
                .AddOptionalParameter("enabled", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("url", Models.)
                .AddOptionalParameter("internal_url", Models.)
                .AddOptionalParameter("files_max_capacity", Models.)
                .AddOptionalParameter("repos_max_capacity", Models.)
                .AddOptionalParameter("verification_max_capacity", Models.)
                .AddOptionalParameter("container_repositories_max_capacity", Models.)
                .AddOptionalParameter("sync_object_storage", Models.)
                .AddOptionalParameter("selective_sync_type", Models.)
                .AddOptionalParameter("selective_sync_shards", Models.)
                .AddOptionalParameter("selective_sync_namespace_ids", Models.)
                .AddOptionalParameter("minimum_reverification_interval", Models.)
            ;

            methodGroup.AddMethod("Delete a Geo node", MethodType.Delete, "/geo_nodes/:id", "https://docs.gitlab.com/ee/api/geo_nodes.html#delete-a-geo-node")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Edit a Geo node", MethodType.Put, "/geo_nodes/:id", "https://docs.gitlab.com/ee/api/geo_nodes.html#edit-a-geo-node")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("enabled", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("url", Models.)
                .AddOptionalParameter("internal_url", Models.)
                .AddOptionalParameter("files_max_capacity", Models.)
                .AddOptionalParameter("repos_max_capacity", Models.)
                .AddOptionalParameter("verification_max_capacity", Models.)
                .AddOptionalParameter("container_repositories_max_capacity", Models.)
                .AddOptionalParameter("sync_object_storage", Models.)
                .AddOptionalParameter("selective_sync_type", Models.)
                .AddOptionalParameter("selective_sync_shards", Models.)
                .AddOptionalParameter("selective_sync_namespace_ids", Models.)
                .AddOptionalParameter("minimum_reverification_interval", Models.)
            ;

            methodGroup.AddMethod("Repair a Geo node", MethodType.Post, "/geo_nodes/:id/repair", "https://docs.gitlab.com/ee/api/geo_nodes.html#repair-a-geo-node")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Retrieve configuration about a specific Geo node", MethodType.Get, "/geo_nodes/:id", "https://docs.gitlab.com/ee/api/geo_nodes.html#retrieve-configuration-about-a-specific-geo-node")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Retrieve configuration about all Geo nodes", MethodType.Get, "/geo_nodes", "https://docs.gitlab.com/ee/api/geo_nodes.html#retrieve-configuration-about-all-geo-nodes")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Retrieve project sync or verification failures that occurred on the current node", MethodType.Get, "/geo_nodes/current/failures", "https://docs.gitlab.com/ee/api/geo_nodes.html#retrieve-project-sync-or-verification-failures-that-occurred-on-the-current-node")
                .WithReturnType(Models.)
                .AddOptionalParameter("type", Models.)
                .AddOptionalParameter("failure_type", Models.)
            ;

            methodGroup.AddMethod("Retrieve status about a specific Geo node", MethodType.Get, "/geo_nodes/:id/status", "https://docs.gitlab.com/ee/api/geo_nodes.html#retrieve-status-about-a-specific-geo-node")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Retrieve status about all Geo nodes", MethodType.Get, "/geo_nodes/status", "https://docs.gitlab.com/ee/api/geo_nodes.html#retrieve-status-about-all-geo-nodes")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupActivityAnalyticsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get count of members recently added to group", MethodType.Get, "/analytics/group_activity/new_members_count", "https://docs.gitlab.com/ee/api/group_activity_analytics.html#get-count-of-members-recently-added-to-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("group_path", Models.)
            ;

            methodGroup.AddMethod("Get count of recently created issues for group", MethodType.Get, "/analytics/group_activity/issues_count", "https://docs.gitlab.com/ee/api/group_activity_analytics.html#get-count-of-recently-created-issues-for-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("group_path", Models.)
            ;

            methodGroup.AddMethod("Get count of recently created merge requests for group", MethodType.Get, "/analytics/group_activity/merge_requests_count", "https://docs.gitlab.com/ee/api/group_activity_analytics.html#get-count-of-recently-created-merge-requests-for-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("group_path", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupAndProjectAccessRequestsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Approve an access request", MethodType.Put, "/groups/:id/access_requests/:user_id/approve", "https://docs.gitlab.com/ee/api/access_requests.html#approve-an-access-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddOptionalParameter("access_level", Models.)
            ;

            methodGroup.AddMethod("Approve an access request", MethodType.Put, "/projects/:id/access_requests/:user_id/approve", "https://docs.gitlab.com/ee/api/access_requests.html#approve-an-access-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddOptionalParameter("access_level", Models.)
            ;

            methodGroup.AddMethod("Deny an access request", MethodType.Delete, "/groups/:id/access_requests/:user_id", "https://docs.gitlab.com/ee/api/access_requests.html#deny-an-access-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
            ;

            methodGroup.AddMethod("Deny an access request", MethodType.Delete, "/projects/:id/access_requests/:user_id", "https://docs.gitlab.com/ee/api/access_requests.html#deny-an-access-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
            ;

            methodGroup.AddMethod("List access requests for a group or project", MethodType.Get, "/groups/:id/access_requests", "https://docs.gitlab.com/ee/api/access_requests.html#list-access-requests-for-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List access requests for a group or project", MethodType.Get, "/projects/:id/access_requests", "https://docs.gitlab.com/ee/api/access_requests.html#list-access-requests-for-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Request access to a group or project", MethodType.Post, "/groups/:id/access_requests", "https://docs.gitlab.com/ee/api/access_requests.html#request-access-to-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Request access to a group or project", MethodType.Post, "/projects/:id/access_requests", "https://docs.gitlab.com/ee/api/access_requests.html#request-access-to-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupBadgesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add a badge to a group", MethodType.Post, "/groups/:id/badges", "https://docs.gitlab.com/ee/api/group_badges.html#add-a-badge-to-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("link_url", Models.)
                .AddRequiredParameter("image_url", Models.)
            ;

            methodGroup.AddMethod("Edit a badge of a group", MethodType.Put, "/groups/:id/badges/:badge_id", "https://docs.gitlab.com/ee/api/group_badges.html#edit-a-badge-of-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("badge_id", Models.)
                .AddOptionalParameter("link_url", Models.)
                .AddOptionalParameter("image_url", Models.)
            ;

            methodGroup.AddMethod("Get a badge of a group", MethodType.Get, "/groups/:id/badges/:badge_id", "https://docs.gitlab.com/ee/api/group_badges.html#get-a-badge-of-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("badge_id", Models.)
            ;

            methodGroup.AddMethod("List all badges of a group", MethodType.Get, "/groups/:id/badges", "https://docs.gitlab.com/ee/api/group_badges.html#list-all-badges-of-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("name", Models.)
            ;

            methodGroup.AddMethod("Preview a badge from a group", MethodType.Get, "/groups/:id/badges/render", "https://docs.gitlab.com/ee/api/group_badges.html#preview-a-badge-from-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("link_url", Models.)
                .AddRequiredParameter("image_url", Models.)
            ;

            methodGroup.AddMethod("Remove a badge from a group", MethodType.Delete, "/groups/:id/badges/:badge_id", "https://docs.gitlab.com/ee/api/group_badges.html#remove-a-badge-from-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("badge_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupClustersClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add existing cluster to group", MethodType.Post, "/groups/:id/clusters/user", "https://docs.gitlab.com/ee/api/group_clusters.html#add-existing-cluster-to-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("domain", Models.)
                .AddOptionalParameter("management_project_id", Models.)
                .AddOptionalParameter("enabled", Models.)
                .AddOptionalParameter("managed", Models.)
                .AddRequiredParameter("platform_kubernetes_attributes[api_url]", Models.)
                .AddRequiredParameter("platform_kubernetes_attributes[token]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[ca_cert]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[authorization_type]", Models.)
                .AddOptionalParameter("environment_scope", Models.)
            ;

            methodGroup.AddMethod("Delete group cluster", MethodType.Delete, "/groups/:id/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/group_clusters.html#delete-group-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("cluster_id", Models.)
            ;

            methodGroup.AddMethod("Edit group cluster", MethodType.Put, "/groups/:id/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/group_clusters.html#edit-group-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("cluster_id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("domain", Models.)
                .AddOptionalParameter("management_project_id", Models.)
                .AddOptionalParameter("enabled", Models.)
                .AddOptionalParameter("managed", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[api_url]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[token]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[ca_cert]", Models.)
                .AddOptionalParameter("environment_scope", Models.)
            ;

            methodGroup.AddMethod("Get a single group cluster", MethodType.Get, "/groups/:id/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/group_clusters.html#get-a-single-group-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("cluster_id", Models.)
            ;

            methodGroup.AddMethod("List group clusters", MethodType.Get, "/groups/:id/clusters", "https://docs.gitlab.com/ee/api/group_clusters.html#list-group-clusters")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupIssueBoardsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a group issue board", MethodType.Post, "/groups/:id/boards", "https://docs.gitlab.com/ee/api/group_boards.html#create-a-group-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("Delete a group issue board", MethodType.Delete, "/groups/:id/boards/:board_id", "https://docs.gitlab.com/ee/api/group_boards.html#delete-a-group-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
            ;

            methodGroup.AddMethod("Delete a group issue board list", MethodType.Delete, "/groups/:id/boards/:board_id/lists/:list_id", "https://docs.gitlab.com/ee/api/group_boards.html#delete-a-group-issue-board-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddRequiredParameter("list_id", Models.)
            ;

            methodGroup.AddMethod("Edit group issue board list", MethodType.Put, "/groups/:id/boards/:board_id/lists/:list_id", "https://docs.gitlab.com/ee/api/group_boards.html#edit-group-issue-board-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddRequiredParameter("list_id", Models.)
                .AddRequiredParameter("position", Models.)
            ;

            methodGroup.AddMethod("List all group issue boards in a group", MethodType.Get, "/groups/:id/boards", "https://docs.gitlab.com/ee/api/group_boards.html#list-all-group-issue-boards-in-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List group issue board lists", MethodType.Get, "/groups/:id/boards/:board_id/lists", "https://docs.gitlab.com/ee/api/group_boards.html#list-group-issue-board-lists")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
            ;

            methodGroup.AddMethod("New group issue board list", MethodType.Post, "/groups/:id/boards/:board_id/lists", "https://docs.gitlab.com/ee/api/group_boards.html#new-group-issue-board-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddRequiredParameter("label_id", Models.)
            ;

            methodGroup.AddMethod("Single group issue board", MethodType.Get, "/groups/:id/boards/:board_id", "https://docs.gitlab.com/ee/api/group_boards.html#single-group-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
            ;

            methodGroup.AddMethod("Single group issue board list", MethodType.Get, "/groups/:id/boards/:board_id/lists/:list_id", "https://docs.gitlab.com/ee/api/group_boards.html#single-group-issue-board-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddRequiredParameter("list_id", Models.)
            ;

            methodGroup.AddMethod("Update a group issue board", MethodType.Put, "/groups/:id/boards/:board_id", "https://docs.gitlab.com/ee/api/group_boards.html#update-a-group-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("milestone_id", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("weight", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupIterationsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("List group iterations", MethodType.Get, "/groups/:id/iterations", "https://docs.gitlab.com/ee/api/group_iterations.html#list-group-iterations")
                .WithReturnType(Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("include_ancestors", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupLabelsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a new group label", MethodType.Post, "/groups/:id/labels", "https://docs.gitlab.com/ee/api/group_labels.html#create-a-new-group-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("color", Models.)
                .AddOptionalParameter("description", Models.)
            ;

            methodGroup.AddMethod("Delete a group label", MethodType.Delete, "/groups/:id/labels/:label_id", "https://docs.gitlab.com/ee/api/group_labels.html#delete-a-group-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
            ;

            methodGroup.AddMethod("Get a single group label", MethodType.Get, "/groups/:id/labels/:label_id", "https://docs.gitlab.com/ee/api/group_labels.html#get-a-single-group-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
                .AddOptionalParameter("include_ancestor_groups", Models.)
                .AddOptionalParameter("include_descendant_groups", Models.)
                .AddOptionalParameter("only_group_labels", Models.)
            ;

            methodGroup.AddMethod("List group labels", MethodType.Get, "/groups/:id/labels", "https://docs.gitlab.com/ee/api/group_labels.html#list-group-labels")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("with_counts", Models.)
                .AddOptionalParameter("include_ancestor_groups", Models.)
                .AddOptionalParameter("include_descendant_groups", Models.)
                .AddOptionalParameter("only_group_labels", Models.)
                .AddOptionalParameter("search", Models.)
            ;

            methodGroup.AddMethod("Subscribe to a group label", MethodType.Post, "/groups/:id/labels/:label_id/subscribe", "https://docs.gitlab.com/ee/api/group_labels.html#subscribe-to-a-group-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
            ;

            methodGroup.AddMethod("Unsubscribe from a group label", MethodType.Post, "/groups/:id/labels/:label_id/unsubscribe", "https://docs.gitlab.com/ee/api/group_labels.html#unsubscribe-from-a-group-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
            ;

            methodGroup.AddMethod("Update a group label", MethodType.Put, "/groups/:id/labels/:label_id", "https://docs.gitlab.com/ee/api/group_labels.html#update-a-group-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
                .AddOptionalParameter("new_name", Models.)
                .AddOptionalParameter("color", Models.)
                .AddOptionalParameter("description", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupLevelVariablesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create variable", MethodType.Post, "/groups/:id/variables", "https://docs.gitlab.com/ee/api/group_level_variables.html#create-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
                .AddOptionalParameter("variable_type", Models.)
                .AddOptionalParameter("protected", Models.)
                .AddOptionalParameter("masked", Models.)
            ;

            methodGroup.AddMethod("List group variables", MethodType.Get, "/groups/:id/variables", "https://docs.gitlab.com/ee/api/group_level_variables.html#list-group-variables")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Remove variable", MethodType.Delete, "/groups/:id/variables/:key", "https://docs.gitlab.com/ee/api/group_level_variables.html#remove-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("Show variable details", MethodType.Get, "/groups/:id/variables/:key", "https://docs.gitlab.com/ee/api/group_level_variables.html#show-variable-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("Update variable", MethodType.Put, "/groups/:id/variables/:key", "https://docs.gitlab.com/ee/api/group_level_variables.html#update-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
                .AddOptionalParameter("variable_type", Models.)
                .AddOptionalParameter("protected", Models.)
                .AddOptionalParameter("masked", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupMilestonesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create new milestone", MethodType.Post, "/groups/:id/milestones", "https://docs.gitlab.com/ee/api/group_milestones.html#create-new-milestone")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("title", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("due_date", Models.)
                .AddOptionalParameter("start_date", Models.)
            ;

            methodGroup.AddMethod("Delete group milestone", MethodType.Delete, "/groups/:id/milestones/:milestone_id", "https://docs.gitlab.com/ee/api/group_milestones.html#delete-group-milestone")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("milestone_id", Models.)
            ;

            methodGroup.AddMethod("Edit milestone", MethodType.Put, "/groups/:id/milestones/:milestone_id", "https://docs.gitlab.com/ee/api/group_milestones.html#edit-milestone")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("milestone_id", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("due_date", Models.)
                .AddOptionalParameter("start_date", Models.)
                .AddOptionalParameter("state_event", Models.)
            ;

            methodGroup.AddMethod("Get all burndown chart events for a single milestone", MethodType.Get, "/groups/:id/milestones/:milestone_id/burndown_events", "https://docs.gitlab.com/ee/api/group_milestones.html#get-all-burndown-chart-events-for-a-single-milestone")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("milestone_id", Models.)
            ;

            methodGroup.AddMethod("Get all issues assigned to a single milestone", MethodType.Get, "/groups/:id/milestones/:milestone_id/issues", "https://docs.gitlab.com/ee/api/group_milestones.html#get-all-issues-assigned-to-a-single-milestone")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("milestone_id", Models.)
            ;

            methodGroup.AddMethod("Get all merge requests assigned to a single milestone", MethodType.Get, "/groups/:id/milestones/:milestone_id/merge_requests", "https://docs.gitlab.com/ee/api/group_milestones.html#get-all-merge-requests-assigned-to-a-single-milestone")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("milestone_id", Models.)
            ;

            methodGroup.AddMethod("Get single milestone", MethodType.Get, "/groups/:id/milestones/:milestone_id", "https://docs.gitlab.com/ee/api/group_milestones.html#get-single-milestone")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("milestone_id", Models.)
            ;

            methodGroup.AddMethod("List group milestones", MethodType.Get, "/groups/:id/milestones", "https://docs.gitlab.com/ee/api/group_milestones.html#list-group-milestones")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("iids", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("include_parent_milestones", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class GroupsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add group hook", MethodType.Post, "/groups/:id/hooks", "https://docs.gitlab.com/ee/api/groups.html#add-group-hook")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("url", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("job_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("wiki_page_events", Models.)
                .AddOptionalParameter("deployment_events", Models.)
                .AddOptionalParameter("releases_events", Models.)
                .AddOptionalParameter("enable_ssl_verification", Models.)
                .AddOptionalParameter("token", Models.)
            ;

            methodGroup.AddMethod("Add group push rule", MethodType.Post, "/groups/:id/push_rule", "https://docs.gitlab.com/ee/api/groups.html#add-group-push-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("deny_delete_tag", Models.)
                .AddOptionalParameter("member_check", Models.)
                .AddOptionalParameter("prevent_secrets", Models.)
                .AddOptionalParameter("commit_message_regex", Models.)
                .AddOptionalParameter("commit_message_negative_regex", Models.)
                .AddOptionalParameter("branch_name_regex", Models.)
                .AddOptionalParameter("author_email_regex", Models.)
                .AddOptionalParameter("file_name_regex", Models.)
                .AddOptionalParameter("max_file_size", Models.)
                .AddOptionalParameter("commit_committer_check", Models.)
                .AddOptionalParameter("reject_unsigned_commits", Models.)
            ;

            methodGroup.AddMethod("Add LDAP group link with CN or filter", MethodType.Post, "/groups/:id/ldap_group_links", "https://docs.gitlab.com/ee/api/groups.html#add-ldap-group-link-with-cn-or-filter")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("cn", Models.)
                .AddOptionalParameter("filter", Models.)
                .AddRequiredParameter("group_access", Models.)
                .AddRequiredParameter("provider", Models.)
            ;

            methodGroup.AddMethod("Create a link to share a group with another group", MethodType.Post, "/groups/:id/share", "https://docs.gitlab.com/ee/api/groups.html#create-a-link-to-share-a-group-with-another-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("group_id", Models.)
                .AddRequiredParameter("group_access", Models.)
                .AddOptionalParameter("expires_at", Models.)
            ;

            methodGroup.AddMethod("Delete group hook", MethodType.Delete, "/groups/:id/hooks/:hook_id", "https://docs.gitlab.com/ee/api/groups.html#delete-group-hook")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("hook_id", Models.)
            ;

            methodGroup.AddMethod("Delete group push rule", MethodType.Delete, "/groups/:id/push_rule", "https://docs.gitlab.com/ee/api/groups.html#delete-group-push-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Delete LDAP group link", MethodType.Delete, "/groups/:id/ldap_group_links/:cn", "https://docs.gitlab.com/ee/api/groups.html#delete-ldap-group-link")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("cn", Models.)
            ;

            methodGroup.AddMethod("Delete LDAP group link with CN or filter", MethodType.Delete, "/groups/:id/ldap_group_links", "https://docs.gitlab.com/ee/api/groups.html#delete-ldap-group-link-with-cn-or-filter")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("cn", Models.)
                .AddOptionalParameter("filter", Models.)
                .AddRequiredParameter("provider", Models.)
            ;

            methodGroup.AddMethod("Delete link sharing group with another group", MethodType.Delete, "/groups/:id/share/:group_id", "https://docs.gitlab.com/ee/api/groups.html#delete-link-sharing-group-with-another-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("group_id", Models.)
            ;

            methodGroup.AddMethod("Details of a group", MethodType.Get, "/groups/:id", "https://docs.gitlab.com/ee/api/groups.html#details-of-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("with_custom_attributes", Models.)
                .AddOptionalParameter("with_projects", Models.)
            ;

            methodGroup.AddMethod("Edit group hook", MethodType.Put, "/groups/:id/hooks/:hook_id", "https://docs.gitlab.com/ee/api/groups.html#edit-group-hook")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("hook_id", Models.)
                .AddRequiredParameter("url", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("job_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("wiki_events", Models.)
                .AddOptionalParameter("deployment_events", Models.)
                .AddOptionalParameter("releases_events", Models.)
                .AddOptionalParameter("enable_ssl_verification", Models.)
                .AddOptionalParameter("token", Models.)
            ;

            methodGroup.AddMethod("Edit group push rule", MethodType.Put, "/groups/:id/push_rule", "https://docs.gitlab.com/ee/api/groups.html#edit-group-push-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("deny_delete_tag", Models.)
                .AddOptionalParameter("member_check", Models.)
                .AddOptionalParameter("prevent_secrets", Models.)
                .AddOptionalParameter("commit_message_regex", Models.)
                .AddOptionalParameter("commit_message_negative_regex", Models.)
                .AddOptionalParameter("branch_name_regex", Models.)
                .AddOptionalParameter("author_email_regex", Models.)
                .AddOptionalParameter("file_name_regex", Models.)
                .AddOptionalParameter("max_file_size", Models.)
                .AddOptionalParameter("commit_committer_check", Models.)
                .AddOptionalParameter("reject_unsigned_commits", Models.)
            ;

            methodGroup.AddMethod("Get group hook", MethodType.Get, "/groups/:id/hooks/:hook_id", "https://docs.gitlab.com/ee/api/groups.html#get-group-hook")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get group push rules", MethodType.Get, "/groups/:id/push_rule", "https://docs.gitlab.com/ee/api/groups.html#get-group-push-rules")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List a group’s descendant groups", MethodType.Get, "/groups/:id/descendant_groups", "https://docs.gitlab.com/ee/api/groups.html#list-a-groups-descendant-groups")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List a group’s projects", MethodType.Get, "/groups/:id/projects", "https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("archived", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("simple", Models.)
                .AddOptionalParameter("owned", Models.)
                .AddOptionalParameter("starred", Models.)
                .AddOptionalParameter("with_issues_enabled", Models.)
                .AddOptionalParameter("with_merge_requests_enabled", Models.)
                .AddOptionalParameter("with_shared", Models.)
                .AddOptionalParameter("include_subgroups", Models.)
                .AddOptionalParameter("min_access_level", Models.)
                .AddOptionalParameter("with_custom_attributes", Models.)
                .AddOptionalParameter("with_security_reports", Models.)
            ;

            methodGroup.AddMethod("List a group’s shared projects", MethodType.Get, "/groups/:id/projects/shared", "https://docs.gitlab.com/ee/api/groups.html#list-a-groups-shared-projects")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("archived", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("simple", Models.)
                .AddOptionalParameter("starred", Models.)
                .AddOptionalParameter("with_issues_enabled", Models.)
                .AddOptionalParameter("with_merge_requests_enabled", Models.)
                .AddOptionalParameter("min_access_level", Models.)
                .AddOptionalParameter("with_custom_attributes", Models.)
            ;

            methodGroup.AddMethod("List a group’s subgroups", MethodType.Get, "/groups/:id/subgroups", "https://docs.gitlab.com/ee/api/groups.html#list-a-groups-subgroups")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List group hooks", MethodType.Get, "/groups/:id/hooks", "https://docs.gitlab.com/ee/api/groups.html#list-group-hooks")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List groups", MethodType.Get, "/groups", "https://docs.gitlab.com/ee/api/groups.html#list-groups")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List LDAP group links", MethodType.Get, "/groups/:id/ldap_group_links", "https://docs.gitlab.com/ee/api/groups.html#list-ldap-group-links")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("New group", MethodType.Post, "/groups", "https://docs.gitlab.com/ee/api/groups.html#new-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("path", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("membership_lock", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("share_with_group_lock", Models.)
                .AddOptionalParameter("require_two_factor_authentication", Models.)
                .AddOptionalParameter("two_factor_grace_period", Models.)
                .AddOptionalParameter("project_creation_level", Models.)
                .AddOptionalParameter("auto_devops_enabled", Models.)
                .AddOptionalParameter("subgroup_creation_level", Models.)
                .AddOptionalParameter("emails_disabled", Models.)
                .AddOptionalParameter("avatar", Models.)
                .AddOptionalParameter("mentions_disabled", Models.)
                .AddOptionalParameter("lfs_enabled", Models.)
                .AddOptionalParameter("request_access_enabled", Models.)
                .AddOptionalParameter("parent_id", Models.)
                .AddOptionalParameter("default_branch_protection", Models.)
                .AddOptionalParameter("shared_runners_minutes_limit", Models.)
                .AddOptionalParameter("extra_shared_runners_minutes_limit", Models.)
                .AddOptionalParameter("shared_runners_setting", Models.)
            ;

            methodGroup.AddMethod("Remove group", MethodType.Delete, "/groups/:id", "https://docs.gitlab.com/ee/api/groups.html#remove-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Restore group marked for deletion", MethodType.Post, "/groups/:id/restore", "https://docs.gitlab.com/ee/api/groups.html#restore-group-marked-for-deletion")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Sync group with LDAP", MethodType.Post, "/groups/:id/ldap_sync", "https://docs.gitlab.com/ee/api/groups.html#sync-group-with-ldap")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Transfer project to group", MethodType.Post, "/groups/:id/projects/:project_id", "https://docs.gitlab.com/ee/api/groups.html#transfer-project-to-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("project_id", Models.)
            ;

            methodGroup.AddMethod("Update group", MethodType.Put, "/groups/:id", "https://docs.gitlab.com/ee/api/groups.html#update-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("path", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("membership_lock", Models.)
                .AddOptionalParameter("share_with_group_lock", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("require_two_factor_authentication", Models.)
                .AddOptionalParameter("two_factor_grace_period", Models.)
                .AddOptionalParameter("project_creation_level", Models.)
                .AddOptionalParameter("auto_devops_enabled", Models.)
                .AddOptionalParameter("subgroup_creation_level", Models.)
                .AddOptionalParameter("emails_disabled", Models.)
                .AddOptionalParameter("avatar", Models.)
                .AddOptionalParameter("mentions_disabled", Models.)
                .AddOptionalParameter("lfs_enabled (optional)", Models.)
                .AddOptionalParameter("request_access_enabled", Models.)
                .AddOptionalParameter("default_branch_protection", Models.)
                .AddOptionalParameter("file_template_project_id", Models.)
                .AddOptionalParameter("shared_runners_minutes_limit", Models.)
                .AddOptionalParameter("extra_shared_runners_minutes_limit", Models.)
                .AddOptionalParameter("prevent_forking_outside_group", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ImportClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Import repository from Bitbucket Server", MethodType.Post, "/import/bitbucket_server", "https://docs.gitlab.com/ee/api/import.html#import-repository-from-bitbucket-server")
                .WithReturnType(Models.)
                .AddRequiredParameter("bitbucket_server_url", Models.)
                .AddRequiredParameter("bitbucket_server_username", Models.)
                .AddRequiredParameter("personal_access_token", Models.)
                .AddRequiredParameter("bitbucket_server_project", Models.)
                .AddRequiredParameter("bitbucket_server_repo", Models.)
                .AddOptionalParameter("new_name", Models.)
                .AddOptionalParameter("target_namespace", Models.)
            ;

            methodGroup.AddMethod("Import repository from GitHub", MethodType.Post, "/import/github", "https://docs.gitlab.com/ee/api/import.html#import-repository-from-github")
                .WithReturnType(Models.)
                .AddRequiredParameter("personal_access_token", Models.)
                .AddRequiredParameter("repo_id", Models.)
                .AddOptionalParameter("new_name", Models.)
                .AddRequiredParameter("target_namespace", Models.)
                .AddOptionalParameter("github_hostname", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class InstanceClustersClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add existing instance cluster", MethodType.Post, "/admin/clusters/add", "https://docs.gitlab.com/ee/api/instance_clusters.html#add-existing-instance-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("domain", Models.)
                .AddOptionalParameter("environment_scope", Models.)
                .AddOptionalParameter("management_project_id", Models.)
                .AddOptionalParameter("enabled", Models.)
                .AddOptionalParameter("managed", Models.)
                .AddRequiredParameter("platform_kubernetes_attributes[api_url]", Models.)
                .AddRequiredParameter("platform_kubernetes_attributes[token]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[ca_cert]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[namespace]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[authorization_type]", Models.)
            ;

            methodGroup.AddMethod("Delete instance cluster", MethodType.Delete, "/admin/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/instance_clusters.html#delete-instance-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("cluster_id", Models.)
            ;

            methodGroup.AddMethod("Edit instance cluster", MethodType.Put, "/admin/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/instance_clusters.html#edit-instance-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("cluster_id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("domain", Models.)
                .AddOptionalParameter("environment_scope", Models.)
                .AddOptionalParameter("management_project_id", Models.)
                .AddOptionalParameter("enabled", Models.)
                .AddOptionalParameter("managed", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[api_url]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[token]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[ca_cert]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[namespace]", Models.)
            ;

            methodGroup.AddMethod("Get a single instance cluster", MethodType.Get, "/admin/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/instance_clusters.html#get-a-single-instance-cluster")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List instance clusters", MethodType.Get, "/admin/clusters", "https://docs.gitlab.com/ee/api/instance_clusters.html#list-instance-clusters")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class IssueLinksClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create an issue link", MethodType.Post, "/projects/:id/issues/:issue_iid/links", "https://docs.gitlab.com/ee/api/issue_links.html#create-an-issue-link")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("target_project_id", Models.)
                .AddRequiredParameter("target_issue_iid", Models.)
                .AddOptionalParameter("link_type", Models.)
            ;

            methodGroup.AddMethod("Delete an issue link", MethodType.Delete, "/projects/:id/issues/:issue_iid/links/:issue_link_id", "https://docs.gitlab.com/ee/api/issue_links.html#delete-an-issue-link")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("issue_link_id", Models.)
                .AddOptionalParameter("link_type", Models.)
            ;

            methodGroup.AddMethod("List issue relations", MethodType.Get, "/projects/:id/issues/:issue_iid/links", "https://docs.gitlab.com/ee/api/issue_links.html#list-issue-relations")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class IssuesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add spent time for an issue", MethodType.Post, "/projects/:id/issues/:issue_iid/add_spent_time", "https://docs.gitlab.com/ee/api/issues.html#add-spent-time-for-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("duration", Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Create a to-do item", MethodType.Post, "/projects/:id/issues/:issue_iid/todo", "https://docs.gitlab.com/ee/api/issues.html#create-a-to-do-item")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Delete an issue", MethodType.Delete, "/projects/:id/issues/:issue_iid", "https://docs.gitlab.com/ee/api/issues.html#delete-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Edit issue", MethodType.Put, "/projects/:id/issues/:issue_iid", "https://docs.gitlab.com/ee/api/issues.html#edit-issue")
                .WithReturnType(Models.)
                .AddOptionalParameter("add_labels", Models.)
                .AddOptionalParameter("assignee_ids", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("discussion_locked", Models.)
                .AddOptionalParameter("due_date", Models.)
                .AddOptionalParameter("epic_id", Models.)
                .AddOptionalParameter("epic_iid", Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("milestone_id", Models.)
                .AddOptionalParameter("remove_labels", Models.)
                .AddOptionalParameter("state_event", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("updated_at", Models.)
                .AddOptionalParameter("weight", Models.)
            ;

            methodGroup.AddMethod("Get time tracking stats", MethodType.Get, "/projects/:id/issues/:issue_iid/time_stats", "https://docs.gitlab.com/ee/api/issues.html#get-time-tracking-stats")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Get user agent details", MethodType.Get, "/projects/:id/issues/:issue_iid/user_agent_detail", "https://docs.gitlab.com/ee/api/issues.html#get-user-agent-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("List group issues", MethodType.Get, "/groups/:id/issues", "https://docs.gitlab.com/ee/api/issues.html#list-group-issues")
                .WithReturnType(Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("assignee_username", Models.)
                .AddOptionalParameter("author_id", Models.)
                .AddOptionalParameter("author_username", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
                .AddOptionalParameter("due_date", Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("iids", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("milestone", Models.)
                .AddOptionalParameter("my_reaction_emoji", Models.)
                .AddOptionalParameter("non_archived", Models.)
                .AddOptionalParameter("not", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("weight", Models.)
                .AddOptionalParameter("with_labels_details", Models.)
            ;

            methodGroup.AddMethod("List issues", MethodType.Get, "/issues", "https://docs.gitlab.com/ee/api/issues.html#list-issues")
                .WithReturnType(Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("assignee_username", Models.)
                .AddOptionalParameter("author_id", Models.)
                .AddOptionalParameter("author_username", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
                .AddOptionalParameter("due_date", Models.)
                .AddOptionalParameter("iids", Models.)
                .AddOptionalParameter("in", Models.)
                .AddOptionalParameter("iteration_id", Models.)
                .AddOptionalParameter("iteration_title", Models.)
                .AddOptionalParameter("milestone", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("milestone", Models.)
                .AddOptionalParameter("my_reaction_emoji", Models.)
                .AddOptionalParameter("non_archived", Models.)
                .AddOptionalParameter("not", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("weight", Models.)
                .AddOptionalParameter("with_labels_details", Models.)
            ;

            methodGroup.AddMethod("List merge requests related to issue", MethodType.Get, "/projects/:id/issues/:issue_id/related_merge_requests", "https://docs.gitlab.com/ee/api/issues.html#list-merge-requests-related-to-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("List merge requests that close a particular issue on merge", MethodType.Get, "/projects/:id/issues/:issue_iid/closed_by", "https://docs.gitlab.com/ee/api/issues.html#list-merge-requests-that-close-a-particular-issue-on-merge")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("List metric images", MethodType.Get, "/projects/:id/issues/:issue_iid/metric_images", "https://docs.gitlab.com/ee/api/issues.html#list-metric-images")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("List project issues", MethodType.Get, "/projects/:id/issues", "https://docs.gitlab.com/ee/api/issues.html#list-project-issues")
                .WithReturnType(Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("assignee_username", Models.)
                .AddOptionalParameter("author_id", Models.)
                .AddOptionalParameter("author_username", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
                .AddOptionalParameter("due_date", Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("iids", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("milestone", Models.)
                .AddOptionalParameter("my_reaction_emoji", Models.)
                .AddOptionalParameter("not", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("weight", Models.)
                .AddOptionalParameter("with_labels_details", Models.)
            ;

            methodGroup.AddMethod("Move an issue", MethodType.Post, "/projects/:id/issues/:issue_iid/move", "https://docs.gitlab.com/ee/api/issues.html#move-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("to_project_id", Models.)
            ;

            methodGroup.AddMethod("Participants on issues", MethodType.Get, "/projects/:id/issues/:issue_iid/participants", "https://docs.gitlab.com/ee/api/issues.html#participants-on-issues")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Promote an issue to an epic", MethodType.Post, "/projects/:id/issues/:issue_iid/notes", "https://docs.gitlab.com/ee/api/issues.html#promote-an-issue-to-an-epic")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("body", Models.)
            ;

            methodGroup.AddMethod("Reorder an issue", MethodType.Put, "/projects/:id/issues/:issue_iid/reorder", "https://docs.gitlab.com/ee/api/issues.html#reorder-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddOptionalParameter("move_after_id", Models.)
                .AddOptionalParameter("move_before_id", Models.)
            ;

            methodGroup.AddMethod("Reset spent time for an issue", MethodType.Post, "/projects/:id/issues/:issue_iid/reset_spent_time", "https://docs.gitlab.com/ee/api/issues.html#reset-spent-time-for-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Reset the time estimate for an issue", MethodType.Post, "/projects/:id/issues/:issue_iid/reset_time_estimate", "https://docs.gitlab.com/ee/api/issues.html#reset-the-time-estimate-for-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Set a time estimate for an issue", MethodType.Post, "/projects/:id/issues/:issue_iid/time_estimate", "https://docs.gitlab.com/ee/api/issues.html#set-a-time-estimate-for-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("duration", Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Single issue", MethodType.Get, "/issues/:id", "https://docs.gitlab.com/ee/api/issues.html#single-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Single project issue", MethodType.Get, "/projects/:id/issues/:issue_iid", "https://docs.gitlab.com/ee/api/issues.html#single-project-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Subscribe to an issue", MethodType.Post, "/projects/:id/issues/:issue_iid/subscribe", "https://docs.gitlab.com/ee/api/issues.html#subscribe-to-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Unsubscribe from an issue", MethodType.Post, "/projects/:id/issues/:issue_iid/unsubscribe", "https://docs.gitlab.com/ee/api/issues.html#unsubscribe-from-an-issue")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("Upload metric image", MethodType.Post, "/projects/:id/issues/:issue_iid/metric_images", "https://docs.gitlab.com/ee/api/issues.html#upload-metric-image")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("file", Models.)
                .AddOptionalParameter("url", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class IssuesStatisticsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get group issues statistics", MethodType.Get, "/groups/:id/issues_statistics", "https://docs.gitlab.com/ee/api/issues_statistics.html#get-group-issues-statistics")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("iids", Models.)
                .AddOptionalParameter("milestone", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("author_id", Models.)
                .AddOptionalParameter("author_username", Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("assignee_username", Models.)
                .AddOptionalParameter("my_reaction_emoji", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("confidential", Models.)
            ;

            methodGroup.AddMethod("Get issues statistics", MethodType.Get, "/issues_statistics", "https://docs.gitlab.com/ee/api/issues_statistics.html#get-issues-statistics")
                .WithReturnType(Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("milestone", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("author_id", Models.)
                .AddOptionalParameter("author_username", Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("assignee_username", Models.)
                .AddOptionalParameter("my_reaction_emoji", Models.)
                .AddOptionalParameter("iids", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("in", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("confidential", Models.)
            ;

            methodGroup.AddMethod("Get project issues statistics", MethodType.Get, "/projects/:id/issues_statistics", "https://docs.gitlab.com/ee/api/issues_statistics.html#get-project-issues-statistics")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("iids", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("milestone", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("author_id", Models.)
                .AddOptionalParameter("author_username", Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("assignee_username", Models.)
                .AddOptionalParameter("my_reaction_emoji", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("created_after", Models.)
                .AddOptionalParameter("created_before", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("confidential", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class JobArtifactsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Delete artifacts", MethodType.Delete, "/projects/:id/jobs/:job_id/artifacts", "https://docs.gitlab.com/ee/api/job_artifacts.html#delete-artifacts")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("job_id", Models.)
            ;

            methodGroup.AddMethod("Keep artifacts", MethodType.Post, "/projects/:id/jobs/:job_id/artifacts/keep", "https://docs.gitlab.com/ee/api/job_artifacts.html#keep-artifacts")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("job_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class JobsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Cancel a job", MethodType.Post, "/projects/:id/jobs/:job_id/cancel", "https://docs.gitlab.com/ee/api/jobs.html#cancel-a-job")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("job_id", Models.)
            ;

            methodGroup.AddMethod("Erase a job", MethodType.Post, "/projects/:id/jobs/:job_id/erase", "https://docs.gitlab.com/ee/api/jobs.html#erase-a-job")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("job_id", Models.)
            ;

            methodGroup.AddMethod("Get a log file", MethodType.Get, "/projects/:id/jobs/:job_id/trace", "https://docs.gitlab.com/ee/api/jobs.html#get-a-log-file")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("job_id", Models.)
            ;

            methodGroup.AddMethod("List pipeline bridges", MethodType.Get, "/projects/:id/pipelines/:pipeline_id/bridges", "https://docs.gitlab.com/ee/api/jobs.html#list-pipeline-bridges")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_id", Models.)
                .AddOptionalParameter("scope", Models.)
            ;

            methodGroup.AddMethod("List pipeline jobs", MethodType.Get, "/projects/:id/pipelines/:pipeline_id/jobs", "https://docs.gitlab.com/ee/api/jobs.html#list-pipeline-jobs")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_id", Models.)
                .AddOptionalParameter("scope", Models.)
            ;

            methodGroup.AddMethod("Play a job", MethodType.Post, "/projects/:id/jobs/:job_id/play", "https://docs.gitlab.com/ee/api/jobs.html#play-a-job")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("job_id", Models.)
            ;

            methodGroup.AddMethod("Retry a job", MethodType.Post, "/projects/:id/jobs/:job_id/retry", "https://docs.gitlab.com/ee/api/jobs.html#retry-a-job")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("job_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class KeysClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get SSH key with user by ID of an SSH key", MethodType.Get, "/keys/:id", "https://docs.gitlab.com/ee/api/keys.html#get-ssh-key-with-user-by-id-of-an-ssh-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get user by fingerprint of SSH key", MethodType.Get, "/keys", "https://docs.gitlab.com/ee/api/keys.html#get-user-by-fingerprint-of-ssh-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("fingerprint", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class LabelsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a new label", MethodType.Post, "/projects/:id/labels", "https://docs.gitlab.com/ee/api/labels.html#create-a-new-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("color", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("priority", Models.)
            ;

            methodGroup.AddMethod("Delete a label", MethodType.Delete, "/projects/:id/labels/:label_id", "https://docs.gitlab.com/ee/api/labels.html#delete-a-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
            ;

            methodGroup.AddMethod("Edit an existing label", MethodType.Put, "/projects/:id/labels/:label_id", "https://docs.gitlab.com/ee/api/labels.html#edit-an-existing-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
                .AddOptionalParameter("new_name", Models.)
                .AddOptionalParameter("color", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("priority", Models.)
            ;

            methodGroup.AddMethod("Get a single project label", MethodType.Get, "/projects/:id/labels/:label_id", "https://docs.gitlab.com/ee/api/labels.html#get-a-single-project-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
                .AddOptionalParameter("include_ancestor_groups", Models.)
            ;

            methodGroup.AddMethod("List labels", MethodType.Get, "/projects/:id/labels", "https://docs.gitlab.com/ee/api/labels.html#list-labels")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("with_counts", Models.)
                .AddOptionalParameter("include_ancestor_groups", Models.)
                .AddOptionalParameter("search", Models.)
            ;

            methodGroup.AddMethod("Promote a project label to a group label", MethodType.Put, "/projects/:id/labels/:label_id/promote", "https://docs.gitlab.com/ee/api/labels.html#promote-a-project-label-to-a-group-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
            ;

            methodGroup.AddMethod("Subscribe to a label", MethodType.Post, "/projects/:id/labels/:label_id/subscribe", "https://docs.gitlab.com/ee/api/labels.html#subscribe-to-a-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
            ;

            methodGroup.AddMethod("Unsubscribe from a label", MethodType.Post, "/projects/:id/labels/:label_id/unsubscribe", "https://docs.gitlab.com/ee/api/labels.html#unsubscribe-from-a-label")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("label_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ManagedLicensesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a new managed license", MethodType.Post, "/projects/:id/managed_licenses", "https://docs.gitlab.com/ee/api/managed_licenses.html#create-a-new-managed-license")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("approval_status", Models.)
            ;

            methodGroup.AddMethod("Delete a managed license", MethodType.Delete, "/projects/:id/managed_licenses/:managed_license_id", "https://docs.gitlab.com/ee/api/managed_licenses.html#delete-a-managed-license")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("managed_license_id", Models.)
            ;

            methodGroup.AddMethod("Edit an existing managed license", MethodType.Patch, "/projects/:id/managed_licenses/:managed_license_id", "https://docs.gitlab.com/ee/api/managed_licenses.html#edit-an-existing-managed-license")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("managed_license_id", Models.)
                .AddRequiredParameter("approval_status", Models.)
            ;

            methodGroup.AddMethod("List managed licenses", MethodType.Get, "/projects/:id/managed_licenses", "https://docs.gitlab.com/ee/api/managed_licenses.html#list-managed-licenses")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Show an existing managed license", MethodType.Get, "/projects/:id/managed_licenses/:managed_license_id", "https://docs.gitlab.com/ee/api/managed_licenses.html#show-an-existing-managed-license")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("managed_license_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class MembersClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add a member to a group or project", MethodType.Post, "/groups/:id/members", "https://docs.gitlab.com/ee/api/members.html#add-a-member-to-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddRequiredParameter("access_level", Models.)
                .AddOptionalParameter("expires_at", Models.)
            ;

            methodGroup.AddMethod("Edit a member of a group or project", MethodType.Put, "/groups/:id/members/:user_id", "https://docs.gitlab.com/ee/api/members.html#edit-a-member-of-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddRequiredParameter("access_level", Models.)
                .AddOptionalParameter("expires_at", Models.)
            ;

            methodGroup.AddMethod("Edit a member of a group or project", MethodType.Put, "/projects/:id/members/:user_id", "https://docs.gitlab.com/ee/api/members.html#edit-a-member-of-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddRequiredParameter("access_level", Models.)
                .AddOptionalParameter("expires_at", Models.)
            ;

            methodGroup.AddMethod("Get a member of a group or project", MethodType.Get, "/groups/:id/members/:user_id", "https://docs.gitlab.com/ee/api/members.html#get-a-member-of-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
            ;

            methodGroup.AddMethod("Get a member of a group or project", MethodType.Get, "/projects/:id/members/:user_id", "https://docs.gitlab.com/ee/api/members.html#get-a-member-of-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
            ;

            methodGroup.AddMethod("Get a member of a group or project, including inherited members", MethodType.Get, "/groups/:id/members/all/:user_id", "https://docs.gitlab.com/ee/api/members.html#get-a-member-of-a-group-or-project-including-inherited-members")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
            ;

            methodGroup.AddMethod("Get a member of a group or project, including inherited members", MethodType.Get, "/projects/:id/members/all/:user_id", "https://docs.gitlab.com/ee/api/members.html#get-a-member-of-a-group-or-project-including-inherited-members")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
            ;

            methodGroup.AddMethod("List all billable members of a group", MethodType.Get, "/groups/:id/billable_members", "https://docs.gitlab.com/ee/api/members.html#list-all-billable-members-of-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("List all members of a group or project", MethodType.Get, "/groups/:id/members", "https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("query", Models.)
                .AddOptionalParameter("user_ids", Models.)
            ;

            methodGroup.AddMethod("List all members of a group or project", MethodType.Get, "/projects/:id/members", "https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("query", Models.)
                .AddOptionalParameter("user_ids", Models.)
            ;

            methodGroup.AddMethod("List all members of a group or project including inherited members", MethodType.Get, "/groups/:id/members/all", "https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project-including-inherited-members")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("query", Models.)
                .AddOptionalParameter("user_ids", Models.)
            ;

            methodGroup.AddMethod("List all members of a group or project including inherited members", MethodType.Get, "/projects/:id/members/all", "https://docs.gitlab.com/ee/api/members.html#list-all-members-of-a-group-or-project-including-inherited-members")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("query", Models.)
                .AddOptionalParameter("user_ids", Models.)
            ;

            methodGroup.AddMethod("Remove a member from a group or project", MethodType.Delete, "/groups/:id/members/:user_id", "https://docs.gitlab.com/ee/api/members.html#remove-a-member-from-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddOptionalParameter("unassign_issuables", Models.)
            ;

            methodGroup.AddMethod("Remove a member from a group or project", MethodType.Delete, "/projects/:id/members/:user_id", "https://docs.gitlab.com/ee/api/members.html#remove-a-member-from-a-group-or-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddOptionalParameter("unassign_issuables", Models.)
            ;

            methodGroup.AddMethod("Remove override for a member of a group", MethodType.Delete, "/groups/:id/members/:user_id/override", "https://docs.gitlab.com/ee/api/members.html#remove-override-for-a-member-of-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
            ;

            methodGroup.AddMethod("Set override flag for a member of a group", MethodType.Post, "/groups/:id/members/:user_id/override", "https://docs.gitlab.com/ee/api/members.html#set-override-flag-for-a-member-of-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("user_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class MergeRequestApprovalsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Approve Merge Request", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/approve", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#approve-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddOptionalParameter("sha", Models.)
                .AddOptionalParameter("approval_password", Models.)
            ;

            methodGroup.AddMethod("Change allowed approvers", MethodType.Put, "/projects/:id/approvers", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#change-allowed-approvers")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("approver_ids", Models.)
                .AddRequiredParameter("approver_group_ids", Models.)
            ;

            methodGroup.AddMethod("Change allowed approvers for Merge Request", MethodType.Put, "/projects/:id/merge_requests/:merge_request_iid/approvers", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#change-allowed-approvers-for-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("approver_ids", Models.)
                .AddRequiredParameter("approver_group_ids", Models.)
            ;

            methodGroup.AddMethod("Change approval configuration", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/approvals", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#change-approval-configuration")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("approvals_required", Models.)
            ;

            methodGroup.AddMethod("Change configuration", MethodType.Post, "/projects/:id/approvals", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#change-configuration")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("approvals_before_merge", Models.)
                .AddOptionalParameter("reset_approvals_on_push", Models.)
                .AddOptionalParameter("disable_overriding_approvers_per_merge_request", Models.)
                .AddOptionalParameter("merge_requests_author_approval", Models.)
                .AddOptionalParameter("merge_requests_disable_committers_approval", Models.)
                .AddOptionalParameter("require_password_to_approve", Models.)
            ;

            methodGroup.AddMethod("Create merge request level rule", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/approval_rules", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#create-merge-request-level-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("approvals_required", Models.)
                .AddOptionalParameter("approval_project_rule_id", Models.)
                .AddOptionalParameter("user_ids", Models.)
                .AddOptionalParameter("group_ids", Models.)
            ;

            methodGroup.AddMethod("Create project-level rule", MethodType.Post, "/projects/:id/approval_rules", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#create-project-level-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("approvals_required", Models.)
                .AddOptionalParameter("user_ids", Models.)
                .AddOptionalParameter("group_ids", Models.)
                .AddOptionalParameter("protected_branch_ids", Models.)
            ;

            methodGroup.AddMethod("Delete merge request level rule", MethodType.Delete, "/projects/:id/merge_requests/:merge_request_iid/approval_rules/:approval_rule_id", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#delete-merge-request-level-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("approval_rule_id", Models.)
            ;

            methodGroup.AddMethod("Delete project-level rule", MethodType.Delete, "/projects/:id/approval_rules/:approval_rule_id", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#delete-project-level-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("approval_rule_id", Models.)
            ;

            methodGroup.AddMethod("Get a single project-level rule", MethodType.Get, "/projects/:id/approval_rules/:approval_rule_id", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-a-single-project-level-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("approval_rule_id", Models.)
            ;

            methodGroup.AddMethod("Get Configuration", MethodType.Get, "/projects/:id/approvals", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-configuration")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get Configuration", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/approvals", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-configuration-1")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Get merge request level rules", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/approval_rules", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-merge-request-level-rules")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Get project-level rules", MethodType.Get, "/projects/:id/approval_rules", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-project-level-rules")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get the approval state of merge requests", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/approval_state", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#get-the-approval-state-of-merge-requests")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Unapprove Merge Request", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/unapprove", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#unapprove-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Update merge request level rule", MethodType.Put, "/projects/:id/merge_requests/:merge_request_iid/approval_rules/:approval_rule_id", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#update-merge-request-level-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("approval_rule_id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("approvals_required", Models.)
                .AddOptionalParameter("user_ids", Models.)
                .AddOptionalParameter("group_ids", Models.)
            ;

            methodGroup.AddMethod("Update project-level rule", MethodType.Put, "/projects/:id/approval_rules/:approval_rule_id", "https://docs.gitlab.com/ee/api/merge_request_approvals.html#update-project-level-rule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("approval_rule_id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("approvals_required", Models.)
                .AddOptionalParameter("user_ids", Models.)
                .AddOptionalParameter("group_ids", Models.)
                .AddOptionalParameter("protected_branch_ids", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class MergeRequestsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Accept MR", MethodType.Put, "/projects/:id/merge_requests/:merge_request_iid/merge", "https://docs.gitlab.com/ee/api/merge_requests.html#accept-mr")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Add spent time for a merge request", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/add_spent_time", "https://docs.gitlab.com/ee/api/merge_requests.html#add-spent-time-for-a-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("duration", Models.)
            ;

            methodGroup.AddMethod("Cancel Merge When Pipeline Succeeds", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/cancel_merge_when_pipeline_succeeds", "https://docs.gitlab.com/ee/api/merge_requests.html#cancel-merge-when-pipeline-succeeds")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Create a to-do item", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/todo", "https://docs.gitlab.com/ee/api/merge_requests.html#create-a-to-do-item")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Create MR Pipeline", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/pipelines", "https://docs.gitlab.com/ee/api/merge_requests.html#create-mr-pipeline")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete a merge request", MethodType.Delete, "/projects/:id/merge_requests/:merge_request_iid", "https://docs.gitlab.com/ee/api/merge_requests.html#delete-a-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Get a single MR diff version", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/versions/:version_id", "https://docs.gitlab.com/ee/api/merge_requests.html#get-a-single-mr-diff-version")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("version_id", Models.)
            ;

            methodGroup.AddMethod("Get MR diff versions", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/versions", "https://docs.gitlab.com/ee/api/merge_requests.html#get-mr-diff-versions")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Get single MR changes", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/changes", "https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr-changes")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get single MR commits", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/commits", "https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr-commits")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get single MR participants", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/participants", "https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr-participants")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get time tracking stats", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/time_stats", "https://docs.gitlab.com/ee/api/merge_requests.html#get-time-tracking-stats")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("List issues that close on merge", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/closes_issues", "https://docs.gitlab.com/ee/api/merge_requests.html#list-issues-that-close-on-merge")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("List MR pipelines", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/pipelines", "https://docs.gitlab.com/ee/api/merge_requests.html#list-mr-pipelines")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Merge to default merge ref path", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/merge_ref", "https://docs.gitlab.com/ee/api/merge_requests.html#merge-to-default-merge-ref-path")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Rebase a merge request", MethodType.Put, "/projects/:id/merge_requests/:merge_request_iid/rebase", "https://docs.gitlab.com/ee/api/merge_requests.html#rebase-a-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddOptionalParameter("skip_ci", Models.)
            ;

            methodGroup.AddMethod("Reset spent time for a merge request", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/reset_spent_time", "https://docs.gitlab.com/ee/api/merge_requests.html#reset-spent-time-for-a-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Reset the time estimate for a merge request", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/reset_time_estimate", "https://docs.gitlab.com/ee/api/merge_requests.html#reset-the-time-estimate-for-a-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Set a time estimate for a merge request", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/time_estimate", "https://docs.gitlab.com/ee/api/merge_requests.html#set-a-time-estimate-for-a-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("duration", Models.)
            ;

            methodGroup.AddMethod("Subscribe to a merge request", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/subscribe", "https://docs.gitlab.com/ee/api/merge_requests.html#subscribe-to-a-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Unsubscribe from a merge request", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/unsubscribe", "https://docs.gitlab.com/ee/api/merge_requests.html#unsubscribe-from-a-merge-request")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

            methodGroup.AddMethod("Update MR", MethodType.Put, "/projects/:id/merge_requests/:merge_request_iid", "https://docs.gitlab.com/ee/api/merge_requests.html#update-mr")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddOptionalParameter("target_branch", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("assignee_ids", Models.)
                .AddOptionalParameter("milestone_id", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("add_labels", Models.)
                .AddOptionalParameter("remove_labels", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("state_event", Models.)
                .AddOptionalParameter("remove_source_branch", Models.)
                .AddOptionalParameter("squash", Models.)
                .AddOptionalParameter("discussion_locked", Models.)
                .AddOptionalParameter("allow_collaboration", Models.)
                .AddOptionalParameter("allow_maintainer_to_push", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class MergeTrainsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("List Merge Trains for a project", MethodType.Get, "/projects/1/merge_trains", "https://docs.gitlab.com/ee/api/merge_trains.html#list-merge-trains-for-a-project")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class NamespacesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get namespace by ID", MethodType.Get, "/namespaces/:id", "https://docs.gitlab.com/ee/api/namespaces.html#get-namespace-by-id")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List namespaces", MethodType.Get, "/namespaces", "https://docs.gitlab.com/ee/api/namespaces.html#list-namespaces")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class NotesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create new epic note", MethodType.Post, "/groups/:id/epics/:epic_id/notes", "https://docs.gitlab.com/ee/api/notes.html#create-new-epic-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("body", Models.)
            ;

            methodGroup.AddMethod("Create new issue note", MethodType.Post, "/projects/:id/issues/:issue_iid/notes", "https://docs.gitlab.com/ee/api/notes.html#create-new-issue-note")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Create new merge request note", MethodType.Post, "/projects/:id/merge_requests/:merge_request_iid/notes", "https://docs.gitlab.com/ee/api/notes.html#create-new-merge-request-note")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Create new snippet note", MethodType.Post, "/projects/:id/snippets/:snippet_id/notes", "https://docs.gitlab.com/ee/api/notes.html#create-new-snippet-note")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete a merge request note", MethodType.Delete, "/projects/:id/merge_requests/:merge_request_iid/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#delete-a-merge-request-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Delete a snippet note", MethodType.Delete, "/projects/:id/snippets/:snippet_id/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#delete-a-snippet-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Delete an epic note", MethodType.Delete, "/groups/:id/epics/:epic_id/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#delete-an-epic-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Delete an issue note", MethodType.Delete, "/projects/:id/issues/:issue_iid/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#delete-an-issue-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Get single epic note", MethodType.Get, "/groups/:id/epics/:epic_id/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#get-single-epic-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("note_id", Models.)
            ;

            methodGroup.AddMethod("Get single issue note", MethodType.Get, "/projects/:id/issues/:issue_iid/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#get-single-issue-note")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get single merge request note", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#get-single-merge-request-note")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get single snippet note", MethodType.Get, "/projects/:id/snippets/:snippet_id/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#get-single-snippet-note")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List all epic notes", MethodType.Get, "/groups/:id/epics/:epic_id/notes", "https://docs.gitlab.com/ee/api/notes.html#list-all-epic-notes")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("order_by", Models.)
            ;

            methodGroup.AddMethod("List all merge request notes", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/notes", "https://docs.gitlab.com/ee/api/notes.html#list-all-merge-request-notes")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("order_by", Models.)
            ;

            methodGroup.AddMethod("List all snippet notes", MethodType.Get, "/projects/:id/snippets/:snippet_id/notes", "https://docs.gitlab.com/ee/api/notes.html#list-all-snippet-notes")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("order_by", Models.)
            ;

            methodGroup.AddMethod("List project issue notes", MethodType.Get, "/projects/:id/issues/:issue_iid/notes", "https://docs.gitlab.com/ee/api/notes.html#list-project-issue-notes")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("order_by", Models.)
            ;

            methodGroup.AddMethod("Modify existing epic note", MethodType.Put, "/groups/:id/epics/:epic_id/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#modify-existing-epic-note")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("note_id", Models.)
                .AddRequiredParameter("body", Models.)
            ;

            methodGroup.AddMethod("Modify existing issue note", MethodType.Put, "/projects/:id/issues/:issue_iid/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#modify-existing-issue-note")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Modify existing merge request note", MethodType.Put, "/projects/:id/merge_requests/:merge_request_iid/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#modify-existing-merge-request-note")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Modify existing snippet note", MethodType.Put, "/projects/:id/snippets/:snippet_id/notes/:note_id", "https://docs.gitlab.com/ee/api/notes.html#modify-existing-snippet-note")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class NotificationSettingsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Global notification settings", MethodType.Get, "/notification_settings", "https://docs.gitlab.com/ee/api/notification_settings.html#global-notification-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Group / project level notification settings", MethodType.Get, "/groups/:id/notification_settings", "https://docs.gitlab.com/ee/api/notification_settings.html#group--project-level-notification-settings")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Group / project level notification settings", MethodType.Get, "/projects/:id/notification_settings", "https://docs.gitlab.com/ee/api/notification_settings.html#group--project-level-notification-settings")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Update global notification settings", MethodType.Put, "/notification_settings", "https://docs.gitlab.com/ee/api/notification_settings.html#update-global-notification-settings")
                .WithReturnType(Models.)
                .AddOptionalParameter("level", Models.)
                .AddOptionalParameter("notification_email", Models.)
                .AddOptionalParameter("new_note", Models.)
                .AddOptionalParameter("new_issue", Models.)
                .AddOptionalParameter("reopen_issue", Models.)
                .AddOptionalParameter("close_issue", Models.)
                .AddOptionalParameter("reassign_issue", Models.)
                .AddOptionalParameter("issue_due", Models.)
                .AddOptionalParameter("new_merge_request", Models.)
                .AddOptionalParameter("push_to_merge_request", Models.)
                .AddOptionalParameter("reopen_merge_request", Models.)
                .AddOptionalParameter("close_merge_request", Models.)
                .AddOptionalParameter("reassign_merge_request", Models.)
                .AddOptionalParameter("merge_merge_request", Models.)
                .AddOptionalParameter("failed_pipeline", Models.)
                .AddOptionalParameter("fixed_pipeline", Models.)
                .AddOptionalParameter("success_pipeline", Models.)
                .AddOptionalParameter("moved_project", Models.)
                .AddOptionalParameter("new_epic", Models.)
            ;

            methodGroup.AddMethod("Update group/project level notification settings", MethodType.Put, "/groups/:id/notification_settings", "https://docs.gitlab.com/ee/api/notification_settings.html#update-groupproject-level-notification-settings")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("level", Models.)
                .AddOptionalParameter("new_note", Models.)
                .AddOptionalParameter("new_issue", Models.)
                .AddOptionalParameter("reopen_issue", Models.)
                .AddOptionalParameter("close_issue", Models.)
                .AddOptionalParameter("reassign_issue", Models.)
                .AddOptionalParameter("issue_due", Models.)
                .AddOptionalParameter("new_merge_request", Models.)
                .AddOptionalParameter("push_to_merge_request", Models.)
                .AddOptionalParameter("reopen_merge_request", Models.)
                .AddOptionalParameter("close_merge_request", Models.)
                .AddOptionalParameter("reassign_merge_request", Models.)
                .AddOptionalParameter("merge_merge_request", Models.)
                .AddOptionalParameter("failed_pipeline", Models.)
                .AddOptionalParameter("fixed_pipeline", Models.)
                .AddOptionalParameter("success_pipeline", Models.)
                .AddOptionalParameter("moved_project", Models.)
                .AddOptionalParameter("new_epic", Models.)
            ;

            methodGroup.AddMethod("Update group/project level notification settings", MethodType.Put, "/projects/:id/notification_settings", "https://docs.gitlab.com/ee/api/notification_settings.html#update-groupproject-level-notification-settings")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("level", Models.)
                .AddOptionalParameter("new_note", Models.)
                .AddOptionalParameter("new_issue", Models.)
                .AddOptionalParameter("reopen_issue", Models.)
                .AddOptionalParameter("close_issue", Models.)
                .AddOptionalParameter("reassign_issue", Models.)
                .AddOptionalParameter("issue_due", Models.)
                .AddOptionalParameter("new_merge_request", Models.)
                .AddOptionalParameter("push_to_merge_request", Models.)
                .AddOptionalParameter("reopen_merge_request", Models.)
                .AddOptionalParameter("close_merge_request", Models.)
                .AddOptionalParameter("reassign_merge_request", Models.)
                .AddOptionalParameter("merge_merge_request", Models.)
                .AddOptionalParameter("failed_pipeline", Models.)
                .AddOptionalParameter("fixed_pipeline", Models.)
                .AddOptionalParameter("success_pipeline", Models.)
                .AddOptionalParameter("moved_project", Models.)
                .AddOptionalParameter("new_epic", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class PackagesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Delete a project package", MethodType.Delete, "/projects/:id/packages/:package_id", "https://docs.gitlab.com/ee/api/packages.html#delete-a-project-package")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("package_id", Models.)
            ;

            methodGroup.AddMethod("Get a project package", MethodType.Get, "/projects/:id/packages/:package_id", "https://docs.gitlab.com/ee/api/packages.html#get-a-project-package")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("package_id", Models.)
            ;

            methodGroup.AddMethod("List package files", MethodType.Get, "/projects/:id/packages/:package_id/package_files", "https://docs.gitlab.com/ee/api/packages.html#list-package-files")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("package_id", Models.)
            ;

            methodGroup.AddMethod("Within a group", MethodType.Get, "/groups/:id/packages", "https://docs.gitlab.com/ee/api/packages.html#within-a-group")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("exclude_subgroups", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("package_type", Models.)
                .AddOptionalParameter("package_name", Models.)
            ;

            methodGroup.AddMethod("Within a project", MethodType.Get, "/projects/:id/packages", "https://docs.gitlab.com/ee/api/packages.html#within-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("package_type", Models.)
                .AddOptionalParameter("package_name", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class PagesDomainsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create new Pages domain", MethodType.Post, "/projects/:id/pages/domains", "https://docs.gitlab.com/ee/api/pages_domains.html#create-new-pages-domain")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("domain", Models.)
                .AddOptionalParameter("auto_ssl_enabled", Models.)
                .AddOptionalParameter("certificate", Models.)
                .AddOptionalParameter("key", Models.)
            ;

            methodGroup.AddMethod("Delete Pages domain", MethodType.Delete, "/projects/:id/pages/domains/:domain", "https://docs.gitlab.com/ee/api/pages_domains.html#delete-pages-domain")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("domain", Models.)
            ;

            methodGroup.AddMethod("List all Pages domains", MethodType.Get, "/pages/domains", "https://docs.gitlab.com/ee/api/pages_domains.html#list-all-pages-domains")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List Pages domains", MethodType.Get, "/projects/:id/pages/domains", "https://docs.gitlab.com/ee/api/pages_domains.html#list-pages-domains")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Single Pages domain", MethodType.Get, "/projects/:id/pages/domains/:domain", "https://docs.gitlab.com/ee/api/pages_domains.html#single-pages-domain")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("domain", Models.)
            ;

            methodGroup.AddMethod("Update Pages domain", MethodType.Put, "/projects/:id/pages/domains/:domain", "https://docs.gitlab.com/ee/api/pages_domains.html#update-pages-domain")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("domain", Models.)
                .AddOptionalParameter("auto_ssl_enabled", Models.)
                .AddOptionalParameter("certificate", Models.)
                .AddOptionalParameter("key", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class PersonalAccessTokensClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("List personal access tokens", MethodType.Get, "/personal_access_tokens", "https://docs.gitlab.com/ee/api/personal_access_tokens.html#list-personal-access-tokens")
                .WithReturnType(Models.)
                .AddOptionalParameter("user_id", Models.)
            ;

            methodGroup.AddMethod("Revoke a personal access token", MethodType.Delete, "/personal_access_tokens/:id", "https://docs.gitlab.com/ee/api/personal_access_tokens.html#revoke-a-personal-access-token")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class PipelinesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Cancel a pipeline’s jobs", MethodType.Post, "/projects/:id/pipelines/:pipeline_id/cancel", "https://docs.gitlab.com/ee/api/pipelines.html#cancel-a-pipelines-jobs")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_id", Models.)
            ;

            methodGroup.AddMethod("Create a new pipeline", MethodType.Post, "/projects/:id/pipeline", "https://docs.gitlab.com/ee/api/pipelines.html#create-a-new-pipeline")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("ref", Models.)
                .AddOptionalParameter("variables", Models.)
            ;

            methodGroup.AddMethod("Delete a pipeline", MethodType.Delete, "/projects/:id/pipelines/:pipeline_id", "https://docs.gitlab.com/ee/api/pipelines.html#delete-a-pipeline")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_id", Models.)
            ;

            methodGroup.AddMethod("Get a pipeline’s test report", MethodType.Get, "/projects/:id/pipelines/:pipeline_id/test_report", "https://docs.gitlab.com/ee/api/pipelines.html#get-a-pipelines-test-report")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_id", Models.)
            ;

            methodGroup.AddMethod("Get a single pipeline", MethodType.Get, "/projects/:id/pipelines/:pipeline_id", "https://docs.gitlab.com/ee/api/pipelines.html#get-a-single-pipeline")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_id", Models.)
            ;

            methodGroup.AddMethod("Get variables of a pipeline", MethodType.Get, "/projects/:id/pipelines/:pipeline_id/variables", "https://docs.gitlab.com/ee/api/pipelines.html#get-variables-of-a-pipeline")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_id", Models.)
            ;

            methodGroup.AddMethod("List project pipelines", MethodType.Get, "/projects/:id/pipelines", "https://docs.gitlab.com/ee/api/pipelines.html#list-project-pipelines")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("status", Models.)
                .AddOptionalParameter("ref", Models.)
                .AddOptionalParameter("sha", Models.)
                .AddOptionalParameter("yaml_errors", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("username", Models.)
                .AddOptionalParameter("updated_after", Models.)
                .AddOptionalParameter("updated_before", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("Retry jobs in a pipeline", MethodType.Post, "/projects/:id/pipelines/:pipeline_id/retry", "https://docs.gitlab.com/ee/api/pipelines.html#retry-jobs-in-a-pipeline")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class PipelineSchedulesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a new pipeline schedule", MethodType.Post, "/projects/:id/pipeline_schedules", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#create-a-new-pipeline-schedule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("description", Models.)
                .AddRequiredParameter("ref", Models.)
                .AddRequiredParameter("cron", Models.)
                .AddOptionalParameter("cron_timezone", Models.)
                .AddOptionalParameter("active", Models.)
            ;

            methodGroup.AddMethod("Create a new pipeline schedule variable", MethodType.Post, "/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#create-a-new-pipeline-schedule-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_schedule_id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
                .AddOptionalParameter("variable_type", Models.)
            ;

            methodGroup.AddMethod("Delete a pipeline schedule", MethodType.Delete, "/projects/:id/pipeline_schedules/:pipeline_schedule_id", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#delete-a-pipeline-schedule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_schedule_id", Models.)
            ;

            methodGroup.AddMethod("Delete a pipeline schedule variable", MethodType.Delete, "/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#delete-a-pipeline-schedule-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_schedule_id", Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("Edit a pipeline schedule", MethodType.Put, "/projects/:id/pipeline_schedules/:pipeline_schedule_id", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#edit-a-pipeline-schedule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_schedule_id", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("ref", Models.)
                .AddOptionalParameter("cron", Models.)
                .AddOptionalParameter("cron_timezone", Models.)
                .AddOptionalParameter("active", Models.)
            ;

            methodGroup.AddMethod("Edit a pipeline schedule variable", MethodType.Put, "/projects/:id/pipeline_schedules/:pipeline_schedule_id/variables/:key", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#edit-a-pipeline-schedule-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_schedule_id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
                .AddOptionalParameter("variable_type", Models.)
            ;

            methodGroup.AddMethod("Get a single pipeline schedule", MethodType.Get, "/projects/:id/pipeline_schedules/:pipeline_schedule_id", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#get-a-single-pipeline-schedule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_schedule_id", Models.)
            ;

            methodGroup.AddMethod("Get all pipeline schedules", MethodType.Get, "/projects/:id/pipeline_schedules", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#get-all-pipeline-schedules")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("scope", Models.)
            ;

            methodGroup.AddMethod("Run a scheduled pipeline immediately", MethodType.Post, "/projects/:id/pipeline_schedules/:pipeline_schedule_id/play", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#run-a-scheduled-pipeline-immediately")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_schedule_id", Models.)
            ;

            methodGroup.AddMethod("Take ownership of a pipeline schedule", MethodType.Post, "/projects/:id/pipeline_schedules/:pipeline_schedule_id/take_ownership", "https://docs.gitlab.com/ee/api/pipeline_schedules.html#take-ownership-of-a-pipeline-schedule")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("pipeline_schedule_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class PipelineTriggersClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a project trigger", MethodType.Post, "/projects/:id/triggers", "https://docs.gitlab.com/ee/api/pipeline_triggers.html#create-a-project-trigger")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("description", Models.)
            ;

            methodGroup.AddMethod("Get trigger details", MethodType.Get, "/projects/:id/triggers/:trigger_id", "https://docs.gitlab.com/ee/api/pipeline_triggers.html#get-trigger-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("trigger_id", Models.)
            ;

            methodGroup.AddMethod("List project triggers", MethodType.Get, "/projects/:id/triggers", "https://docs.gitlab.com/ee/api/pipeline_triggers.html#list-project-triggers")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Remove a project trigger", MethodType.Delete, "/projects/:id/triggers/:trigger_id", "https://docs.gitlab.com/ee/api/pipeline_triggers.html#remove-a-project-trigger")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("trigger_id", Models.)
            ;

            methodGroup.AddMethod("Update a project trigger", MethodType.Put, "/projects/:id/triggers/:trigger_id", "https://docs.gitlab.com/ee/api/pipeline_triggers.html#update-a-project-trigger")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("trigger_id", Models.)
                .AddOptionalParameter("description", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectAliasesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a project alias", MethodType.Post, "/project_aliases", "https://docs.gitlab.com/ee/api/project_aliases.html#create-a-project-alias")
                .WithReturnType(Models.)
                .AddRequiredParameter("project_id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("Delete a project alias", MethodType.Delete, "/project_aliases/:name", "https://docs.gitlab.com/ee/api/project_aliases.html#delete-a-project-alias")
                .WithReturnType(Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("Get project alias’ details", MethodType.Get, "/project_aliases/:name", "https://docs.gitlab.com/ee/api/project_aliases.html#get-project-alias-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("List all project aliases", MethodType.Get, "/project_aliases", "https://docs.gitlab.com/ee/api/project_aliases.html#list-all-project-aliases")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectAnalyticsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("List project deployment frequencies", MethodType.Get, "/projects/:id/analytics/deployment_frequency", "https://docs.gitlab.com/ee/api/project_analytics.html#list-project-deployment-frequencies")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectBadgesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add a badge to a project", MethodType.Post, "/projects/:id/badges", "https://docs.gitlab.com/ee/api/project_badges.html#add-a-badge-to-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("link_url", Models.)
                .AddRequiredParameter("image_url", Models.)
            ;

            methodGroup.AddMethod("Edit a badge of a project", MethodType.Put, "/projects/:id/badges/:badge_id", "https://docs.gitlab.com/ee/api/project_badges.html#edit-a-badge-of-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("badge_id", Models.)
                .AddOptionalParameter("link_url", Models.)
                .AddOptionalParameter("image_url", Models.)
            ;

            methodGroup.AddMethod("Get a badge of a project", MethodType.Get, "/projects/:id/badges/:badge_id", "https://docs.gitlab.com/ee/api/project_badges.html#get-a-badge-of-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("badge_id", Models.)
            ;

            methodGroup.AddMethod("List all badges of a project", MethodType.Get, "/projects/:id/badges", "https://docs.gitlab.com/ee/api/project_badges.html#list-all-badges-of-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("name", Models.)
            ;

            methodGroup.AddMethod("Preview a badge from a project", MethodType.Get, "/projects/:id/badges/render", "https://docs.gitlab.com/ee/api/project_badges.html#preview-a-badge-from-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("link_url", Models.)
                .AddRequiredParameter("image_url", Models.)
            ;

            methodGroup.AddMethod("Remove a badge from a project", MethodType.Delete, "/projects/:id/badges/:badge_id", "https://docs.gitlab.com/ee/api/project_badges.html#remove-a-badge-from-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("badge_id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectClustersClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add existing cluster to project", MethodType.Post, "/projects/:id/clusters/user", "https://docs.gitlab.com/ee/api/project_clusters.html#add-existing-cluster-to-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("domain", Models.)
                .AddOptionalParameter("management_project_id", Models.)
                .AddOptionalParameter("enabled", Models.)
                .AddOptionalParameter("managed", Models.)
                .AddRequiredParameter("platform_kubernetes_attributes[api_url]", Models.)
                .AddRequiredParameter("platform_kubernetes_attributes[token]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[ca_cert]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[namespace]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[authorization_type]", Models.)
                .AddOptionalParameter("environment_scope", Models.)
            ;

            methodGroup.AddMethod("Delete project cluster", MethodType.Delete, "/projects/:id/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/project_clusters.html#delete-project-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("cluster_id", Models.)
            ;

            methodGroup.AddMethod("Edit project cluster", MethodType.Put, "/projects/:id/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/project_clusters.html#edit-project-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("cluster_id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("domain", Models.)
                .AddOptionalParameter("management_project_id", Models.)
                .AddOptionalParameter("enabled", Models.)
                .AddOptionalParameter("managed", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[api_url]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[token]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[ca_cert]", Models.)
                .AddOptionalParameter("platform_kubernetes_attributes[namespace]", Models.)
                .AddOptionalParameter("environment_scope", Models.)
            ;

            methodGroup.AddMethod("Get a single project cluster", MethodType.Get, "/projects/:id/clusters/:cluster_id", "https://docs.gitlab.com/ee/api/project_clusters.html#get-a-single-project-cluster")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("cluster_id", Models.)
            ;

            methodGroup.AddMethod("List project clusters", MethodType.Get, "/projects/:id/clusters", "https://docs.gitlab.com/ee/api/project_clusters.html#list-project-clusters")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectImportExportClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Export download", MethodType.Get, "/projects/:id/export/download", "https://docs.gitlab.com/ee/api/project_import_export.html#export-download")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Export status", MethodType.Get, "/projects/:id/export", "https://docs.gitlab.com/ee/api/project_import_export.html#export-status")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Import a file", MethodType.Post, "/projects/import", "https://docs.gitlab.com/ee/api/project_import_export.html#import-a-file")
                .WithReturnType(Models.)
                .AddOptionalParameter("namespace", Models.)
                .AddOptionalParameter("name", Models.)
                .AddRequiredParameter("file", Models.)
                .AddRequiredParameter("path", Models.)
                .AddOptionalParameter("overwrite", Models.)
                .AddOptionalParameter("override_params", Models.)
            ;

            methodGroup.AddMethod("Import status", MethodType.Get, "/projects/:id/import", "https://docs.gitlab.com/ee/api/project_import_export.html#import-status")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Schedule an export", MethodType.Post, "/projects/:id/export", "https://docs.gitlab.com/ee/api/project_import_export.html#schedule-an-export")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("upload", Models.)
                .AddRequiredParameter("upload[url]", Models.)
                .AddOptionalParameter("upload[http_method]", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectIssueBoardsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a board list", MethodType.Post, "/projects/:id/boards/:board_id/lists", "https://docs.gitlab.com/ee/api/boards.html#create-a-board-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddOptionalParameter("label_id", Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("milestone_id", Models.)
            ;

            methodGroup.AddMethod("Create an issue board", MethodType.Post, "/projects/:id/boards", "https://docs.gitlab.com/ee/api/boards.html#create-an-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("Delete a board list from a board", MethodType.Delete, "/projects/:id/boards/:board_id/lists/:list_id", "https://docs.gitlab.com/ee/api/boards.html#delete-a-board-list-from-a-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddRequiredParameter("list_id", Models.)
            ;

            methodGroup.AddMethod("Delete an issue board", MethodType.Delete, "/projects/:id/boards/:board_id", "https://docs.gitlab.com/ee/api/boards.html#delete-an-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
            ;

            methodGroup.AddMethod("List board lists in a project issue board", MethodType.Get, "/projects/:id/boards/:board_id/lists", "https://docs.gitlab.com/ee/api/boards.html#list-board-lists-in-a-project-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
            ;

            methodGroup.AddMethod("List project issue boards", MethodType.Get, "/projects/:id/boards", "https://docs.gitlab.com/ee/api/boards.html#list-project-issue-boards")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Reorder a list in a board", MethodType.Put, "/projects/:id/boards/:board_id/lists/:list_id", "https://docs.gitlab.com/ee/api/boards.html#reorder-a-list-in-a-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddRequiredParameter("list_id", Models.)
                .AddRequiredParameter("position", Models.)
            ;

            methodGroup.AddMethod("Show a single board list", MethodType.Get, "/projects/:id/boards/:board_id/lists/:list_id", "https://docs.gitlab.com/ee/api/boards.html#show-a-single-board-list")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddRequiredParameter("list_id", Models.)
            ;

            methodGroup.AddMethod("Show a single issue board", MethodType.Get, "/projects/:id/boards/:board_id", "https://docs.gitlab.com/ee/api/boards.html#show-a-single-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
            ;

            methodGroup.AddMethod("Update an issue board", MethodType.Put, "/projects/:id/boards/:board_id", "https://docs.gitlab.com/ee/api/boards.html#update-an-issue-board")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("board_id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("assignee_id", Models.)
                .AddOptionalParameter("milestone_id", Models.)
                .AddOptionalParameter("labels", Models.)
                .AddOptionalParameter("weight", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectIterationsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("List project iterations", MethodType.Get, "/projects/:id/iterations", "https://docs.gitlab.com/ee/api/iterations.html#list-project-iterations")
                .WithReturnType(Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("include_ancestors", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectLevelVariablesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create variable", MethodType.Post, "/projects/:id/variables", "https://docs.gitlab.com/ee/api/project_level_variables.html#create-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
                .AddOptionalParameter("variable_type", Models.)
                .AddOptionalParameter("protected", Models.)
                .AddOptionalParameter("masked", Models.)
                .AddOptionalParameter("environment_scope", Models.)
            ;

            methodGroup.AddMethod("List project variables", MethodType.Get, "/projects/:id/variables", "https://docs.gitlab.com/ee/api/project_level_variables.html#list-project-variables")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Remove variable", MethodType.Delete, "/projects/:id/variables/:key", "https://docs.gitlab.com/ee/api/project_level_variables.html#remove-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddOptionalParameter("filter", Models.)
            ;

            methodGroup.AddMethod("Show variable details", MethodType.Get, "/projects/:id/variables/:key", "https://docs.gitlab.com/ee/api/project_level_variables.html#show-variable-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddOptionalParameter("filter", Models.)
            ;

            methodGroup.AddMethod("Update variable", MethodType.Put, "/projects/:id/variables/:key", "https://docs.gitlab.com/ee/api/project_level_variables.html#update-variable")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key", Models.)
                .AddRequiredParameter("value", Models.)
                .AddOptionalParameter("variable_type", Models.)
                .AddOptionalParameter("protected", Models.)
                .AddOptionalParameter("masked", Models.)
                .AddOptionalParameter("environment_scope", Models.)
                .AddOptionalParameter("filter", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectMilestonesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create new milestone", MethodType.Post, "/projects/:id/milestones", "https://docs.gitlab.com/ee/api/milestones.html#create-new-milestone")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete project milestone", MethodType.Delete, "/projects/:id/milestones/:milestone_id", "https://docs.gitlab.com/ee/api/milestones.html#delete-project-milestone")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Edit milestone", MethodType.Put, "/projects/:id/milestones/:milestone_id", "https://docs.gitlab.com/ee/api/milestones.html#edit-milestone")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get all burndown chart events for a single milestone", MethodType.Get, "/projects/:id/milestones/:milestone_id/burndown_events", "https://docs.gitlab.com/ee/api/milestones.html#get-all-burndown-chart-events-for-a-single-milestone")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get all issues assigned to a single milestone", MethodType.Get, "/projects/:id/milestones/:milestone_id/issues", "https://docs.gitlab.com/ee/api/milestones.html#get-all-issues-assigned-to-a-single-milestone")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get all merge requests assigned to a single milestone", MethodType.Get, "/projects/:id/milestones/:milestone_id/merge_requests", "https://docs.gitlab.com/ee/api/milestones.html#get-all-merge-requests-assigned-to-a-single-milestone")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get single milestone", MethodType.Get, "/projects/:id/milestones/:milestone_id", "https://docs.gitlab.com/ee/api/milestones.html#get-single-milestone")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List project milestones", MethodType.Get, "/projects/:id/milestones", "https://docs.gitlab.com/ee/api/milestones.html#list-project-milestones")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("iids", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("include_parent_milestones", Models.)
            ;

            methodGroup.AddMethod("Promote project milestone to a group milestone", MethodType.Post, "/projects/:id/milestones/:milestone_id/promote", "https://docs.gitlab.com/ee/api/milestones.html#promote-project-milestone-to-a-group-milestone")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectRepositoryStorageMovesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get a single project repository storage move", MethodType.Get, "/project_repository_storage_moves/:repository_storage_id", "https://docs.gitlab.com/ee/api/project_repository_storage_moves.html#get-a-single-project-repository-storage-move")
                .WithReturnType(Models.)
                .AddRequiredParameter("repository_storage_id", Models.)
            ;

            methodGroup.AddMethod("Get a single repository storage move for a project", MethodType.Get, "/projects/:project_id/repository_storage_moves/:repository_storage_id", "https://docs.gitlab.com/ee/api/project_repository_storage_moves.html#get-a-single-repository-storage-move-for-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("project_id", Models.)
                .AddRequiredParameter("repository_storage_id", Models.)
            ;

            methodGroup.AddMethod("Retrieve all project repository storage moves", MethodType.Get, "/project_repository_storage_moves", "https://docs.gitlab.com/ee/api/project_repository_storage_moves.html#retrieve-all-project-repository-storage-moves")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Retrieve all repository storage moves for a project", MethodType.Get, "/projects/:project_id/repository_storage_moves", "https://docs.gitlab.com/ee/api/project_repository_storage_moves.html#retrieve-all-repository-storage-moves-for-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("project_id", Models.)
            ;

            methodGroup.AddMethod("Schedule a repository storage move for a project", MethodType.Post, "/projects/:project_id/repository_storage_moves", "https://docs.gitlab.com/ee/api/project_repository_storage_moves.html#schedule-a-repository-storage-move-for-a-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("project_id", Models.)
                .AddOptionalParameter("destination_storage_name", Models.)
            ;

            methodGroup.AddMethod("Schedule repository storage moves for all projects on a storage shard", MethodType.Post, "/project_repository_storage_moves", "https://docs.gitlab.com/ee/api/project_repository_storage_moves.html#schedule-repository-storage-moves-for-all-projects-on-a-storage-shard")
                .WithReturnType(Models.)
                .AddRequiredParameter("source_storage_name", Models.)
                .AddOptionalParameter("destination_storage_name", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add project hook", MethodType.Post, "/projects/:id/hooks", "https://docs.gitlab.com/ee/api/projects.html#add-project-hook")
                .WithReturnType(Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("deployment_events", Models.)
                .AddOptionalParameter("enable_ssl_verification", Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("job_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("push_events_branch_filter", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("url", Models.)
                .AddOptionalParameter("wiki_page_events", Models.)
            ;

            methodGroup.AddMethod("Add project push rule", MethodType.Post, "/projects/:id/push_rule", "https://docs.gitlab.com/ee/api/projects.html#add-project-push-rule")
                .WithReturnType(Models.)
                .AddOptionalParameter("author_email_regex", Models.)
                .AddOptionalParameter("branch_name_regex", Models.)
                .AddOptionalParameter("commit_committer_check", Models.)
                .AddOptionalParameter("commit_message_negative_regex", Models.)
                .AddOptionalParameter("commit_message_regex", Models.)
                .AddOptionalParameter("deny_delete_tag", Models.)
                .AddOptionalParameter("file_name_regex", Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("max_file_size", Models.)
                .AddOptionalParameter("member_check", Models.)
                .AddOptionalParameter("prevent_secrets", Models.)
                .AddOptionalParameter("reject_unsigned_commits", Models.)
            ;

            methodGroup.AddMethod("Archive a project", MethodType.Post, "/projects/:id/archive", "https://docs.gitlab.com/ee/api/projects.html#archive-a-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Create a forked from/to relation between existing projects", MethodType.Post, "/projects/:id/fork/:forked_from_id", "https://docs.gitlab.com/ee/api/projects.html#create-a-forked-fromto-relation-between-existing-projects")
                .WithReturnType(Models.)
                .AddOptionalParameter("forked_from_id", Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Create project for user", MethodType.Post, "/projects/user/:user_id", "https://docs.gitlab.com/ee/api/projects.html#create-project-for-user")
                .WithReturnType(Models.)
                .AddOptionalParameter("allow_merge_on_skipped_pipeline", Models.)
                .AddOptionalParameter("analytics_access_level", Models.)
                .AddOptionalParameter("approvals_before_merge", Models.)
                .AddOptionalParameter("auto_cancel_pending_pipelines", Models.)
                .AddOptionalParameter("auto_devops_deploy_strategy", Models.)
                .AddOptionalParameter("auto_devops_enabled", Models.)
                .AddOptionalParameter("autoclose_referenced_issues", Models.)
                .AddOptionalParameter("avatar", Models.)
                .AddOptionalParameter("build_coverage_regex", Models.)
                .AddOptionalParameter("build_git_strategy", Models.)
                .AddOptionalParameter("build_timeout", Models.)
                .AddOptionalParameter("builds_access_level", Models.)
                .AddOptionalParameter("ci_config_path", Models.)
                .AddOptionalParameter("container_registry_enabled", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("emails_disabled", Models.)
                .AddOptionalParameter("external_authorization_classification_label", Models.)
                .AddOptionalParameter("forking_access_level", Models.)
                .AddOptionalParameter("group_with_project_templates_id", Models.)
                .AddOptionalParameter("import_url", Models.)
                .AddOptionalParameter("initialize_with_readme", Models.)
                .AddOptionalParameter("issues_access_level", Models.)
                .AddOptionalParameter("issues_enabled", Models.)
                .AddOptionalParameter("jobs_enabled", Models.)
                .AddOptionalParameter("lfs_enabled", Models.)
                .AddOptionalParameter("merge_method", Models.)
                .AddOptionalParameter("merge_requests_access_level", Models.)
                .AddOptionalParameter("merge_requests_enabled", Models.)
                .AddOptionalParameter("mirror_trigger_builds", Models.)
                .AddOptionalParameter("mirror", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("namespace_id", Models.)
                .AddOptionalParameter("operations_access_level", Models.)
                .AddOptionalParameter("only_allow_merge_if_all_discussions_are_resolved", Models.)
                .AddOptionalParameter("only_allow_merge_if_pipeline_succeeds", Models.)
                .AddOptionalParameter("packages_enabled", Models.)
                .AddOptionalParameter("pages_access_level", Models.)
                .AddOptionalParameter("requirements_access_level", Models.)
                .AddOptionalParameter("path", Models.)
                .AddOptionalParameter("printing_merge_request_link_enabled", Models.)
                .AddOptionalParameter("public_builds", Models.)
                .AddOptionalParameter("remove_source_branch_after_merge", Models.)
                .AddOptionalParameter("repository_access_level", Models.)
                .AddOptionalParameter("repository_storage", Models.)
                .AddOptionalParameter("request_access_enabled", Models.)
                .AddOptionalParameter("resolve_outdated_diff_discussions", Models.)
                .AddOptionalParameter("shared_runners_enabled", Models.)
                .AddOptionalParameter("show_default_award_emojis", Models.)
                .AddOptionalParameter("snippets_access_level", Models.)
                .AddOptionalParameter("snippets_enabled", Models.)
                .AddOptionalParameter("suggestion_commit_message", Models.)
                .AddOptionalParameter("tag_list", Models.)
                .AddOptionalParameter("template_name", Models.)
                .AddOptionalParameter("use_custom_template", Models.)
                .AddOptionalParameter("user_id", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("wiki_access_level", Models.)
                .AddOptionalParameter("wiki_enabled", Models.)
            ;

            methodGroup.AddMethod("Delete a shared project link within a group", MethodType.Delete, "/projects/:id/share/:group_id", "https://docs.gitlab.com/ee/api/projects.html#delete-a-shared-project-link-within-a-group")
                .WithReturnType(Models.)
                .AddOptionalParameter("group_id", Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Delete an existing forked from relationship", MethodType.Delete, "/projects/:id/fork", "https://docs.gitlab.com/ee/api/projects.html#delete-an-existing-forked-from-relationship")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Delete project", MethodType.Delete, "/projects/:id", "https://docs.gitlab.com/ee/api/projects.html#delete-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Delete project hook", MethodType.Delete, "/projects/:id/hooks/:hook_id", "https://docs.gitlab.com/ee/api/projects.html#delete-project-hook")
                .WithReturnType(Models.)
                .AddOptionalParameter("hook_id", Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Delete project push rule", MethodType.Delete, "/projects/:id/push_rule", "https://docs.gitlab.com/ee/api/projects.html#delete-project-push-rule")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Download snapshot of a Git repository", MethodType.Get, "/projects/:id/snapshot", "https://docs.gitlab.com/ee/api/projects.html#download-snapshot-of-a-git-repository")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("wiki", Models.)
            ;

            methodGroup.AddMethod("Edit project", MethodType.Put, "/projects/:id", "https://docs.gitlab.com/ee/api/projects.html#edit-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("allow_merge_on_skipped_pipeline", Models.)
                .AddOptionalParameter("analytics_access_level", Models.)
                .AddOptionalParameter("approvals_before_merge", Models.)
                .AddOptionalParameter("auto_cancel_pending_pipelines", Models.)
                .AddOptionalParameter("auto_devops_deploy_strategy", Models.)
                .AddOptionalParameter("auto_devops_enabled", Models.)
                .AddOptionalParameter("autoclose_referenced_issues", Models.)
                .AddOptionalParameter("avatar", Models.)
                .AddOptionalParameter("build_coverage_regex", Models.)
                .AddOptionalParameter("build_git_strategy", Models.)
                .AddOptionalParameter("build_timeout", Models.)
                .AddOptionalParameter("builds_access_level", Models.)
                .AddOptionalParameter("ci_config_path", Models.)
                .AddOptionalParameter("ci_default_git_depth", Models.)
                .AddOptionalParameter("ci_forward_deployment_enabled", Models.)
                .AddOptionalParameter("container_expiration_policy_attributes", Models.)
                .AddOptionalParameter("container_registry_enabled", Models.)
                .AddOptionalParameter("default_branch", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("emails_disabled", Models.)
                .AddOptionalParameter("external_authorization_classification_label", Models.)
                .AddOptionalParameter("forking_access_level", Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("import_url", Models.)
                .AddOptionalParameter("issues_access_level", Models.)
                .AddOptionalParameter("issues_enabled", Models.)
                .AddOptionalParameter("jobs_enabled", Models.)
                .AddOptionalParameter("lfs_enabled", Models.)
                .AddOptionalParameter("merge_method", Models.)
                .AddOptionalParameter("merge_requests_access_level", Models.)
                .AddOptionalParameter("merge_requests_enabled", Models.)
                .AddOptionalParameter("mirror_overwrites_diverged_branches", Models.)
                .AddOptionalParameter("mirror_trigger_builds", Models.)
                .AddOptionalParameter("mirror_user_id", Models.)
                .AddOptionalParameter("mirror", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("operations_access_level", Models.)
                .AddOptionalParameter("only_allow_merge_if_all_discussions_are_resolved", Models.)
                .AddOptionalParameter("only_allow_merge_if_pipeline_succeeds", Models.)
                .AddOptionalParameter("only_mirror_protected_branches", Models.)
                .AddOptionalParameter("packages_enabled", Models.)
                .AddOptionalParameter("pages_access_level", Models.)
                .AddOptionalParameter("requirements_access_level", Models.)
                .AddOptionalParameter("path", Models.)
                .AddOptionalParameter("public_builds", Models.)
                .AddOptionalParameter("remove_source_branch_after_merge", Models.)
                .AddOptionalParameter("repository_access_level", Models.)
                .AddOptionalParameter("repository_storage", Models.)
                .AddOptionalParameter("request_access_enabled", Models.)
                .AddOptionalParameter("resolve_outdated_diff_discussions", Models.)
                .AddOptionalParameter("service_desk_enabled", Models.)
                .AddOptionalParameter("shared_runners_enabled", Models.)
                .AddOptionalParameter("show_default_award_emojis", Models.)
                .AddOptionalParameter("snippets_access_level", Models.)
                .AddOptionalParameter("snippets_enabled", Models.)
                .AddOptionalParameter("suggestion_commit_message", Models.)
                .AddOptionalParameter("tag_list", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("wiki_access_level", Models.)
                .AddOptionalParameter("wiki_enabled", Models.)
            ;

            methodGroup.AddMethod("Edit project hook", MethodType.Put, "/projects/:id/hooks/:hook_id", "https://docs.gitlab.com/ee/api/projects.html#edit-project-hook")
                .WithReturnType(Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("deployment_events", Models.)
                .AddOptionalParameter("enable_ssl_verification", Models.)
                .AddOptionalParameter("hook_id", Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("job_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("push_events_branch_filter", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("url", Models.)
                .AddOptionalParameter("wiki_events", Models.)
                .AddOptionalParameter("releases_events", Models.)
            ;

            methodGroup.AddMethod("Edit project push rule", MethodType.Put, "/projects/:id/push_rule", "https://docs.gitlab.com/ee/api/projects.html#edit-project-push-rule")
                .WithReturnType(Models.)
                .AddOptionalParameter("author_email_regex", Models.)
                .AddOptionalParameter("branch_name_regex", Models.)
                .AddOptionalParameter("commit_committer_check", Models.)
                .AddOptionalParameter("commit_message_negative_regex", Models.)
                .AddOptionalParameter("commit_message_regex", Models.)
                .AddOptionalParameter("deny_delete_tag", Models.)
                .AddOptionalParameter("file_name_regex", Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("max_file_size", Models.)
                .AddOptionalParameter("member_check", Models.)
                .AddOptionalParameter("prevent_secrets", Models.)
                .AddOptionalParameter("reject_unsigned_commits", Models.)
            ;

            methodGroup.AddMethod("Fork project", MethodType.Post, "/projects/:id/fork", "https://docs.gitlab.com/ee/api/projects.html#fork-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("namespace_id", Models.)
                .AddOptionalParameter("namespace_path", Models.)
                .AddOptionalParameter("namespace", Models.)
                .AddOptionalParameter("path", Models.)
            ;

            methodGroup.AddMethod("Get project hook", MethodType.Get, "/projects/:id/hooks/:hook_id", "https://docs.gitlab.com/ee/api/projects.html#get-project-hook")
                .WithReturnType(Models.)
                .AddOptionalParameter("hook_id", Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get project push rules", MethodType.Get, "/projects/:id/push_rule", "https://docs.gitlab.com/ee/api/projects.html#get-project-push-rules")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get project users", MethodType.Get, "/projects/:id/users", "https://docs.gitlab.com/ee/api/projects.html#get-project-users")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("skip_users", Models.)
            ;

            methodGroup.AddMethod("Languages", MethodType.Get, "/projects/:id/languages", "https://docs.gitlab.com/ee/api/projects.html#languages")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("List Forks of a project", MethodType.Get, "/projects/:id/forks", "https://docs.gitlab.com/ee/api/projects.html#list-forks-of-a-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("archived", Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("membership", Models.)
                .AddOptionalParameter("min_access_level", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("owned", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("simple", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("starred", Models.)
                .AddOptionalParameter("statistics", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("with_custom_attributes", Models.)
                .AddOptionalParameter("with_issues_enabled", Models.)
                .AddOptionalParameter("with_merge_requests_enabled", Models.)
            ;

            methodGroup.AddMethod("List project hooks", MethodType.Get, "/projects/:id/hooks", "https://docs.gitlab.com/ee/api/projects.html#list-project-hooks")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("List projects starred by a user", MethodType.Get, "/users/:user_id/starred_projects", "https://docs.gitlab.com/ee/api/projects.html#list-projects-starred-by-a-user")
                .WithReturnType(Models.)
                .AddOptionalParameter("archived", Models.)
                .AddOptionalParameter("membership", Models.)
                .AddOptionalParameter("min_access_level", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("owned", Models.)
                .AddOptionalParameter("search", Models.)
                .AddOptionalParameter("simple", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("starred", Models.)
                .AddOptionalParameter("statistics", Models.)
                .AddOptionalParameter("user_id", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("with_custom_attributes", Models.)
                .AddOptionalParameter("with_issues_enabled", Models.)
                .AddOptionalParameter("with_merge_requests_enabled", Models.)
            ;

            methodGroup.AddMethod("List Starrers of a project", MethodType.Get, "/projects/:id/starrers", "https://docs.gitlab.com/ee/api/projects.html#list-starrers-of-a-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("search", Models.)
            ;

            methodGroup.AddMethod("Restore project marked for deletion", MethodType.Post, "/projects/:id/restore", "https://docs.gitlab.com/ee/api/projects.html#restore-project-marked-for-deletion")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Share project with group", MethodType.Post, "/projects/:id/share", "https://docs.gitlab.com/ee/api/projects.html#share-project-with-group")
                .WithReturnType(Models.)
                .AddOptionalParameter("expires_at", Models.)
                .AddOptionalParameter("group_access", Models.)
                .AddOptionalParameter("group_id", Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Star a project", MethodType.Post, "/projects/:id/star", "https://docs.gitlab.com/ee/api/projects.html#star-a-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Start the Housekeeping task for a project", MethodType.Post, "/projects/:id/housekeeping", "https://docs.gitlab.com/ee/api/projects.html#start-the-housekeeping-task-for-a-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Start the pull mirroring process for a Project", MethodType.Post, "/projects/:id/mirror/pull", "https://docs.gitlab.com/ee/api/projects.html#start-the-pull-mirroring-process-for-a-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Transfer a project to a new namespace", MethodType.Put, "/projects/:id/transfer", "https://docs.gitlab.com/ee/api/projects.html#transfer-a-project-to-a-new-namespace")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
                .AddOptionalParameter("namespace", Models.)
            ;

            methodGroup.AddMethod("Unarchive a project", MethodType.Post, "/projects/:id/unarchive", "https://docs.gitlab.com/ee/api/projects.html#unarchive-a-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

            methodGroup.AddMethod("Unstar a project", MethodType.Post, "/projects/:id/unstar", "https://docs.gitlab.com/ee/api/projects.html#unstar-a-project")
                .WithReturnType(Models.)
                .AddOptionalParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectSnippetsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create new snippet", MethodType.Post, "/projects/:id/snippets", "https://docs.gitlab.com/ee/api/project_snippets.html#create-new-snippet")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("title", Models.)
                .AddOptionalParameter("file_name", Models.)
                .AddOptionalParameter("content", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("files", Models.)
                .AddRequiredParameter("files:file_path", Models.)
                .AddRequiredParameter("files:content", Models.)
            ;

            methodGroup.AddMethod("Delete snippet", MethodType.Delete, "/projects/:id/snippets/:snippet_id", "https://docs.gitlab.com/ee/api/project_snippets.html#delete-snippet")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get user agent details", MethodType.Get, "/projects/:id/snippets/:snippet_id/user_agent_detail", "https://docs.gitlab.com/ee/api/project_snippets.html#get-user-agent-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
            ;

            methodGroup.AddMethod("List snippets", MethodType.Get, "/projects/:id/snippets", "https://docs.gitlab.com/ee/api/project_snippets.html#list-snippets")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Single snippet", MethodType.Get, "/projects/:id/snippets/:snippet_id", "https://docs.gitlab.com/ee/api/project_snippets.html#single-snippet")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Snippet content", MethodType.Get, "/projects/:id/snippets/:snippet_id/raw", "https://docs.gitlab.com/ee/api/project_snippets.html#snippet-content")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Snippet repository file content", MethodType.Get, "/projects/:id/snippets/:snippet_id/files/:ref/:file_path/raw", "https://docs.gitlab.com/ee/api/project_snippets.html#snippet-repository-file-content")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Update snippet", MethodType.Put, "/projects/:id/snippets/:snippet_id", "https://docs.gitlab.com/ee/api/project_snippets.html#update-snippet")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("snippet_id", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("file_name", Models.)
                .AddOptionalParameter("content", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("files", Models.)
                .AddRequiredParameter("files:action", Models.)
                .AddOptionalParameter("files:file_path", Models.)
                .AddOptionalParameter("files:previous_path", Models.)
                .AddOptionalParameter("files:content", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectStatisticsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get the statistics of the last 30 days", MethodType.Get, "/projects/:id/statistics", "https://docs.gitlab.com/ee/api/project_statistics.html#get-the-statistics-of-the-last-30-days")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectTemplatesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get all templates of a particular type", MethodType.Get, "/projects/:id/templates/:type", "https://docs.gitlab.com/ee/api/project_templates.html#get-all-templates-of-a-particular-type")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("type", Models.)
            ;

            methodGroup.AddMethod("Get one template of a particular type", MethodType.Get, "/projects/:id/templates/:type/:key", "https://docs.gitlab.com/ee/api/project_templates.html#get-one-template-of-a-particular-type")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("type", Models.)
                .AddRequiredParameter("key", Models.)
                .AddOptionalParameter("project", Models.)
                .AddOptionalParameter("fullname", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProjectWikisClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Upload an attachment to the wiki repository", MethodType.Post, "/projects/:id/wikis/attachments", "https://docs.gitlab.com/ee/api/wikis.html#upload-an-attachment-to-the-wiki-repository")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("file", Models.)
                .AddOptionalParameter("branch", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProtectedBranchesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Example with allow to push and allow to merge access", MethodType.Post, "\", "https://docs.gitlab.com/ee/api/protected_branches.html#example-with-allow-to-push-and-allow-to-merge-access")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Example with user / group level access", MethodType.Post, "/projects/5/protected_branches", "https://docs.gitlab.com/ee/api/protected_branches.html#example-with-user--group-level-access")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get a single protected branch or wildcard protected branch", MethodType.Get, "/projects/:id/protected_branches/:name", "https://docs.gitlab.com/ee/api/protected_branches.html#get-a-single-protected-branch-or-wildcard-protected-branch")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("List protected branches", MethodType.Get, "/projects/:id/protected_branches", "https://docs.gitlab.com/ee/api/protected_branches.html#list-protected-branches")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("search", Models.)
            ;

            methodGroup.AddMethod("Protect repository branches", MethodType.Post, "/projects/:id/protected_branches", "https://docs.gitlab.com/ee/api/protected_branches.html#protect-repository-branches")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("push_access_level", Models.)
                .AddOptionalParameter("merge_access_level", Models.)
                .AddOptionalParameter("unprotect_access_level", Models.)
                .AddOptionalParameter("allowed_to_push", Models.)
                .AddOptionalParameter("allowed_to_merge", Models.)
                .AddOptionalParameter("allowed_to_unprotect", Models.)
                .AddOptionalParameter("code_owner_approval_required", Models.)
            ;

            methodGroup.AddMethod("Require code owner approvals for a single branch", MethodType.Patch, "/projects/:id/protected_branches/:name", "https://docs.gitlab.com/ee/api/protected_branches.html#require-code-owner-approvals-for-a-single-branch")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("code_owner_approval_required", Models.)
            ;

            methodGroup.AddMethod("Unprotect repository branches", MethodType.Delete, "/projects/:id/protected_branches/:name", "https://docs.gitlab.com/ee/api/protected_branches.html#unprotect-repository-branches")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ProtectedTagsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get a single protected tag or wildcard protected tag", MethodType.Get, "/projects/:id/protected_tags/:name", "https://docs.gitlab.com/ee/api/protected_tags.html#get-a-single-protected-tag-or-wildcard-protected-tag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

            methodGroup.AddMethod("List protected tags", MethodType.Get, "/projects/:id/protected_tags", "https://docs.gitlab.com/ee/api/protected_tags.html#list-protected-tags")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Protect repository tags", MethodType.Post, "/projects/:id/protected_tags", "https://docs.gitlab.com/ee/api/protected_tags.html#protect-repository-tags")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("create_access_level", Models.)
            ;

            methodGroup.AddMethod("Unprotect repository tags", MethodType.Delete, "/projects/:id/protected_tags/:name", "https://docs.gitlab.com/ee/api/protected_tags.html#unprotect-repository-tags")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("name", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ReleaseLinksClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a link", MethodType.Post, "/projects/:id/releases/:tag_name/assets/links", "https://docs.gitlab.com/ee/api/releases/links.html#create-a-link")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
                .AddRequiredParameter("name", Models.)
                .AddRequiredParameter("url", Models.)
                .AddOptionalParameter("filepath", Models.)
                .AddOptionalParameter("link_type", Models.)
            ;

            methodGroup.AddMethod("Delete a link", MethodType.Delete, "/projects/:id/releases/:tag_name/assets/links/:link_id", "https://docs.gitlab.com/ee/api/releases/links.html#delete-a-link")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
                .AddRequiredParameter("link_id", Models.)
            ;

            methodGroup.AddMethod("Get a link", MethodType.Get, "/projects/:id/releases/:tag_name/assets/links/:link_id", "https://docs.gitlab.com/ee/api/releases/links.html#get-a-link")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
                .AddRequiredParameter("link_id", Models.)
            ;

            methodGroup.AddMethod("Get links", MethodType.Get, "/projects/:id/releases/:tag_name/assets/links", "https://docs.gitlab.com/ee/api/releases/links.html#get-links")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("Update a link", MethodType.Put, "/projects/:id/releases/:tag_name/assets/links/:link_id", "https://docs.gitlab.com/ee/api/releases/links.html#update-a-link")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
                .AddRequiredParameter("link_id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("url", Models.)
                .AddOptionalParameter("filepath", Models.)
                .AddOptionalParameter("link_type", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ReleasesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Collect release evidence", MethodType.Post, "/projects/:id/releases/:tag_name/evidence", "https://docs.gitlab.com/ee/api/releases/#collect-release-evidence")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("Create a release", MethodType.Post, "/projects/:id/releases", "https://docs.gitlab.com/ee/api/releases/#create-a-release")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("name", Models.)
                .AddRequiredParameter("tag_name", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("ref", Models.)
                .AddOptionalParameter("milestones", Models.)
                .AddOptionalParameter("assets:links", Models.)
                .AddOptionalParameter("assets:links:name", Models.)
                .AddOptionalParameter("assets:links:url", Models.)
                .AddOptionalParameter("assets:links:filepath", Models.)
                .AddOptionalParameter("assets:links:link_type", Models.)
                .AddOptionalParameter("released_at", Models.)
            ;

            methodGroup.AddMethod("Delete a Release", MethodType.Delete, "/projects/:id/releases/:tag_name", "https://docs.gitlab.com/ee/api/releases/#delete-a-release")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("Get a Release by a tag name", MethodType.Get, "/projects/:id/releases/:tag_name", "https://docs.gitlab.com/ee/api/releases/#get-a-release-by-a-tag-name")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("List Releases", MethodType.Get, "/projects/:id/releases", "https://docs.gitlab.com/ee/api/releases/#list-releases")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("Update a release", MethodType.Put, "/projects/:id/releases/:tag_name", "https://docs.gitlab.com/ee/api/releases/#update-a-release")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
                .AddOptionalParameter("name", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("milestones", Models.)
                .AddOptionalParameter("released_at", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class RepositoriesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Compare branches, tags or commits", MethodType.Get, "/projects/:id/repository/compare", "https://docs.gitlab.com/ee/api/repositories.html#compare-branches-tags-or-commits")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Contributors", MethodType.Get, "/projects/:id/repository/contributors", "https://docs.gitlab.com/ee/api/repositories.html#contributors")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get a blob from repository", MethodType.Get, "/projects/:id/repository/blobs/:sha", "https://docs.gitlab.com/ee/api/repositories.html#get-a-blob-from-repository")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List repository tree", MethodType.Get, "/projects/:id/repository/tree", "https://docs.gitlab.com/ee/api/repositories.html#list-repository-tree")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Merge Base", MethodType.Get, "/projects/:id/repository/merge_base", "https://docs.gitlab.com/ee/api/repositories.html#merge-base")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("refs", Models.)
            ;

            methodGroup.AddMethod("Raw blob content", MethodType.Get, "/projects/:id/repository/blobs/:sha/raw", "https://docs.gitlab.com/ee/api/repositories.html#raw-blob-content")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class RepositoryFilesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Delete existing file in repository", MethodType.Delete, "/projects/:id/repository/files/:file_path", "https://docs.gitlab.com/ee/api/repository_files.html#delete-existing-file-in-repository")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get file blame from repository", MethodType.Get, "/projects/:id/repository/files/:file_path/blame", "https://docs.gitlab.com/ee/api/repository_files.html#get-file-blame-from-repository")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get file from repository", MethodType.Get, "/projects/:id/repository/files/:file_path", "https://docs.gitlab.com/ee/api/repository_files.html#get-file-from-repository")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get raw file from repository", MethodType.Get, "/projects/:id/repository/files/:file_path/raw", "https://docs.gitlab.com/ee/api/repository_files.html#get-raw-file-from-repository")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class RepositorySubmodulesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Update existing submodule reference in repository", MethodType.Put, "/projects/:id/repository/submodules/:submodule", "https://docs.gitlab.com/ee/api/repository_submodules.html#update-existing-submodule-reference-in-repository")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("submodule", Models.)
                .AddRequiredParameter("branch", Models.)
                .AddRequiredParameter("commit_sha", Models.)
                .AddOptionalParameter("commit_message", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ResourceIterationEventsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get single issue iteration event", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_iteration_events/:resource_iteration_event_id", "https://docs.gitlab.com/ee/api/resource_iteration_events.html#get-single-issue-iteration-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("resource_iteration_event_id", Models.)
            ;

            methodGroup.AddMethod("List project issue iteration events", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_iteration_events", "https://docs.gitlab.com/ee/api/resource_iteration_events.html#list-project-issue-iteration-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ResourceLabelEventsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get single epic label event", MethodType.Get, "/groups/:id/epics/:epic_id/resource_label_events/:resource_label_event_id", "https://docs.gitlab.com/ee/api/resource_label_events.html#get-single-epic-label-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
                .AddRequiredParameter("resource_label_event_id", Models.)
            ;

            methodGroup.AddMethod("Get single issue label event", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_label_events/:resource_label_event_id", "https://docs.gitlab.com/ee/api/resource_label_events.html#get-single-issue-label-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("resource_label_event_id", Models.)
            ;

            methodGroup.AddMethod("Get single merge request label event", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/resource_label_events/:resource_label_event_id", "https://docs.gitlab.com/ee/api/resource_label_events.html#get-single-merge-request-label-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("resource_label_event_id", Models.)
            ;

            methodGroup.AddMethod("List group epic label events", MethodType.Get, "/groups/:id/epics/:epic_id/resource_label_events", "https://docs.gitlab.com/ee/api/resource_label_events.html#list-group-epic-label-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("epic_id", Models.)
            ;

            methodGroup.AddMethod("List project issue label events", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_label_events", "https://docs.gitlab.com/ee/api/resource_label_events.html#list-project-issue-label-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("List project merge request label events", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/resource_label_events", "https://docs.gitlab.com/ee/api/resource_label_events.html#list-project-merge-request-label-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ResourceMilestoneEventsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get single issue milestone event", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_milestone_events/:resource_milestone_event_id", "https://docs.gitlab.com/ee/api/resource_milestone_events.html#get-single-issue-milestone-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("resource_milestone_event_id", Models.)
            ;

            methodGroup.AddMethod("Get single merge request milestone event", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/resource_milestone_events/:resource_milestone_event_id", "https://docs.gitlab.com/ee/api/resource_milestone_events.html#get-single-merge-request-milestone-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("resource_milestone_event_id", Models.)
            ;

            methodGroup.AddMethod("List project issue milestone events", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_milestone_events", "https://docs.gitlab.com/ee/api/resource_milestone_events.html#list-project-issue-milestone-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("List project merge request milestone events", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/resource_milestone_events", "https://docs.gitlab.com/ee/api/resource_milestone_events.html#list-project-merge-request-milestone-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ResourceStateEventsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get single issue state event", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_state_events/:resource_state_event_id", "https://docs.gitlab.com/ee/api/resource_state_events.html#get-single-issue-state-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("resource_state_event_id", Models.)
            ;

            methodGroup.AddMethod("Get single merge request state event", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/resource_state_events/:resource_state_event_id", "https://docs.gitlab.com/ee/api/resource_state_events.html#get-single-merge-request-state-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
                .AddRequiredParameter("resource_state_event_id", Models.)
            ;

            methodGroup.AddMethod("List project issue state events", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_state_events", "https://docs.gitlab.com/ee/api/resource_state_events.html#list-project-issue-state-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

            methodGroup.AddMethod("List project merge request state events", MethodType.Get, "/projects/:id/merge_requests/:merge_request_iid/resource_state_events", "https://docs.gitlab.com/ee/api/resource_state_events.html#list-project-merge-request-state-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("merge_request_iid", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ResourceWeightEventsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get single issue weight event", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_weight_events/:resource_weight_event_id", "https://docs.gitlab.com/ee/api/resource_weight_events.html#get-single-issue-weight-event")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
                .AddRequiredParameter("resource_weight_event_id", Models.)
            ;

            methodGroup.AddMethod("List project issue weight events", MethodType.Get, "/projects/:id/issues/:issue_iid/resource_weight_events", "https://docs.gitlab.com/ee/api/resource_weight_events.html#list-project-issue-weight-events")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("issue_iid", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class RunnersClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Delete a runner by authentication token", MethodType.Delete, "/runners", "https://docs.gitlab.com/ee/api/runners.html#delete-a-runner-by-authentication-token")
                .WithReturnType(Models.)
                .AddRequiredParameter("token", Models.)
            ;

            methodGroup.AddMethod("Delete a runner by ID", MethodType.Delete, "/runners/:id", "https://docs.gitlab.com/ee/api/runners.html#delete-a-runner-by-id")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Disable a runner from project", MethodType.Delete, "/projects/:id/runners/:runner_id", "https://docs.gitlab.com/ee/api/runners.html#disable-a-runner-from-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("runner_id", Models.)
            ;

            methodGroup.AddMethod("Enable a runner in project", MethodType.Post, "/projects/:id/runners", "https://docs.gitlab.com/ee/api/runners.html#enable-a-runner-in-project")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("runner_id", Models.)
            ;

            methodGroup.AddMethod("Get runner’s details", MethodType.Get, "/runners/:id", "https://docs.gitlab.com/ee/api/runners.html#get-runners-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List all runners", MethodType.Get, "/runners/all", "https://docs.gitlab.com/ee/api/runners.html#list-all-runners")
                .WithReturnType(Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("type", Models.)
                .AddOptionalParameter("status", Models.)
                .AddOptionalParameter("tag_list", Models.)
            ;

            methodGroup.AddMethod("List group’s runners", MethodType.Get, "/groups/:id/runners", "https://docs.gitlab.com/ee/api/runners.html#list-groups-runners")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("type", Models.)
                .AddOptionalParameter("status", Models.)
                .AddOptionalParameter("tag_list", Models.)
            ;

            methodGroup.AddMethod("List owned runners", MethodType.Get, "/runners", "https://docs.gitlab.com/ee/api/runners.html#list-owned-runners")
                .WithReturnType(Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("type", Models.)
                .AddOptionalParameter("status", Models.)
                .AddOptionalParameter("tag_list", Models.)
            ;

            methodGroup.AddMethod("List project’s runners", MethodType.Get, "/projects/:id/runners", "https://docs.gitlab.com/ee/api/runners.html#list-projects-runners")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("type", Models.)
                .AddOptionalParameter("status", Models.)
                .AddOptionalParameter("tag_list", Models.)
            ;

            methodGroup.AddMethod("List runner’s jobs", MethodType.Get, "/runners/:id/jobs", "https://docs.gitlab.com/ee/api/runners.html#list-runners-jobs")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("status", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("Update runner’s details", MethodType.Put, "/runners/:id", "https://docs.gitlab.com/ee/api/runners.html#update-runners-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("active", Models.)
                .AddOptionalParameter("tag_list", Models.)
                .AddOptionalParameter("run_untagged", Models.)
                .AddOptionalParameter("locked", Models.)
                .AddOptionalParameter("access_level", Models.)
                .AddOptionalParameter("maximum_timeout", Models.)
            ;

            methodGroup.AddMethod("Verify authentication for a registered runner", MethodType.Post, "/runners/verify", "https://docs.gitlab.com/ee/api/runners.html#verify-authentication-for-a-registered-runner")
                .WithReturnType(Models.)
                .AddRequiredParameter("token", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class SCIMAPISYSTEMONLYClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a SCIM provisioned user", MethodType.Post, "/api/scim/v2/groups/:group_path/Users/", "https://docs.gitlab.com/ee/api/scim.html#create-a-scim-provisioned-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("externalId", Models.)
                .AddRequiredParameter("userName", Models.)
                .AddRequiredParameter("emails", Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("meta", Models.)
            ;

            methodGroup.AddMethod("Get a list of SCIM provisioned users", MethodType.Get, "/api/scim/v2/groups/:group_path/Users", "https://docs.gitlab.com/ee/api/scim.html#get-a-list-of-scim-provisioned-users")
                .WithReturnType(Models.)
                .AddOptionalParameter("filter", Models.)
                .AddRequiredParameter("group_path", Models.)
                .AddOptionalParameter("startIndex", Models.)
                .AddOptionalParameter("count", Models.)
            ;

            methodGroup.AddMethod("Get a single SCIM provisioned user", MethodType.Get, "/api/scim/v2/groups/:group_path/Users/:id", "https://docs.gitlab.com/ee/api/scim.html#get-a-single-scim-provisioned-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("group_path", Models.)
            ;

            methodGroup.AddMethod("Remove a single SCIM provisioned user", MethodType.Delete, "/api/scim/v2/groups/:group_path/Users/:id", "https://docs.gitlab.com/ee/api/scim.html#remove-a-single-scim-provisioned-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("group_path", Models.)
            ;

            methodGroup.AddMethod("Update a single SCIM provisioned user", MethodType.Patch, "/api/scim/v2/groups/:group_path/Users/:id", "https://docs.gitlab.com/ee/api/scim.html#update-a-single-scim-provisioned-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("group_path", Models.)
                .AddRequiredParameter("Operations", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class SearchClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Global Search API", MethodType.Get, "/search", "https://docs.gitlab.com/ee/api/search.html#global-search-api")
                .WithReturnType(Models.)
                .AddRequiredParameter("scope", Models.)
                .AddRequiredParameter("search", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("Group Search API", MethodType.Get, "/groups/:id/search", "https://docs.gitlab.com/ee/api/search.html#group-search-api")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("scope", Models.)
                .AddRequiredParameter("search", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("Project Search API", MethodType.Get, "/projects/:id/search", "https://docs.gitlab.com/ee/api/search.html#project-search-api")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("scope", Models.)
                .AddRequiredParameter("search", Models.)
                .AddOptionalParameter("ref", Models.)
                .AddOptionalParameter("state", Models.)
                .AddOptionalParameter("confidential", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
            ;

            methodGroup.AddMethod("Scope: notes", MethodType.Get, "/projects/6/search", "https://docs.gitlab.com/ee/api/search.html#scope-notes-1")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Scope: wiki_blobs", MethodType.Get, "/groups/6/search", "https://docs.gitlab.com/ee/api/search.html#scope-wiki_blobs-1")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class ServicesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create/Edit Asana service", MethodType.Put, "/projects/:id/services/asana", "https://docs.gitlab.com/ee/api/services.html#createedit-asana-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("api_key", Models.)
                .AddOptionalParameter("restrict_to_branch", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Assembla service", MethodType.Put, "/projects/:id/services/assembla", "https://docs.gitlab.com/ee/api/services.html#createedit-assembla-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("subdomain", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Atlassian Bamboo CI service", MethodType.Put, "/projects/:id/services/bamboo", "https://docs.gitlab.com/ee/api/services.html#createedit-atlassian-bamboo-ci-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("bamboo_url", Models.)
                .AddOptionalParameter("build_key", Models.)
                .AddOptionalParameter("username", Models.)
                .AddOptionalParameter("password", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Bugzilla service", MethodType.Put, "/projects/:id/services/bugzilla", "https://docs.gitlab.com/ee/api/services.html#createedit-bugzilla-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("new_issue_url", Models.)
                .AddOptionalParameter("issues_url", Models.)
                .AddOptionalParameter("project_url", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Buildkite service", MethodType.Put, "/projects/:id/services/buildkite", "https://docs.gitlab.com/ee/api/services.html#createedit-buildkite-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("project_url", Models.)
                .AddOptionalParameter("enable_ssl_verification", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Campfire service", MethodType.Put, "/projects/:id/services/campfire", "https://docs.gitlab.com/ee/api/services.html#createedit-campfire-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("subdomain", Models.)
                .AddOptionalParameter("room", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Confluence service", MethodType.Put, "/projects/:id/services/confluence", "https://docs.gitlab.com/ee/api/services.html#createedit-confluence-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("confluence_url", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Custom Issue Tracker service", MethodType.Put, "/projects/:id/services/custom-issue-tracker", "https://docs.gitlab.com/ee/api/services.html#createedit-custom-issue-tracker-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("new_issue_url", Models.)
                .AddOptionalParameter("issues_url", Models.)
                .AddOptionalParameter("project_url", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Drone CI service", MethodType.Put, "/projects/:id/services/drone-ci", "https://docs.gitlab.com/ee/api/services.html#createedit-drone-ci-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("drone_url", Models.)
                .AddOptionalParameter("enable_ssl_verification", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Emails on push service", MethodType.Put, "/projects/:id/services/emails-on-push", "https://docs.gitlab.com/ee/api/services.html#createedit-emails-on-push-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("recipients", Models.)
                .AddOptionalParameter("disable_diffs", Models.)
                .AddOptionalParameter("send_from_committer_email", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("branches_to_be_notified", Models.)
            ;

            methodGroup.AddMethod("Create/Edit External Wiki service", MethodType.Put, "/projects/:id/services/external-wiki", "https://docs.gitlab.com/ee/api/services.html#createedit-external-wiki-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("external_wiki_url", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Flowdock service", MethodType.Put, "/projects/:id/services/flowdock", "https://docs.gitlab.com/ee/api/services.html#createedit-flowdock-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit GitHub service", MethodType.Put, "/projects/:id/services/github", "https://docs.gitlab.com/ee/api/services.html#createedit-github-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("repository_url", Models.)
                .AddOptionalParameter("static_context", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Hangouts Chat service", MethodType.Put, "/projects/:id/services/hangouts-chat", "https://docs.gitlab.com/ee/api/services.html#createedit-hangouts-chat-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("webhook", Models.)
                .AddOptionalParameter("notify_only_broken_pipelines", Models.)
                .AddOptionalParameter("notify_only_default_branch", Models.)
                .AddOptionalParameter("branches_to_be_notified", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("wiki_page_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit HipChat service", MethodType.Put, "/projects/:id/services/hipchat", "https://docs.gitlab.com/ee/api/services.html#createedit-hipchat-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("color", Models.)
                .AddOptionalParameter("notify", Models.)
                .AddOptionalParameter("room", Models.)
                .AddOptionalParameter("api_version", Models.)
                .AddOptionalParameter("server", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Irker (IRC gateway) service", MethodType.Put, "/projects/:id/services/irker", "https://docs.gitlab.com/ee/api/services.html#createedit-irker-irc-gateway-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("recipients", Models.)
                .AddOptionalParameter("default_irc_uri", Models.)
                .AddOptionalParameter("server_host", Models.)
                .AddOptionalParameter("server_port", Models.)
                .AddOptionalParameter("colorize_messages", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Jenkins CI (Deprecated) service", MethodType.Put, "/projects/:id/services/jenkins-deprecated", "https://docs.gitlab.com/ee/api/services.html#createedit-jenkins-ci-deprecated-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Create/Edit Jenkins CI service", MethodType.Put, "/projects/:id/services/jenkins", "https://docs.gitlab.com/ee/api/services.html#createedit-jenkins-ci-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Create/Edit JetBrains TeamCity CI service", MethodType.Put, "/projects/:id/services/teamcity", "https://docs.gitlab.com/ee/api/services.html#createedit-jetbrains-teamcity-ci-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("teamcity_url", Models.)
                .AddOptionalParameter("build_type", Models.)
                .AddOptionalParameter("username", Models.)
                .AddOptionalParameter("password", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Jira service", MethodType.Put, "/projects/:id/services/jira", "https://docs.gitlab.com/ee/api/services.html#createedit-jira-service")
                .WithReturnType(Models.)
                .AddRequiredParameter("url", Models.)
                .AddOptionalParameter("api_url", Models.)
                .AddRequiredParameter("username", Models.)
                .AddRequiredParameter("password", Models.)
                .AddOptionalParameter("active", Models.)
                .AddOptionalParameter("jira_issue_transition_id", Models.)
                .AddOptionalParameter("commit_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("comment_on_event_enabled", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Mattermost notifications service", MethodType.Put, "/projects/:id/services/mattermost", "https://docs.gitlab.com/ee/api/services.html#createedit-mattermost-notifications-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("webhook", Models.)
                .AddOptionalParameter("username", Models.)
                .AddOptionalParameter("channel", Models.)
                .AddOptionalParameter("notify_only_broken_pipelines", Models.)
                .AddOptionalParameter("notify_only_default_branch", Models.)
                .AddOptionalParameter("branches_to_be_notified", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("wiki_page_events", Models.)
                .AddOptionalParameter("push_channel", Models.)
                .AddOptionalParameter("issue_channel", Models.)
                .AddOptionalParameter("confidential_issue_channel", Models.)
                .AddOptionalParameter("merge_request_channel", Models.)
                .AddOptionalParameter("note_channel", Models.)
                .AddOptionalParameter("confidential_note_channel", Models.)
                .AddOptionalParameter("tag_push_channel", Models.)
                .AddOptionalParameter("pipeline_channel", Models.)
                .AddOptionalParameter("wiki_page_channel", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Mattermost slash command service", MethodType.Put, "/projects/:id/services/mattermost-slash-commands", "https://docs.gitlab.com/ee/api/services.html#createedit-mattermost-slash-command-service")
                .WithReturnType(Models.)
                .AddRequiredParameter("token", Models.)
                .AddOptionalParameter("username", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Microsoft Teams service", MethodType.Put, "/projects/:id/services/microsoft-teams", "https://docs.gitlab.com/ee/api/services.html#createedit-microsoft-teams-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("webhook", Models.)
                .AddOptionalParameter("notify_only_broken_pipelines", Models.)
                .AddOptionalParameter("notify_only_default_branch", Models.)
                .AddOptionalParameter("branches_to_be_notified", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("wiki_page_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit MockCI service", MethodType.Put, "/projects/:id/services/mock-ci", "https://docs.gitlab.com/ee/api/services.html#createedit-mockci-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("mock_service_url", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Packagist service", MethodType.Put, "/projects/:id/services/packagist", "https://docs.gitlab.com/ee/api/services.html#createedit-packagist-service")
                .WithReturnType(Models.)
                .AddRequiredParameter("username", Models.)
                .AddRequiredParameter("token", Models.)
                .AddOptionalParameter("server", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Pipeline-Emails service", MethodType.Put, "/projects/:id/services/pipelines-email", "https://docs.gitlab.com/ee/api/services.html#createedit-pipeline-emails-service")
                .WithReturnType(Models.)
                .AddRequiredParameter("recipients", Models.)
                .AddOptionalParameter("add_pusher", Models.)
                .AddOptionalParameter("notify_only_broken_pipelines", Models.)
                .AddOptionalParameter("branches_to_be_notified", Models.)
                .AddOptionalParameter("notify_only_default_branch", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit PivotalTracker service", MethodType.Put, "/projects/:id/services/pivotaltracker", "https://docs.gitlab.com/ee/api/services.html#createedit-pivotaltracker-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("token", Models.)
                .AddOptionalParameter("restrict_to_branch", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Prometheus service", MethodType.Put, "/projects/:id/services/prometheus", "https://docs.gitlab.com/ee/api/services.html#createedit-prometheus-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("api_url", Models.)
                .AddOptionalParameter("google_iap_audience_client_id", Models.)
                .AddOptionalParameter("google_iap_service_account_json", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Pushover service", MethodType.Put, "/projects/:id/services/pushover", "https://docs.gitlab.com/ee/api/services.html#createedit-pushover-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("api_key", Models.)
                .AddOptionalParameter("user_key", Models.)
                .AddOptionalParameter("priority", Models.)
                .AddOptionalParameter("device", Models.)
                .AddOptionalParameter("sound", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Redmine service", MethodType.Put, "/projects/:id/services/redmine", "https://docs.gitlab.com/ee/api/services.html#createedit-redmine-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("new_issue_url", Models.)
                .AddOptionalParameter("project_url", Models.)
                .AddOptionalParameter("issues_url", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Slack service", MethodType.Put, "/projects/:id/services/slack", "https://docs.gitlab.com/ee/api/services.html#createedit-slack-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("webhook", Models.)
                .AddOptionalParameter("username", Models.)
                .AddOptionalParameter("channel", Models.)
                .AddOptionalParameter("notify_only_broken_pipelines", Models.)
                .AddOptionalParameter("notify_only_default_branch", Models.)
                .AddOptionalParameter("branches_to_be_notified", Models.)
                .AddOptionalParameter("commit_events", Models.)
                .AddOptionalParameter("confidential_issue_channel", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("confidential_note_channel", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("deployment_channel", Models.)
                .AddOptionalParameter("deployment_events", Models.)
                .AddOptionalParameter("issue_channel", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("job_events", Models.)
                .AddOptionalParameter("merge_request_channel", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("note_channel", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("pipeline_channel", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("push_channel", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("tag_push_channel", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("wiki_page_channel", Models.)
                .AddOptionalParameter("wiki_page_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Slack slash command service", MethodType.Put, "/projects/:id/services/slack-slash-commands", "https://docs.gitlab.com/ee/api/services.html#createedit-slack-slash-command-service")
                .WithReturnType(Models.)
                .AddRequiredParameter("token", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Unify Circuit service", MethodType.Put, "/projects/:id/services/unify-circuit", "https://docs.gitlab.com/ee/api/services.html#createedit-unify-circuit-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("webhook", Models.)
                .AddOptionalParameter("notify_only_broken_pipelines", Models.)
                .AddOptionalParameter("branches_to_be_notified", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("wiki_page_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit Webex Teams service", MethodType.Put, "/projects/:id/services/webex-teams", "https://docs.gitlab.com/ee/api/services.html#createedit-webex-teams-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("webhook", Models.)
                .AddOptionalParameter("notify_only_broken_pipelines", Models.)
                .AddOptionalParameter("branches_to_be_notified", Models.)
                .AddOptionalParameter("push_events", Models.)
                .AddOptionalParameter("issues_events", Models.)
                .AddOptionalParameter("confidential_issues_events", Models.)
                .AddOptionalParameter("merge_requests_events", Models.)
                .AddOptionalParameter("tag_push_events", Models.)
                .AddOptionalParameter("note_events", Models.)
                .AddOptionalParameter("confidential_note_events", Models.)
                .AddOptionalParameter("pipeline_events", Models.)
                .AddOptionalParameter("wiki_page_events", Models.)
            ;

            methodGroup.AddMethod("Create/Edit YouTrack service", MethodType.Put, "/projects/:id/services/youtrack", "https://docs.gitlab.com/ee/api/services.html#createedit-youtrack-service")
                .WithReturnType(Models.)
                .AddOptionalParameter("issues_url", Models.)
                .AddOptionalParameter("project_url", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("push_events", Models.)
            ;

            methodGroup.AddMethod("Delete Asana service", MethodType.Delete, "/projects/:id/services/asana", "https://docs.gitlab.com/ee/api/services.html#delete-asana-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Assembla service", MethodType.Delete, "/projects/:id/services/assembla", "https://docs.gitlab.com/ee/api/services.html#delete-assembla-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Atlassian Bamboo CI service", MethodType.Delete, "/projects/:id/services/bamboo", "https://docs.gitlab.com/ee/api/services.html#delete-atlassian-bamboo-ci-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Bugzilla Service", MethodType.Delete, "/projects/:id/services/bugzilla", "https://docs.gitlab.com/ee/api/services.html#delete-bugzilla-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Buildkite service", MethodType.Delete, "/projects/:id/services/buildkite", "https://docs.gitlab.com/ee/api/services.html#delete-buildkite-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Campfire service", MethodType.Delete, "/projects/:id/services/campfire", "https://docs.gitlab.com/ee/api/services.html#delete-campfire-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Confluence service", MethodType.Delete, "/projects/:id/services/confluence", "https://docs.gitlab.com/ee/api/services.html#delete-confluence-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Custom Issue Tracker service", MethodType.Delete, "/projects/:id/services/custom-issue-tracker", "https://docs.gitlab.com/ee/api/services.html#delete-custom-issue-tracker-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Drone CI service", MethodType.Delete, "/projects/:id/services/drone-ci", "https://docs.gitlab.com/ee/api/services.html#delete-drone-ci-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Emails on push service", MethodType.Delete, "/projects/:id/services/emails-on-push", "https://docs.gitlab.com/ee/api/services.html#delete-emails-on-push-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete External Wiki service", MethodType.Delete, "/projects/:id/services/external-wiki", "https://docs.gitlab.com/ee/api/services.html#delete-external-wiki-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Flowdock service", MethodType.Delete, "/projects/:id/services/flowdock", "https://docs.gitlab.com/ee/api/services.html#delete-flowdock-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete GitHub service", MethodType.Delete, "/projects/:id/services/github", "https://docs.gitlab.com/ee/api/services.html#delete-github-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Hangouts Chat service", MethodType.Delete, "/projects/:id/services/hangouts-chat", "https://docs.gitlab.com/ee/api/services.html#delete-hangouts-chat-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete HipChat service", MethodType.Delete, "/projects/:id/services/hipchat", "https://docs.gitlab.com/ee/api/services.html#delete-hipchat-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Irker (IRC gateway) service", MethodType.Delete, "/projects/:id/services/irker", "https://docs.gitlab.com/ee/api/services.html#delete-irker-irc-gateway-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Jenkins CI (Deprecated) service", MethodType.Delete, "/projects/:id/services/jenkins-deprecated", "https://docs.gitlab.com/ee/api/services.html#delete-jenkins-ci-deprecated-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Jenkins CI service", MethodType.Delete, "/projects/:id/services/jenkins", "https://docs.gitlab.com/ee/api/services.html#delete-jenkins-ci-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete JetBrains TeamCity CI service", MethodType.Delete, "/projects/:id/services/teamcity", "https://docs.gitlab.com/ee/api/services.html#delete-jetbrains-teamcity-ci-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Jira service", MethodType.Delete, "/projects/:id/services/jira", "https://docs.gitlab.com/ee/api/services.html#delete-jira-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Mattermost notifications service", MethodType.Delete, "/projects/:id/services/mattermost", "https://docs.gitlab.com/ee/api/services.html#delete-mattermost-notifications-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Mattermost slash command service", MethodType.Delete, "/projects/:id/services/mattermost-slash-commands", "https://docs.gitlab.com/ee/api/services.html#delete-mattermost-slash-command-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Microsoft Teams service", MethodType.Delete, "/projects/:id/services/microsoft-teams", "https://docs.gitlab.com/ee/api/services.html#delete-microsoft-teams-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete MockCI service", MethodType.Delete, "/projects/:id/services/mock-ci", "https://docs.gitlab.com/ee/api/services.html#delete-mockci-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Packagist service", MethodType.Delete, "/projects/:id/services/packagist", "https://docs.gitlab.com/ee/api/services.html#delete-packagist-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Pipeline-Emails service", MethodType.Delete, "/projects/:id/services/pipelines-email", "https://docs.gitlab.com/ee/api/services.html#delete-pipeline-emails-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete PivotalTracker service", MethodType.Delete, "/projects/:id/services/pivotaltracker", "https://docs.gitlab.com/ee/api/services.html#delete-pivotaltracker-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Prometheus service", MethodType.Delete, "/projects/:id/services/prometheus", "https://docs.gitlab.com/ee/api/services.html#delete-prometheus-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Pushover service", MethodType.Delete, "/projects/:id/services/pushover", "https://docs.gitlab.com/ee/api/services.html#delete-pushover-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Redmine service", MethodType.Delete, "/projects/:id/services/redmine", "https://docs.gitlab.com/ee/api/services.html#delete-redmine-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Slack service", MethodType.Delete, "/projects/:id/services/slack", "https://docs.gitlab.com/ee/api/services.html#delete-slack-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Slack slash command service", MethodType.Delete, "/projects/:id/services/slack-slash-commands", "https://docs.gitlab.com/ee/api/services.html#delete-slack-slash-command-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Unify Circuit service", MethodType.Delete, "/projects/:id/services/unify-circuit", "https://docs.gitlab.com/ee/api/services.html#delete-unify-circuit-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete Webex Teams service", MethodType.Delete, "/projects/:id/services/webex-teams", "https://docs.gitlab.com/ee/api/services.html#delete-webex-teams-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete YouTrack Service", MethodType.Delete, "/projects/:id/services/youtrack", "https://docs.gitlab.com/ee/api/services.html#delete-youtrack-service")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Asana service settings", MethodType.Get, "/projects/:id/services/asana", "https://docs.gitlab.com/ee/api/services.html#get-asana-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Assembla service settings", MethodType.Get, "/projects/:id/services/assembla", "https://docs.gitlab.com/ee/api/services.html#get-assembla-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Atlassian Bamboo CI service settings", MethodType.Get, "/projects/:id/services/bamboo", "https://docs.gitlab.com/ee/api/services.html#get-atlassian-bamboo-ci-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Bugzilla Service Settings", MethodType.Get, "/projects/:id/services/bugzilla", "https://docs.gitlab.com/ee/api/services.html#get-bugzilla-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Buildkite service settings", MethodType.Get, "/projects/:id/services/buildkite", "https://docs.gitlab.com/ee/api/services.html#get-buildkite-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Campfire service settings", MethodType.Get, "/projects/:id/services/campfire", "https://docs.gitlab.com/ee/api/services.html#get-campfire-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Confluence service settings", MethodType.Get, "/projects/:id/services/confluence", "https://docs.gitlab.com/ee/api/services.html#get-confluence-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Custom Issue Tracker service settings", MethodType.Get, "/projects/:id/services/custom-issue-tracker", "https://docs.gitlab.com/ee/api/services.html#get-custom-issue-tracker-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Drone CI service settings", MethodType.Get, "/projects/:id/services/drone-ci", "https://docs.gitlab.com/ee/api/services.html#get-drone-ci-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Emails on push service settings", MethodType.Get, "/projects/:id/services/emails-on-push", "https://docs.gitlab.com/ee/api/services.html#get-emails-on-push-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get External Wiki service settings", MethodType.Get, "/projects/:id/services/external-wiki", "https://docs.gitlab.com/ee/api/services.html#get-external-wiki-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Flowdock service settings", MethodType.Get, "/projects/:id/services/flowdock", "https://docs.gitlab.com/ee/api/services.html#get-flowdock-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get GitHub service settings", MethodType.Get, "/projects/:id/services/github", "https://docs.gitlab.com/ee/api/services.html#get-github-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Hangouts Chat service settings", MethodType.Get, "/projects/:id/services/hangouts-chat", "https://docs.gitlab.com/ee/api/services.html#get-hangouts-chat-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get HipChat service settings", MethodType.Get, "/projects/:id/services/hipchat", "https://docs.gitlab.com/ee/api/services.html#get-hipchat-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Irker (IRC gateway) service settings", MethodType.Get, "/projects/:id/services/irker", "https://docs.gitlab.com/ee/api/services.html#get-irker-irc-gateway-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Jenkins CI (Deprecated) service settings", MethodType.Get, "/projects/:id/services/jenkins-deprecated", "https://docs.gitlab.com/ee/api/services.html#get-jenkins-ci-deprecated-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Jenkins CI service settings", MethodType.Get, "/projects/:id/services/jenkins", "https://docs.gitlab.com/ee/api/services.html#get-jenkins-ci-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get JetBrains TeamCity CI service settings", MethodType.Get, "/projects/:id/services/teamcity", "https://docs.gitlab.com/ee/api/services.html#get-jetbrains-teamcity-ci-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Jira service settings", MethodType.Get, "/projects/:id/services/jira", "https://docs.gitlab.com/ee/api/services.html#get-jira-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Mattermost notifications service settings", MethodType.Get, "/projects/:id/services/mattermost", "https://docs.gitlab.com/ee/api/services.html#get-mattermost-notifications-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Mattermost slash command service settings", MethodType.Get, "/projects/:id/services/mattermost-slash-commands", "https://docs.gitlab.com/ee/api/services.html#get-mattermost-slash-command-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Microsoft Teams service settings", MethodType.Get, "/projects/:id/services/microsoft-teams", "https://docs.gitlab.com/ee/api/services.html#get-microsoft-teams-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get MockCI service settings", MethodType.Get, "/projects/:id/services/mock-ci", "https://docs.gitlab.com/ee/api/services.html#get-mockci-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Packagist service settings", MethodType.Get, "/projects/:id/services/packagist", "https://docs.gitlab.com/ee/api/services.html#get-packagist-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Pipeline-Emails service settings", MethodType.Get, "/projects/:id/services/pipelines-email", "https://docs.gitlab.com/ee/api/services.html#get-pipeline-emails-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get PivotalTracker service settings", MethodType.Get, "/projects/:id/services/pivotaltracker", "https://docs.gitlab.com/ee/api/services.html#get-pivotaltracker-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Prometheus service settings", MethodType.Get, "/projects/:id/services/prometheus", "https://docs.gitlab.com/ee/api/services.html#get-prometheus-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Pushover service settings", MethodType.Get, "/projects/:id/services/pushover", "https://docs.gitlab.com/ee/api/services.html#get-pushover-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Redmine service settings", MethodType.Get, "/projects/:id/services/redmine", "https://docs.gitlab.com/ee/api/services.html#get-redmine-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Slack service settings", MethodType.Get, "/projects/:id/services/slack", "https://docs.gitlab.com/ee/api/services.html#get-slack-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Slack slash command service settings", MethodType.Get, "/projects/:id/services/slack-slash-commands", "https://docs.gitlab.com/ee/api/services.html#get-slack-slash-command-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Unify Circuit service settings", MethodType.Get, "/projects/:id/services/unify-circuit", "https://docs.gitlab.com/ee/api/services.html#get-unify-circuit-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get Webex Teams service settings", MethodType.Get, "/projects/:id/services/webex-teams", "https://docs.gitlab.com/ee/api/services.html#get-webex-teams-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get YouTrack Service Settings", MethodType.Get, "/projects/:id/services/youtrack", "https://docs.gitlab.com/ee/api/services.html#get-youtrack-service-settings")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List all active services", MethodType.Get, "/projects/:id/services", "https://docs.gitlab.com/ee/api/services.html#list-all-active-services")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class SidekiqMetricsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Get a compound response of all the previously mentioned metrics", MethodType.Get, "/sidekiq/compound_metrics", "https://docs.gitlab.com/ee/api/sidekiq_metrics.html#get-a-compound-response-of-all-the-previously-mentioned-metrics")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get the current Job Statistics", MethodType.Get, "/sidekiq/job_stats", "https://docs.gitlab.com/ee/api/sidekiq_metrics.html#get-the-current-job-statistics")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get the current Process Metrics", MethodType.Get, "/sidekiq/process_metrics", "https://docs.gitlab.com/ee/api/sidekiq_metrics.html#get-the-current-process-metrics")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get the current Queue Metrics", MethodType.Get, "/sidekiq/queue_metrics", "https://docs.gitlab.com/ee/api/sidekiq_metrics.html#get-the-current-queue-metrics")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class SidekiqQueuesAdministrationClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Sidekiq queues administration API", MethodType.Delete, "/admin/sidekiq/queues/:queue_name", "https://docs.gitlab.com/ee/api/admin_sidekiq_queues.html#sidekiq-queues-administration-api")
                .WithReturnType(Models.)
                .AddRequiredParameter("queue_name", Models.)
                .AddOptionalParameter("user", Models.)
                .AddOptionalParameter("project", Models.)
                .AddOptionalParameter("root_namespace", Models.)
                .AddOptionalParameter("subscription_plan", Models.)
                .AddOptionalParameter("caller_id", Models.)
                .AddOptionalParameter("feature_category", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class SnippetsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create new snippet", MethodType.Post, "/snippets", "https://docs.gitlab.com/ee/api/snippets.html#create-new-snippet")
                .WithReturnType(Models.)
                .AddRequiredParameter("title", Models.)
                .AddOptionalParameter("file_name", Models.)
                .AddOptionalParameter("content", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("files", Models.)
                .AddRequiredParameter("files:file_path", Models.)
                .AddRequiredParameter("files:content", Models.)
            ;

            methodGroup.AddMethod("Delete snippet", MethodType.Delete, "/snippets/:id", "https://docs.gitlab.com/ee/api/snippets.html#delete-snippet")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get a single snippet", MethodType.Get, "/snippets/:id", "https://docs.gitlab.com/ee/api/snippets.html#get-a-single-snippet")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Get user agent details", MethodType.Get, "/snippets/:id/user_agent_detail", "https://docs.gitlab.com/ee/api/snippets.html#get-user-agent-details")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List all public snippets", MethodType.Get, "/snippets/public", "https://docs.gitlab.com/ee/api/snippets.html#list-all-public-snippets")
                .WithReturnType(Models.)
                .AddOptionalParameter("per_page", Models.)
                .AddOptionalParameter("page", Models.)
            ;

            methodGroup.AddMethod("List all snippets for a user", MethodType.Get, "/snippets", "https://docs.gitlab.com/ee/api/snippets.html#list-all-snippets-for-a-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Single snippet contents", MethodType.Get, "/snippets/:id/raw", "https://docs.gitlab.com/ee/api/snippets.html#single-snippet-contents")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Snippet repository file content", MethodType.Get, "/snippets/:id/files/:ref/:file_path/raw", "https://docs.gitlab.com/ee/api/snippets.html#snippet-repository-file-content")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("ref", Models.)
                .AddRequiredParameter("file_path", Models.)
            ;

            methodGroup.AddMethod("Update snippet", MethodType.Put, "/snippets/:id", "https://docs.gitlab.com/ee/api/snippets.html#update-snippet")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("title", Models.)
                .AddOptionalParameter("file_name", Models.)
                .AddOptionalParameter("content", Models.)
                .AddOptionalParameter("description", Models.)
                .AddOptionalParameter("visibility", Models.)
                .AddOptionalParameter("files", Models.)
                .AddRequiredParameter("files:action", Models.)
                .AddOptionalParameter("files:file_path", Models.)
                .AddOptionalParameter("files:previous_path", Models.)
                .AddOptionalParameter("files:content", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class SuggestChangesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Applying suggestions", MethodType.Put, "/suggestions/:id/apply", "https://docs.gitlab.com/ee/api/suggestions.html#applying-suggestions")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class SystemHooksClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Test system hook", MethodType.Get, "/hooks/:id", "https://docs.gitlab.com/ee/api/system_hooks.html#test-system-hook")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class TagsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Create a new release", MethodType.Post, "/projects/:id/repository/tags/:tag_name/release", "https://docs.gitlab.com/ee/api/tags.html#create-a-new-release")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("Create a new tag", MethodType.Post, "/projects/:id/repository/tags", "https://docs.gitlab.com/ee/api/tags.html#create-a-new-tag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
                .AddRequiredParameter("ref", Models.)
                .AddOptionalParameter("message", Models.)
                .AddOptionalParameter("release_description", Models.)
            ;

            methodGroup.AddMethod("Delete a tag", MethodType.Delete, "/projects/:id/repository/tags/:tag_name", "https://docs.gitlab.com/ee/api/tags.html#delete-a-tag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("Get a single repository tag", MethodType.Get, "/projects/:id/repository/tags/:tag_name", "https://docs.gitlab.com/ee/api/tags.html#get-a-single-repository-tag")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

            methodGroup.AddMethod("List project repository tags", MethodType.Get, "/projects/:id/repository/tags", "https://docs.gitlab.com/ee/api/tags.html#list-project-repository-tags")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("order_by", Models.)
                .AddOptionalParameter("sort", Models.)
                .AddOptionalParameter("search", Models.)
            ;

            methodGroup.AddMethod("Update a release", MethodType.Put, "/projects/:id/repository/tags/:tag_name/release", "https://docs.gitlab.com/ee/api/tags.html#update-a-release")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("tag_name", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class UsersClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Activate user", MethodType.Post, "/users/:id/activate", "https://docs.gitlab.com/ee/api/users.html#activate-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Add a GPG key", MethodType.Post, "/user/gpg_keys", "https://docs.gitlab.com/ee/api/users.html#add-a-gpg-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("key", Models.)
            ;

            methodGroup.AddMethod("Add a GPG key for a given user", MethodType.Post, "/users/:id/gpg_keys", "https://docs.gitlab.com/ee/api/users.html#add-a-gpg-key-for-a-given-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key_id", Models.)
            ;

            methodGroup.AddMethod("Add email", MethodType.Post, "/user/emails", "https://docs.gitlab.com/ee/api/users.html#add-email")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Add email for user", MethodType.Post, "/users/:id/emails", "https://docs.gitlab.com/ee/api/users.html#add-email-for-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Approve user", MethodType.Post, "/users/:id/approve", "https://docs.gitlab.com/ee/api/users.html#approve-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Block user", MethodType.Post, "/users/:id/block", "https://docs.gitlab.com/ee/api/users.html#block-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Create a personal access token", MethodType.Post, "/users/:user_id/personal_access_tokens", "https://docs.gitlab.com/ee/api/users.html#create-a-personal-access-token")
                .WithReturnType(Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddRequiredParameter("name", Models.)
                .AddOptionalParameter("expires_at", Models.)
                .AddRequiredParameter("scopes", Models.)
            ;

            methodGroup.AddMethod("Deactivate user", MethodType.Post, "/users/:id/deactivate", "https://docs.gitlab.com/ee/api/users.html#deactivate-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete a GPG key", MethodType.Delete, "/user/gpg_keys/:key_id", "https://docs.gitlab.com/ee/api/users.html#delete-a-gpg-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("key_id", Models.)
            ;

            methodGroup.AddMethod("Delete a GPG key for a given user", MethodType.Delete, "/users/:id/gpg_keys/:key_id", "https://docs.gitlab.com/ee/api/users.html#delete-a-gpg-key-for-a-given-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key_id", Models.)
            ;

            methodGroup.AddMethod("Delete authentication identity from user", MethodType.Delete, "/users/:id/identities/:provider", "https://docs.gitlab.com/ee/api/users.html#delete-authentication-identity-from-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete email for current user", MethodType.Delete, "/user/emails/:email_id", "https://docs.gitlab.com/ee/api/users.html#delete-email-for-current-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Delete email for given user", MethodType.Delete, "/users/:id/emails/:email_id", "https://docs.gitlab.com/ee/api/users.html#delete-email-for-given-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Get a specific GPG key", MethodType.Get, "/user/gpg_keys/:key_id", "https://docs.gitlab.com/ee/api/users.html#get-a-specific-gpg-key")
                .WithReturnType(Models.)
                .AddRequiredParameter("key_id", Models.)
            ;

            methodGroup.AddMethod("Get a specific GPG key for a given user", MethodType.Get, "/users/:id/gpg_keys/:key_id", "https://docs.gitlab.com/ee/api/users.html#get-a-specific-gpg-key-for-a-given-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("key_id", Models.)
            ;

            methodGroup.AddMethod("Get all impersonation tokens of a user", MethodType.Get, "/users/:user_id/impersonation_tokens", "https://docs.gitlab.com/ee/api/users.html#get-all-impersonation-tokens-of-a-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddOptionalParameter("state", Models.)
            ;

            methodGroup.AddMethod("Get an impersonation token of a user", MethodType.Get, "/users/:user_id/impersonation_tokens/:impersonation_token_id", "https://docs.gitlab.com/ee/api/users.html#get-an-impersonation-token-of-a-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddRequiredParameter("impersonation_token_id", Models.)
            ;

            methodGroup.AddMethod("Get user activities (admin only)", MethodType.Get, "/user/activities", "https://docs.gitlab.com/ee/api/users.html#get-user-activities-admin-only")
                .WithReturnType(Models.)
                .AddOptionalParameter("from", Models.)
            ;

            methodGroup.AddMethod("List all GPG keys", MethodType.Get, "/user/gpg_keys", "https://docs.gitlab.com/ee/api/users.html#list-all-gpg-keys")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List all GPG keys for given user", MethodType.Get, "/users/:id/gpg_keys", "https://docs.gitlab.com/ee/api/users.html#list-all-gpg-keys-for-given-user")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("List emails", MethodType.Get, "/user/emails", "https://docs.gitlab.com/ee/api/users.html#list-emails")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("List emails for user", MethodType.Get, "/users/:id/emails", "https://docs.gitlab.com/ee/api/users.html#list-emails-for-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Revoke an impersonation token", MethodType.Delete, "/users/:user_id/impersonation_tokens/:impersonation_token_id", "https://docs.gitlab.com/ee/api/users.html#revoke-an-impersonation-token")
                .WithReturnType(Models.)
                .AddRequiredParameter("user_id", Models.)
                .AddRequiredParameter("impersonation_token_id", Models.)
            ;

            methodGroup.AddMethod("Single email", MethodType.Get, "/user/emails/:email_id", "https://docs.gitlab.com/ee/api/users.html#single-email")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("Unblock user", MethodType.Post, "/users/:id/unblock", "https://docs.gitlab.com/ee/api/users.html#unblock-user")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("User counts", MethodType.Get, "/user_counts", "https://docs.gitlab.com/ee/api/users.html#user-counts")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("User deletion", MethodType.Delete, "/users/:id", "https://docs.gitlab.com/ee/api/users.html#user-deletion")
                .WithReturnType(Models.)
            ;

            methodGroup.AddMethod("User memberships (admin only)", MethodType.Get, "/users/:id/memberships", "https://docs.gitlab.com/ee/api/users.html#user-memberships-admin-only")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("type", Models.)
            ;

            methodGroup.AddMethod("User modification", MethodType.Put, "/users/:id", "https://docs.gitlab.com/ee/api/users.html#user-modification")
                .WithReturnType(Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class UserStarredMetricsDashboardsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Add a star to a dashboard", MethodType.Post, "/projects/:id/metrics/user_starred_dashboards", "https://docs.gitlab.com/ee/api/metrics_user_starred_dashboards.html#add-a-star-to-a-dashboard")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddRequiredParameter("dashboard_path", Models.)
            ;

            methodGroup.AddMethod("Remove a star from a dashboard", MethodType.Delete, "/projects/:id/metrics/user_starred_dashboards", "https://docs.gitlab.com/ee/api/metrics_user_starred_dashboards.html#remove-a-star-from-a-dashboard")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("dashboard_path", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class VulnerabilitiesClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("Confirm vulnerability", MethodType.Post, "/vulnerabilities/:id/confirm", "https://docs.gitlab.com/ee/api/vulnerabilities.html#confirm-vulnerability")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Dismiss vulnerability", MethodType.Post, "/vulnerabilities/:id/dismiss", "https://docs.gitlab.com/ee/api/vulnerabilities.html#dismiss-vulnerability")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Resolve vulnerability", MethodType.Post, "/vulnerabilities/:id/resolve", "https://docs.gitlab.com/ee/api/vulnerabilities.html#resolve-vulnerability")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Revert vulnerability to detected state", MethodType.Post, "/vulnerabilities/:id/revert", "https://docs.gitlab.com/ee/api/vulnerabilities.html#revert-vulnerability-to-detected-state")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

            methodGroup.AddMethod("Single vulnerability", MethodType.Get, "/vulnerabilities/:id", "https://docs.gitlab.com/ee/api/vulnerabilities.html#single-vulnerability")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
            ;

        }
    }
}
namespace Meziantou.GitLabClient.Generator.GitLabModels
{
    internal sealed class VulnerabilityFindingsClient : GitLabClientBuilder
    {
        protected override void Create(MethodGroup methodGroup)
        {
            methodGroup.AddMethod("List project vulnerability findings", MethodType.Get, "/projects/:id/vulnerability_findings", "https://docs.gitlab.com/ee/api/vulnerability_findings.html#list-project-vulnerability-findings")
                .WithReturnType(Models.)
                .AddRequiredParameter("id", Models.)
                .AddOptionalParameter("report_type", Models.)
                .AddOptionalParameter("scope", Models.)
                .AddOptionalParameter("severity", Models.)
                .AddOptionalParameter("confidence", Models.)
                .AddOptionalParameter("scanner", Models.)
                .AddOptionalParameter("pipeline_id", Models.)
            ;

        }
    }
}
