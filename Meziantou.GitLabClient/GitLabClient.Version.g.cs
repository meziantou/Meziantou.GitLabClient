// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabVersionClient Version
        {
            get;
        }
    }

    public partial interface IGitLabVersionClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/version.html" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<ServerVersion?> GetAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabVersionClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/version.html" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<ServerVersion?> Meziantou.GitLab.IGitLabVersionClient.GetAsync(Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Version_GetAsync(requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabVersionClient Version
        {
            get
            {
                return this;
            }
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/version.html" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<ServerVersion?> Version_GetAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("version");
            string url = urlBuilder.Build();
            return this.GetAsync<ServerVersion>(url, requestOptions, cancellationToken);
        }
    }
}
