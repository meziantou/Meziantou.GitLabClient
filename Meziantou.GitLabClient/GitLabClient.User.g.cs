// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabUserClient User
        {
            get;
        }
    }

    public partial interface IGitLabUserClient
    {
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey?> AddSSHKeyAsync(string title, string key, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey?> AddSSHKeyAsync(UserRef user, string title, string key, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<ImpersonationToken?> CreateImpersonationTokenAsync(UserRef user, string name, System.DateTime? expiresAt = default(System.DateTime?), System.Collections.Generic.IEnumerable<string>? scopes = default(System.Collections.Generic.IEnumerable<string>?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> CreateUserAsync(string email, string username, string name, string? password = default(string?), bool? admin = default(bool?), bool? canCreateGroup = default(bool?), bool? skipConfirmation = default(bool?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task DeleteSSHKeyAsync(SshKeyRef id, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="pageOptions">The page index and page size</param>
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<UserBasic> GetAllAsync(string? username = default(string?), bool? active = default(bool?), bool? blocked = default(bool?), Meziantou.GitLab.PageOptions? pageOptions = default(Meziantou.GitLab.PageOptions), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> GetAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> GetAsync(long id, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey?> GetSSHKeyAsync(SshKeyRef id, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> GetSSHKeysAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> GetSSHKeysAsync(UserRef user, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> GetStatusAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> GetStatusAsync(UserRef user, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> SetStatusAsync(string? emoji = default(string?), string? message = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    partial class GitLabClient : Meziantou.GitLab.IGitLabUserClient
    {
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey?> Meziantou.GitLab.IGitLabUserClient.AddSSHKeyAsync(UserRef user, string title, string key, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_AddSSHKeyAsync(user, title, key, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey?> Meziantou.GitLab.IGitLabUserClient.AddSSHKeyAsync(string title, string key, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_AddSSHKeyAsync(title, key, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<ImpersonationToken?> Meziantou.GitLab.IGitLabUserClient.CreateImpersonationTokenAsync(UserRef user, string name, System.DateTime? expiresAt, System.Collections.Generic.IEnumerable<string>? scopes, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_CreateImpersonationTokenAsync(user, name, expiresAt, scopes, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> Meziantou.GitLab.IGitLabUserClient.CreateUserAsync(string email, string username, string name, string? password, bool? admin, bool? canCreateGroup, bool? skipConfirmation, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_CreateUserAsync(email, username, name, password, admin, canCreateGroup, skipConfirmation, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task Meziantou.GitLab.IGitLabUserClient.DeleteSSHKeyAsync(SshKeyRef id, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_DeleteSSHKeyAsync(id, requestOptions, cancellationToken);
        }

        /// <param name="pageOptions">The page index and page size</param>
        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<UserBasic> Meziantou.GitLab.IGitLabUserClient.GetAllAsync(string? username, bool? active, bool? blocked, Meziantou.GitLab.PageOptions? pageOptions, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.User_GetAllAsync(username, active, blocked, pageOptions, requestOptions);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> Meziantou.GitLab.IGitLabUserClient.GetAsync(Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_GetAsync(requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<User?> Meziantou.GitLab.IGitLabUserClient.GetAsync(long id, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_GetAsync(id, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<SshKey?> Meziantou.GitLab.IGitLabUserClient.GetSSHKeyAsync(SshKeyRef id, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_GetSSHKeyAsync(id, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> Meziantou.GitLab.IGitLabUserClient.GetSSHKeysAsync(Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_GetSSHKeysAsync(requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> Meziantou.GitLab.IGitLabUserClient.GetSSHKeysAsync(UserRef user, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_GetSSHKeysAsync(user, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> Meziantou.GitLab.IGitLabUserClient.GetStatusAsync(UserRef user, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_GetStatusAsync(user, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> Meziantou.GitLab.IGitLabUserClient.GetStatusAsync(Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_GetStatusAsync(requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<UserStatus?> Meziantou.GitLab.IGitLabUserClient.SetStatusAsync(string? emoji, string? message, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.User_SetStatusAsync(emoji, message, requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabUserClient User
        {
            get
            {
                return this;
            }
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<SshKey?> User_AddSSHKeyAsync(string title, string key, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/keys");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            body.Add("title", title);
            body.Add("key", key);
            return this.PostJsonAsync<SshKey>(url, body, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<SshKey?> User_AddSSHKeyAsync(UserRef user, string title, string key, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user/keys");
            urlBuilder.WithValue("user", user.Value);
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            body.Add("title", title);
            body.Add("key", key);
            return this.PostJsonAsync<SshKey>(url, body, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<ImpersonationToken?> User_CreateImpersonationTokenAsync(UserRef user, string name, System.DateTime? expiresAt = default(System.DateTime?), System.Collections.Generic.IEnumerable<string>? scopes = default(System.Collections.Generic.IEnumerable<string>?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user/impersonation_tokens");
            urlBuilder.WithValue("user", user.Value);
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            body.Add("name", name);
            if ((expiresAt != null))
            {
                body.Add("expires_at", expiresAt);
            }

            if ((scopes != null))
            {
                body.Add("scopes", scopes);
            }

            return this.PostJsonAsync<ImpersonationToken>(url, body, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<User?> User_CreateUserAsync(string email, string username, string name, string? password = default(string?), bool? admin = default(bool?), bool? canCreateGroup = default(bool?), bool? skipConfirmation = default(bool?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            body.Add("email", email);
            body.Add("username", username);
            body.Add("name", name);
            if ((password != null))
            {
                body.Add("password", password);
            }

            if ((admin != null))
            {
                body.Add("admin", admin);
            }

            if ((canCreateGroup != null))
            {
                body.Add("can_create_group", canCreateGroup);
            }

            if ((skipConfirmation != null))
            {
                body.Add("skip_confirmation", skipConfirmation);
            }

            return this.PostJsonAsync<User>(url, body, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task User_DeleteSSHKeyAsync(SshKeyRef id, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/keys/:id");
            urlBuilder.WithValue("id", id.Value);
            string url = urlBuilder.Build();
            return this.DeleteAsync(url, requestOptions, cancellationToken);
        }

        /// <param name="pageOptions">The page index and page size</param>
        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<UserBasic> User_GetAllAsync(string? username = default(string?), bool? active = default(bool?), bool? blocked = default(bool?), Meziantou.GitLab.PageOptions? pageOptions = default(Meziantou.GitLab.PageOptions), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users");
            urlBuilder.WithValue("username", username);
            urlBuilder.WithValue("active", active);
            urlBuilder.WithValue("blocked", blocked);
            if ((pageOptions != null))
            {
                if ((pageOptions.PageIndex > 0))
                {
                    urlBuilder.WithValue("page", pageOptions.PageIndex);
                }

                if ((pageOptions.PageSize > 0))
                {
                    urlBuilder.WithValue("per_page", pageOptions.PageSize);
                }

                if ((string.IsNullOrEmpty(pageOptions.OrderBy.Name) == false))
                {
                    urlBuilder.WithValue("order_by", pageOptions.OrderBy.Name);
                    urlBuilder.WithValue("sort", pageOptions.OrderBy.Direction);
                }
            }

            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<UserBasic>(this, url, requestOptions);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<User?> User_GetAsync(long id, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:id");
            urlBuilder.WithValue("id", id);
            string url = urlBuilder.Build();
            return this.GetAsync<User>(url, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<User?> User_GetAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user");
            string url = urlBuilder.Build();
            return this.GetAsync<User>(url, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<SshKey?> User_GetSSHKeyAsync(SshKeyRef id, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/keys/:id");
            urlBuilder.WithValue("id", id.Value);
            string url = urlBuilder.Build();
            return this.GetAsync<SshKey>(url, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> User_GetSSHKeysAsync(UserRef user, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user/keys");
            urlBuilder.WithValue("user", user.Value);
            string url = urlBuilder.Build();
            return this.GetCollectionAsync<SshKey>(url, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<SshKey>> User_GetSSHKeysAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/keys");
            string url = urlBuilder.Build();
            return this.GetCollectionAsync<SshKey>(url, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<UserStatus?> User_GetStatusAsync(UserRef user, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user/status");
            urlBuilder.WithValue("user", user.Value);
            string url = urlBuilder.Build();
            return this.GetAsync<UserStatus>(url, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<UserStatus?> User_GetStatusAsync(Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("user/status");
            string url = urlBuilder.Build();
            return this.GetAsync<UserStatus>(url, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<UserStatus?> User_SetStatusAsync(string? emoji = default(string?), string? message = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/status");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((emoji != null))
            {
                body.Add("emoji", emoji);
            }

            if ((message != null))
            {
                body.Add("message", message);
            }

            return this.PutJsonAsync<UserStatus>(url, body, requestOptions, cancellationToken);
        }
    }
}
#nullable disable
