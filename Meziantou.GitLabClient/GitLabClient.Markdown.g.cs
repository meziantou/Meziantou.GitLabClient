// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabMarkdownClient Markdown
        {
            get;
        }
    }

    public partial interface IGitLabMarkdownClient
    {
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<RenderedMarkdown?> RenderMarkdownAsync(string text, bool? gfm = default(bool?), string? project = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    partial class GitLabClient : Meziantou.GitLab.IGitLabMarkdownClient
    {
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<RenderedMarkdown?> Meziantou.GitLab.IGitLabMarkdownClient.RenderMarkdownAsync(string text, bool? gfm, string? project, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Markdown_RenderMarkdownAsync(text, gfm, project, requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabMarkdownClient Markdown
        {
            get
            {
                return this;
            }
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<RenderedMarkdown?> Markdown_RenderMarkdownAsync(string text, bool? gfm = default(bool?), string? project = default(string?), Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("markdown");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            body.Add("text", text);
            if ((gfm != null))
            {
                body.Add("gfm", gfm);
            }

            if ((project != null))
            {
                body.Add("project", project);
            }

            return this.PostJsonAsync<RenderedMarkdown>(url, body, requestOptions, cancellationToken);
        }
    }
}
#nullable disable
