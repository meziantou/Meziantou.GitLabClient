// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabMarkdownClient Markdown
        {
            get;
        }
    }

    public partial interface IGitLabMarkdownClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/markdown.html#render-an-arbitrary-markdown-document" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<RenderedMarkdown> RenderMarkdownAsync(Meziantou.GitLab.RenderMarkdownMarkdownRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabMarkdownClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/markdown.html#render-an-arbitrary-markdown-document" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<RenderedMarkdown> Meziantou.GitLab.IGitLabMarkdownClient.RenderMarkdownAsync(Meziantou.GitLab.RenderMarkdownMarkdownRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Markdown_RenderMarkdownAsync(request, requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabMarkdownClient Markdown
        {
            get
            {
                return this;
            }
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/markdown.html#render-an-arbitrary-markdown-document" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<RenderedMarkdown> Markdown_RenderMarkdownAsync(Meziantou.GitLab.RenderMarkdownMarkdownRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("markdown");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Text != null))
            {
                body.Add("text", request.Text);
            }

            if ((request.Gfm != null))
            {
                body.Add("gfm", request.Gfm);
            }

            if ((request.Project != null))
            {
                body.Add("project", request.Project);
            }

            return this.PostJsonAsync<RenderedMarkdown>(url, body, requestOptions, cancellationToken);
        }
    }

    public partial class RenderMarkdownMarkdownRequest
    {
        private bool? _gfm;

        private Meziantou.GitLab.PathWithNamespace? _project;

        private string? _text;

        public RenderMarkdownMarkdownRequest(string? text)
        {
            this._text = text;
        }

        public RenderMarkdownMarkdownRequest()
        {
        }

        public bool? Gfm
        {
            get
            {
                return this._gfm;
            }
            set
            {
                this._gfm = value;
            }
        }

        public Meziantou.GitLab.PathWithNamespace? Project
        {
            get
            {
                return this._project;
            }
            set
            {
                this._project = value;
            }
        }

        public string? Text
        {
            get
            {
                return this._text;
            }
            set
            {
                this._text = value;
            }
        }
    }
}
