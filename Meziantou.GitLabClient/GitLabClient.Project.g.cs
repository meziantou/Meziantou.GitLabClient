// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabProjectClient Project
        {
            get;
        }
    }

    public partial interface IGitLabProjectClient
    {
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Project> CreateAsync(Meziantou.GitLab.CreateProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<Project> Get(Meziantou.GitLab.GetProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Project?> GetByIdAsync(Meziantou.GitLab.GetSingleProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<Project> GetByUser(Meziantou.GitLab.GetByUserProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions));
    }

    partial class GitLabClient : Meziantou.GitLab.IGitLabProjectClient
    {
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Project> Meziantou.GitLab.IGitLabProjectClient.CreateAsync(Meziantou.GitLab.CreateProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Project_CreateAsync(request, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<Project> Meziantou.GitLab.IGitLabProjectClient.Get(Meziantou.GitLab.GetProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.Project_Get(request, requestOptions);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<Project?> Meziantou.GitLab.IGitLabProjectClient.GetByIdAsync(Meziantou.GitLab.GetSingleProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Project_GetByIdAsync(request, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        Meziantou.GitLab.PagedResponse<Project> Meziantou.GitLab.IGitLabProjectClient.GetByUser(Meziantou.GitLab.GetByUserProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions)
        {
            return this.Project_GetByUser(request, requestOptions);
        }

        public Meziantou.GitLab.IGitLabProjectClient Project
        {
            get
            {
                return this;
            }
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<Project> Project_CreateAsync(Meziantou.GitLab.CreateProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects");
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Name != null))
            {
                body.Add("name", request.Name);
            }

            if ((request.Path != null))
            {
                body.Add("path", request.Path);
            }

            if ((request.NamespaceId != null))
            {
                body.Add("namespace_id", request.NamespaceId);
            }

            if ((request.DefaultBranch != null))
            {
                body.Add("default_branch", request.DefaultBranch);
            }

            if ((request.Description != null))
            {
                body.Add("description", request.Description);
            }

            if ((request.IssuesEnabled != null))
            {
                body.Add("issues_enabled", request.IssuesEnabled);
            }

            if ((request.MergeRequestsEnabled != null))
            {
                body.Add("merge_requests_enabled", request.MergeRequestsEnabled);
            }

            if ((request.JobsEnabled != null))
            {
                body.Add("jobs_enabled", request.JobsEnabled);
            }

            if ((request.WikiEnabled != null))
            {
                body.Add("wiki_enabled", request.WikiEnabled);
            }

            if ((request.SnippetsEnabled != null))
            {
                body.Add("snippets_enabled", request.SnippetsEnabled);
            }

            if ((request.ResolveOutdatedDiffDiscussions != null))
            {
                body.Add("resolve_outdated_diff_discussions", request.ResolveOutdatedDiffDiscussions);
            }

            if ((request.ContainerRegistryEnabled != null))
            {
                body.Add("container_registry_enabled", request.ContainerRegistryEnabled);
            }

            if ((request.SharedRunnersEnabled != null))
            {
                body.Add("shared_runners_enabled", request.SharedRunnersEnabled);
            }

            if ((request.PublicJobs != null))
            {
                body.Add("public_jobs", request.PublicJobs);
            }

            if ((request.OnlyAllowMergeIfPipelineSucceeds != null))
            {
                body.Add("only_allow_merge_if_pipeline_succeeds", request.OnlyAllowMergeIfPipelineSucceeds);
            }

            if ((request.OnlyAllowMergeIfAllDiscussionsAreResolved != null))
            {
                body.Add("only_allow_merge_if_all_discussions_are_resolved", request.OnlyAllowMergeIfAllDiscussionsAreResolved);
            }

            if ((request.RequestAccessEnabled != null))
            {
                body.Add("request_access_enabled", request.RequestAccessEnabled);
            }

            if ((request.LfsEnabled != null))
            {
                body.Add("lfs_enabled", request.LfsEnabled);
            }

            if ((request.PrintingMergeRequestLinkEnabled != null))
            {
                body.Add("printing_merge_request_link_enabled", request.PrintingMergeRequestLinkEnabled);
            }

            if ((request.MergeMethod != null))
            {
                body.Add("merge_method", request.MergeMethod);
            }

            if ((request.Visibility != null))
            {
                body.Add("visibility", request.Visibility);
            }

            if ((request.TagList != null))
            {
                body.Add("tag_list", request.TagList);
            }

            if ((request.CiConfigPath != null))
            {
                body.Add("ci_config_path", request.CiConfigPath);
            }

            if ((request.ApprovalsBeforeMerge != null))
            {
                body.Add("approvals_before_merge", request.ApprovalsBeforeMerge);
            }

            return this.PostJsonAsync<Project>(url, body, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<Project> Project_Get(Meziantou.GitLab.GetProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects");
            urlBuilder.SetValue("archived", request.Archived);
            urlBuilder.SetValue("visibility", request.Visibility);
            urlBuilder.SetValue("search", request.Search);
            urlBuilder.SetValue("simple", request.Simple);
            urlBuilder.SetValue("owned", request.Owned);
            urlBuilder.SetValue("membership", request.Membership);
            urlBuilder.SetValue("starred", request.Starred);
            urlBuilder.SetValue("statistics", request.Statistics);
            urlBuilder.SetValue("with_issues_enabled", request.WithIssuesEnabled);
            urlBuilder.SetValue("with_merge_requests_enabled", request.WithMergeRequestsEnabled);
            urlBuilder.SetValue("wiki_checksum_failed", request.WikiChecksumFailed);
            urlBuilder.SetValue("repository_checksum_failed", request.RepositoryChecksumFailed);
            urlBuilder.SetValue("min_access_level", request.MinAccessLevel);
            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<Project>(this, url, requestOptions);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<Project?> Project_GetByIdAsync(Meziantou.GitLab.GetSingleProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects/:id");
            urlBuilder.SetValue("id", request.Id.ValueAsString);
            string url = urlBuilder.Build();
            return this.GetAsync<Project>(url, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        private Meziantou.GitLab.PagedResponse<Project> Project_GetByUser(Meziantou.GitLab.GetByUserProjectRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("users/:user/projects");
            urlBuilder.SetValue("user", request.User.ValueAsString);
            urlBuilder.SetValue("archived", request.Archived);
            urlBuilder.SetValue("visibility", request.Visibility);
            urlBuilder.SetValue("search", request.Search);
            urlBuilder.SetValue("simple", request.Simple);
            urlBuilder.SetValue("owned", request.Owned);
            urlBuilder.SetValue("membership", request.Membership);
            urlBuilder.SetValue("starred", request.Starred);
            urlBuilder.SetValue("statistics", request.Statistics);
            urlBuilder.SetValue("with_issues_enabled", request.WithIssuesEnabled);
            urlBuilder.SetValue("with_merge_requests_enabled", request.WithMergeRequestsEnabled);
            urlBuilder.SetValue("wiki_checksum_failed", request.WikiChecksumFailed);
            urlBuilder.SetValue("repository_checksum_failed", request.RepositoryChecksumFailed);
            urlBuilder.SetValue("min_access_level", request.MinAccessLevel);
            string url = urlBuilder.Build();
            return new Meziantou.GitLab.PagedResponse<Project>(this, url, requestOptions);
        }
    }

    public static partial class GitLabClientExtensions
    {
        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<Project> Get(this Meziantou.GitLab.IGitLabProjectClient client, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetProjectRequest request = new Meziantou.GitLab.GetProjectRequest();
            return client.Get(request, requestOptions);
        }

        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        public static System.Threading.Tasks.Task<Project?> GetByIdAsync(this Meziantou.GitLab.IGitLabProjectClient client, ProjectIdOrPathRef id, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.GetSingleProjectRequest request = new Meziantou.GitLab.GetSingleProjectRequest(id);
            return client.GetByIdAsync(request, requestOptions, cancellationToken);
        }

        /// <param name="requestOptions">Options of the request</param>
        public static Meziantou.GitLab.PagedResponse<Project> GetByUser(this Meziantou.GitLab.IGitLabProjectClient client, UserRef user, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions))
        {
            Meziantou.GitLab.GetByUserProjectRequest request = new Meziantou.GitLab.GetByUserProjectRequest(user);
            return client.GetByUser(request, requestOptions);
        }
    }

    public partial class GetProjectRequest
    {
        private bool? _archived;

        private bool? _membership;

        private AccessLevel? _minAccessLevel;

        private bool? _owned;

        private bool? _repositoryChecksumFailed;

        private string? _search;

        private bool? _simple;

        private bool? _starred;

        private bool? _statistics;

        private ProjectVisibility? _visibility;

        private bool? _wikiChecksumFailed;

        private bool? _withIssuesEnabled;

        private bool? _withMergeRequestsEnabled;

        public GetProjectRequest()
        {
        }

        public bool? Archived
        {
            get
            {
                return this._archived;
            }
            set
            {
                this._archived = value;
            }
        }

        public bool? Membership
        {
            get
            {
                return this._membership;
            }
            set
            {
                this._membership = value;
            }
        }

        public AccessLevel? MinAccessLevel
        {
            get
            {
                return this._minAccessLevel;
            }
            set
            {
                this._minAccessLevel = value;
            }
        }

        public bool? Owned
        {
            get
            {
                return this._owned;
            }
            set
            {
                this._owned = value;
            }
        }

        public bool? RepositoryChecksumFailed
        {
            get
            {
                return this._repositoryChecksumFailed;
            }
            set
            {
                this._repositoryChecksumFailed = value;
            }
        }

        public string? Search
        {
            get
            {
                return this._search;
            }
            set
            {
                this._search = value;
            }
        }

        public bool? Simple
        {
            get
            {
                return this._simple;
            }
            set
            {
                this._simple = value;
            }
        }

        public bool? Starred
        {
            get
            {
                return this._starred;
            }
            set
            {
                this._starred = value;
            }
        }

        public bool? Statistics
        {
            get
            {
                return this._statistics;
            }
            set
            {
                this._statistics = value;
            }
        }

        public ProjectVisibility? Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                this._visibility = value;
            }
        }

        public bool? WikiChecksumFailed
        {
            get
            {
                return this._wikiChecksumFailed;
            }
            set
            {
                this._wikiChecksumFailed = value;
            }
        }

        public bool? WithIssuesEnabled
        {
            get
            {
                return this._withIssuesEnabled;
            }
            set
            {
                this._withIssuesEnabled = value;
            }
        }

        public bool? WithMergeRequestsEnabled
        {
            get
            {
                return this._withMergeRequestsEnabled;
            }
            set
            {
                this._withMergeRequestsEnabled = value;
            }
        }
    }

    public partial class GetByUserProjectRequest
    {
        private bool? _archived;

        private bool? _membership;

        private AccessLevel? _minAccessLevel;

        private bool? _owned;

        private bool? _repositoryChecksumFailed;

        private string? _search;

        private bool? _simple;

        private bool? _starred;

        private bool? _statistics;

        private UserRef _user;

        private ProjectVisibility? _visibility;

        private bool? _wikiChecksumFailed;

        private bool? _withIssuesEnabled;

        private bool? _withMergeRequestsEnabled;

        public GetByUserProjectRequest(UserRef user)
        {
            this._user = user;
        }

        public bool? Archived
        {
            get
            {
                return this._archived;
            }
            set
            {
                this._archived = value;
            }
        }

        public bool? Membership
        {
            get
            {
                return this._membership;
            }
            set
            {
                this._membership = value;
            }
        }

        public AccessLevel? MinAccessLevel
        {
            get
            {
                return this._minAccessLevel;
            }
            set
            {
                this._minAccessLevel = value;
            }
        }

        public bool? Owned
        {
            get
            {
                return this._owned;
            }
            set
            {
                this._owned = value;
            }
        }

        public bool? RepositoryChecksumFailed
        {
            get
            {
                return this._repositoryChecksumFailed;
            }
            set
            {
                this._repositoryChecksumFailed = value;
            }
        }

        public string? Search
        {
            get
            {
                return this._search;
            }
            set
            {
                this._search = value;
            }
        }

        public bool? Simple
        {
            get
            {
                return this._simple;
            }
            set
            {
                this._simple = value;
            }
        }

        public bool? Starred
        {
            get
            {
                return this._starred;
            }
            set
            {
                this._starred = value;
            }
        }

        public bool? Statistics
        {
            get
            {
                return this._statistics;
            }
            set
            {
                this._statistics = value;
            }
        }

        public UserRef User
        {
            get
            {
                return this._user;
            }
            set
            {
                this._user = value;
            }
        }

        public ProjectVisibility? Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                this._visibility = value;
            }
        }

        public bool? WikiChecksumFailed
        {
            get
            {
                return this._wikiChecksumFailed;
            }
            set
            {
                this._wikiChecksumFailed = value;
            }
        }

        public bool? WithIssuesEnabled
        {
            get
            {
                return this._withIssuesEnabled;
            }
            set
            {
                this._withIssuesEnabled = value;
            }
        }

        public bool? WithMergeRequestsEnabled
        {
            get
            {
                return this._withMergeRequestsEnabled;
            }
            set
            {
                this._withMergeRequestsEnabled = value;
            }
        }
    }

    public partial class GetSingleProjectRequest
    {
        private ProjectIdOrPathRef _id;

        public GetSingleProjectRequest(ProjectIdOrPathRef id)
        {
            this._id = id;
        }

        public ProjectIdOrPathRef Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
    }

    public partial class CreateProjectRequest
    {
        private int? _approvalsBeforeMerge;

        private string? _ciConfigPath;

        private bool? _containerRegistryEnabled;

        private string? _defaultBranch;

        private string? _description;

        private bool? _issuesEnabled;

        private bool? _jobsEnabled;

        private bool? _lfsEnabled;

        private MergeMethod? _mergeMethod;

        private bool? _mergeRequestsEnabled;

        private string? _name;

        private long? _namespaceId;

        private bool? _onlyAllowMergeIfAllDiscussionsAreResolved;

        private bool? _onlyAllowMergeIfPipelineSucceeds;

        private string? _path;

        private bool? _printingMergeRequestLinkEnabled;

        private bool? _publicJobs;

        private bool? _requestAccessEnabled;

        private bool? _resolveOutdatedDiffDiscussions;

        private bool? _sharedRunnersEnabled;

        private bool? _snippetsEnabled;

        private System.Collections.Generic.IEnumerable<string>? _tagList;

        private ProjectVisibility? _visibility;

        private bool? _wikiEnabled;

        public CreateProjectRequest()
        {
        }

        public int? ApprovalsBeforeMerge
        {
            get
            {
                return this._approvalsBeforeMerge;
            }
            set
            {
                this._approvalsBeforeMerge = value;
            }
        }

        public string? CiConfigPath
        {
            get
            {
                return this._ciConfigPath;
            }
            set
            {
                this._ciConfigPath = value;
            }
        }

        public bool? ContainerRegistryEnabled
        {
            get
            {
                return this._containerRegistryEnabled;
            }
            set
            {
                this._containerRegistryEnabled = value;
            }
        }

        public string? DefaultBranch
        {
            get
            {
                return this._defaultBranch;
            }
            set
            {
                this._defaultBranch = value;
            }
        }

        public string? Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        public bool? IssuesEnabled
        {
            get
            {
                return this._issuesEnabled;
            }
            set
            {
                this._issuesEnabled = value;
            }
        }

        public bool? JobsEnabled
        {
            get
            {
                return this._jobsEnabled;
            }
            set
            {
                this._jobsEnabled = value;
            }
        }

        public bool? LfsEnabled
        {
            get
            {
                return this._lfsEnabled;
            }
            set
            {
                this._lfsEnabled = value;
            }
        }

        public MergeMethod? MergeMethod
        {
            get
            {
                return this._mergeMethod;
            }
            set
            {
                this._mergeMethod = value;
            }
        }

        public bool? MergeRequestsEnabled
        {
            get
            {
                return this._mergeRequestsEnabled;
            }
            set
            {
                this._mergeRequestsEnabled = value;
            }
        }

        public string? Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        public long? NamespaceId
        {
            get
            {
                return this._namespaceId;
            }
            set
            {
                this._namespaceId = value;
            }
        }

        public bool? OnlyAllowMergeIfAllDiscussionsAreResolved
        {
            get
            {
                return this._onlyAllowMergeIfAllDiscussionsAreResolved;
            }
            set
            {
                this._onlyAllowMergeIfAllDiscussionsAreResolved = value;
            }
        }

        public bool? OnlyAllowMergeIfPipelineSucceeds
        {
            get
            {
                return this._onlyAllowMergeIfPipelineSucceeds;
            }
            set
            {
                this._onlyAllowMergeIfPipelineSucceeds = value;
            }
        }

        public string? Path
        {
            get
            {
                return this._path;
            }
            set
            {
                this._path = value;
            }
        }

        public bool? PrintingMergeRequestLinkEnabled
        {
            get
            {
                return this._printingMergeRequestLinkEnabled;
            }
            set
            {
                this._printingMergeRequestLinkEnabled = value;
            }
        }

        public bool? PublicJobs
        {
            get
            {
                return this._publicJobs;
            }
            set
            {
                this._publicJobs = value;
            }
        }

        public bool? RequestAccessEnabled
        {
            get
            {
                return this._requestAccessEnabled;
            }
            set
            {
                this._requestAccessEnabled = value;
            }
        }

        public bool? ResolveOutdatedDiffDiscussions
        {
            get
            {
                return this._resolveOutdatedDiffDiscussions;
            }
            set
            {
                this._resolveOutdatedDiffDiscussions = value;
            }
        }

        public bool? SharedRunnersEnabled
        {
            get
            {
                return this._sharedRunnersEnabled;
            }
            set
            {
                this._sharedRunnersEnabled = value;
            }
        }

        public bool? SnippetsEnabled
        {
            get
            {
                return this._snippetsEnabled;
            }
            set
            {
                this._snippetsEnabled = value;
            }
        }

        public System.Collections.Generic.IEnumerable<string>? TagList
        {
            get
            {
                return this._tagList;
            }
            set
            {
                this._tagList = value;
            }
        }

        public ProjectVisibility? Visibility
        {
            get
            {
                return this._visibility;
            }
            set
            {
                this._visibility = value;
            }
        }

        public bool? WikiEnabled
        {
            get
            {
                return this._wikiEnabled;
            }
            set
            {
                this._wikiEnabled = value;
            }
        }
    }
}
#nullable disable
