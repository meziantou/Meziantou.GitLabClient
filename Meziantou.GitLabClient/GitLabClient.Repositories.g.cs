// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    public partial interface IGitLabClient
    {
        Meziantou.GitLab.IGitLabRepositoriesClient Repositories
        {
            get;
        }
    }

    public partial interface IGitLabRepositoriesClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/repository_files.html#create-new-file-in-repository" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<FileCreated> CreateFileAsync(Meziantou.GitLab.CreateFileRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <seealso href="https://docs.gitlab.com/ee/api/repository_files.html#update-existing-file-in-repository" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<FileUpdated> UpdateFileAsync(Meziantou.GitLab.UpdateFileRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }

    public partial class GitLabClient : Meziantou.GitLab.IGitLabRepositoriesClient
    {
        /// <seealso href="https://docs.gitlab.com/ee/api/repository_files.html#create-new-file-in-repository" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<FileCreated> Meziantou.GitLab.IGitLabRepositoriesClient.CreateFileAsync(Meziantou.GitLab.CreateFileRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Repositories_CreateFileAsync(request, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/repository_files.html#update-existing-file-in-repository" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        System.Threading.Tasks.Task<FileUpdated> Meziantou.GitLab.IGitLabRepositoriesClient.UpdateFileAsync(Meziantou.GitLab.UpdateFileRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions, System.Threading.CancellationToken cancellationToken)
        {
            return this.Repositories_UpdateFileAsync(request, requestOptions, cancellationToken);
        }

        public Meziantou.GitLab.IGitLabRepositoriesClient Repositories
        {
            get
            {
                return this;
            }
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/repository_files.html#create-new-file-in-repository" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<FileCreated> Repositories_CreateFileAsync(Meziantou.GitLab.CreateFileRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects/:project_id/repository/files/:file_path");
            if (request.ProjectId.HasValue)
            {
                urlBuilder.SetValue("project_id", request.ProjectId.Value.ValueAsString);
            }

            urlBuilder.SetValue("file_path", request.FilePath);
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Branch != null))
            {
                body.Add("branch", request.Branch);
            }

            if ((request.Content != null))
            {
                body.Add("content", request.Content);
            }

            if ((request.CommitMessage != null))
            {
                body.Add("commit_message", request.CommitMessage);
            }

            if ((request.StartBranch != null))
            {
                body.Add("start_branch", request.StartBranch);
            }

            if ((request.Encoding != null))
            {
                body.Add("encoding", request.Encoding);
            }

            if ((request.AuthorEmail != null))
            {
                body.Add("author_email", request.AuthorEmail);
            }

            if ((request.AuthorName != null))
            {
                body.Add("author_name", request.AuthorName);
            }

            return this.PostJsonAsync<FileCreated>(url, body, requestOptions, cancellationToken);
        }

        /// <seealso href="https://docs.gitlab.com/ee/api/repository_files.html#update-existing-file-in-repository" />
        /// <param name="requestOptions">Options of the request</param>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation</param>
        private System.Threading.Tasks.Task<FileUpdated> Repositories_UpdateFileAsync(Meziantou.GitLab.UpdateFileRepositoryRequest request, Meziantou.GitLab.RequestOptions? requestOptions = default(Meziantou.GitLab.RequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Meziantou.GitLab.UrlBuilder urlBuilder = Meziantou.GitLab.UrlBuilder.Get("projects/:project_id/repository/files/:file_path");
            if (request.ProjectId.HasValue)
            {
                urlBuilder.SetValue("project_id", request.ProjectId.Value.ValueAsString);
            }

            urlBuilder.SetValue("file_path", request.FilePath);
            string url = urlBuilder.Build();
            System.Collections.Generic.Dictionary<string, object> body = new System.Collections.Generic.Dictionary<string, object>();
            if ((request.Branch != null))
            {
                body.Add("branch", request.Branch);
            }

            if ((request.Content != null))
            {
                body.Add("content", request.Content);
            }

            if ((request.CommitMessage != null))
            {
                body.Add("commit_message", request.CommitMessage);
            }

            if ((request.StartBranch != null))
            {
                body.Add("start_branch", request.StartBranch);
            }

            if ((request.Encoding != null))
            {
                body.Add("encoding", request.Encoding);
            }

            if ((request.AuthorEmail != null))
            {
                body.Add("author_email", request.AuthorEmail);
            }

            if ((request.AuthorName != null))
            {
                body.Add("author_name", request.AuthorName);
            }

            if ((request.LastCommitId != null))
            {
                body.Add("last_commit_id", request.LastCommitId);
            }

            return this.PutJsonAsync<FileUpdated>(url, body, requestOptions, cancellationToken);
        }
    }

    public partial class CreateFileRepositoryRequest
    {
        private string? _authorEmail;

        private string? _authorName;

        private string? _branch;

        private string? _commitMessage;

        private string? _content;

        private string? _encoding;

        private string? _filePath;

        private ProjectIdOrPathRef? _projectId;

        private string? _startBranch;

        public CreateFileRepositoryRequest(ProjectIdOrPathRef? projectId, string? filePath, string? branch, string? content, string? commitMessage)
        {
            this._projectId = projectId;
            this._filePath = filePath;
            this._branch = branch;
            this._content = content;
            this._commitMessage = commitMessage;
        }

        public CreateFileRepositoryRequest()
        {
        }

        public string? AuthorEmail
        {
            get
            {
                return this._authorEmail;
            }
            set
            {
                this._authorEmail = value;
            }
        }

        public string? AuthorName
        {
            get
            {
                return this._authorName;
            }
            set
            {
                this._authorName = value;
            }
        }

        public string? Branch
        {
            get
            {
                return this._branch;
            }
            set
            {
                this._branch = value;
            }
        }

        public string? CommitMessage
        {
            get
            {
                return this._commitMessage;
            }
            set
            {
                this._commitMessage = value;
            }
        }

        public string? Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }

        public string? Encoding
        {
            get
            {
                return this._encoding;
            }
            set
            {
                this._encoding = value;
            }
        }

        public string? FilePath
        {
            get
            {
                return this._filePath;
            }
            set
            {
                this._filePath = value;
            }
        }

        public ProjectIdOrPathRef? ProjectId
        {
            get
            {
                return this._projectId;
            }
            set
            {
                this._projectId = value;
            }
        }

        public string? StartBranch
        {
            get
            {
                return this._startBranch;
            }
            set
            {
                this._startBranch = value;
            }
        }
    }

    public partial class UpdateFileRepositoryRequest
    {
        private string? _authorEmail;

        private string? _authorName;

        private string? _branch;

        private string? _commitMessage;

        private string? _content;

        private string? _encoding;

        private string? _filePath;

        private Meziantou.GitLab.GitObjectId? _lastCommitId;

        private ProjectIdOrPathRef? _projectId;

        private string? _startBranch;

        public UpdateFileRepositoryRequest(ProjectIdOrPathRef? projectId, string? filePath, string? branch, string? content, string? commitMessage)
        {
            this._projectId = projectId;
            this._filePath = filePath;
            this._branch = branch;
            this._content = content;
            this._commitMessage = commitMessage;
        }

        public UpdateFileRepositoryRequest()
        {
        }

        public string? AuthorEmail
        {
            get
            {
                return this._authorEmail;
            }
            set
            {
                this._authorEmail = value;
            }
        }

        public string? AuthorName
        {
            get
            {
                return this._authorName;
            }
            set
            {
                this._authorName = value;
            }
        }

        public string? Branch
        {
            get
            {
                return this._branch;
            }
            set
            {
                this._branch = value;
            }
        }

        public string? CommitMessage
        {
            get
            {
                return this._commitMessage;
            }
            set
            {
                this._commitMessage = value;
            }
        }

        public string? Content
        {
            get
            {
                return this._content;
            }
            set
            {
                this._content = value;
            }
        }

        public string? Encoding
        {
            get
            {
                return this._encoding;
            }
            set
            {
                this._encoding = value;
            }
        }

        public string? FilePath
        {
            get
            {
                return this._filePath;
            }
            set
            {
                this._filePath = value;
            }
        }

        public Meziantou.GitLab.GitObjectId? LastCommitId
        {
            get
            {
                return this._lastCommitId;
            }
            set
            {
                this._lastCommitId = value;
            }
        }

        public ProjectIdOrPathRef? ProjectId
        {
            get
            {
                return this._projectId;
            }
            set
            {
                this._projectId = value;
            }
        }

        public string? StartBranch
        {
            get
            {
                return this._startBranch;
            }
            set
            {
                this._startBranch = value;
            }
        }
    }
}
