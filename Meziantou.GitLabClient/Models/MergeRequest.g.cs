// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    [System.Text.Json.Serialization.JsonConverterAttribute(typeof(Meziantou.GitLab.Serialization.MergeRequestJsonConverter))]
    [System.Diagnostics.DebuggerDisplayAttribute("{GetType().Name,nq} Title={Title}, Id={Id}")]
    public partial class MergeRequest : Meziantou.GitLab.Core.GitLabObject, System.IEquatable<Meziantou.GitLab.MergeRequest>
    {
        internal MergeRequest(System.Text.Json.JsonElement obj)
            : base(obj)
        {
        }

        [Meziantou.GitLab.MappedPropertyAttribute("assignee")]
        public UserBasic Assignee
        {
            get
            {
                return this.GetValueOrDefault<UserBasic>("assignee", default(UserBasic));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("author")]
        public UserBasic Author
        {
            get
            {
                return this.GetValueOrDefault<UserBasic>("author", default(UserBasic));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("created_at")]
        public System.DateTimeOffset CreatedAt
        {
            get
            {
                return this.GetValueOrDefault<System.DateTimeOffset>("created_at", default(System.DateTimeOffset));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("description")]
        public string Description
        {
            get
            {
                return this.GetValueOrDefault<string>("description", default(string));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("downvotes")]
        public int Downvotes
        {
            get
            {
                return this.GetValueOrDefault<int>("downvotes", default(int));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("force_remove_source_branch")]
        public bool? ForceRemoveSourceBranch
        {
            get
            {
                return this.GetValueOrDefault<bool?>("force_remove_source_branch", default(bool?));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("id")]
        public long Id
        {
            get
            {
                return this.GetValueOrDefault<long>("id", default(long));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("iid")]
        public long Iid
        {
            get
            {
                return this.GetValueOrDefault<long>("iid", default(long));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("labels")]
        public System.Collections.Generic.IReadOnlyList<string> Labels
        {
            get
            {
                return this.GetValueOrDefault<System.Collections.Generic.IReadOnlyList<string>>("labels", default(System.Collections.Generic.IReadOnlyList<string>));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("merge_commit_sha")]
        public Meziantou.GitLab.GitObjectId? MergeCommitSha
        {
            get
            {
                return this.GetValueOrDefault<Meziantou.GitLab.GitObjectId?>("merge_commit_sha", default(Meziantou.GitLab.GitObjectId?));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("merge_status")]
        public MergeRequestStatus MergeStatus
        {
            get
            {
                return this.GetValueOrDefault<MergeRequestStatus>("merge_status", default(MergeRequestStatus));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("merge_when_pipeline_succeeds")]
        public bool MergeWhenPipelineSucceeds
        {
            get
            {
                return this.GetValueOrDefault<bool>("merge_when_pipeline_succeeds", default(bool));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("project_id")]
        public long ProjectId
        {
            get
            {
                return this.GetValueOrDefault<long>("project_id", default(long));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("sha")]
        public Meziantou.GitLab.GitObjectId Sha
        {
            get
            {
                return this.GetValueOrDefault<Meziantou.GitLab.GitObjectId>("sha", default(Meziantou.GitLab.GitObjectId));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("should_remove_source_branch")]
        public bool? ShouldRemoveSourceBranch
        {
            get
            {
                return this.GetValueOrDefault<bool?>("should_remove_source_branch", default(bool?));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("source_branch")]
        public string SourceBranch
        {
            get
            {
                return this.GetValueOrDefault<string>("source_branch", default(string));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("source_project_id")]
        public long SourceProjectId
        {
            get
            {
                return this.GetValueOrDefault<long>("source_project_id", default(long));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("squash")]
        public bool Squash
        {
            get
            {
                return this.GetValueOrDefault<bool>("squash", default(bool));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("state")]
        public MergeRequestState State
        {
            get
            {
                return this.GetValueOrDefault<MergeRequestState>("state", default(MergeRequestState));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("target_branch")]
        public string TargetBranch
        {
            get
            {
                return this.GetValueOrDefault<string>("target_branch", default(string));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("target_project_id")]
        public long TargetProjectId
        {
            get
            {
                return this.GetValueOrDefault<long>("target_project_id", default(long));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("title")]
        public string Title
        {
            get
            {
                return this.GetValueOrDefault<string>("title", default(string));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("updated_at")]
        public System.DateTimeOffset UpdatedAt
        {
            get
            {
                return this.GetValueOrDefault<System.DateTimeOffset>("updated_at", default(System.DateTimeOffset));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("upvotes")]
        public int Upvotes
        {
            get
            {
                return this.GetValueOrDefault<int>("upvotes", default(int));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("user_notes_count")]
        public int UserNotesCount
        {
            get
            {
                return this.GetValueOrDefault<int>("user_notes_count", default(int));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("web_url")]
        public string WebUrl
        {
            get
            {
                return this.GetValueOrDefault<string>("web_url", default(string));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("work_in_progress")]
        public bool WorkInProgress
        {
            get
            {
                return this.GetValueOrDefault<bool>("work_in_progress", default(bool));
            }
        }

        public override bool Equals(object? obj)
        {
            return this.Equals((obj as Meziantou.GitLab.MergeRequest));
        }

        public virtual bool Equals(Meziantou.GitLab.MergeRequest? obj)
        {
            return ((!object.ReferenceEquals(obj, null)) && (this.Id == obj.Id));
        }

        public override int GetHashCode()
        {
            return System.HashCode.Combine(this.Id);
        }

        public static bool operator !=(Meziantou.GitLab.MergeRequest? a, Meziantou.GitLab.MergeRequest? b)
        {
            return (!(a == b));
        }

        public static bool operator ==(Meziantou.GitLab.MergeRequest? a, Meziantou.GitLab.MergeRequest? b)
        {
            return System.Collections.Generic.EqualityComparer<Meziantou.GitLab.MergeRequest>.Default.Equals(a, b);
        }
    }
}

namespace Meziantou.GitLab.Serialization
{
    internal sealed partial class MergeRequestJsonConverter : Meziantou.GitLab.Serialization.GitLabObjectBaseJsonConverter<Meziantou.GitLab.MergeRequest>
    {
        protected override Meziantou.GitLab.MergeRequest CreateInstance(System.Text.Json.JsonElement jsonElement)
        {
            return new Meziantou.GitLab.MergeRequest(jsonElement);
        }
    }
}
#nullable disable
