// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace Meziantou.GitLab
{
    [System.Text.Json.Serialization.JsonConverterAttribute(typeof(Meziantou.GitLab.Serialization.ProjectIdentityJsonConverter))]
    [System.Diagnostics.DebuggerDisplayAttribute("{GetType().Name,nq} PathWithNamespace={PathWithNamespace}, Id={Id}")]
    public partial class ProjectIdentity : Meziantou.GitLab.Core.GitLabObject, System.IEquatable<Meziantou.GitLab.ProjectIdentity>
    {
        internal ProjectIdentity(System.Text.Json.JsonElement obj)
            : base(obj)
        {
        }

        [Meziantou.GitLab.MappedPropertyAttribute("created_at")]
        public System.DateTimeOffset CreatedAt
        {
            get
            {
                return this.GetRequiredNonNullValue<System.DateTimeOffset>("created_at");
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("description")]
        public string? Description
        {
            get
            {
                return this.GetValueOrDefault<string?>("description", default(string?));
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("id")]
        public long Id
        {
            get
            {
                return this.GetRequiredNonNullValue<long>("id");
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("name")]
        public string Name
        {
            get
            {
                return this.GetRequiredNonNullValue<string>("name");
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("name_with_namespace")]
        public string NameWithNamespace
        {
            get
            {
                return this.GetRequiredNonNullValue<string>("name_with_namespace");
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("path")]
        public string Path
        {
            get
            {
                return this.GetRequiredNonNullValue<string>("path");
            }
        }

        [Meziantou.GitLab.MappedPropertyAttribute("path_with_namespace")]
        public Meziantou.GitLab.PathWithNamespace PathWithNamespace
        {
            get
            {
                return this.GetRequiredNonNullValue<Meziantou.GitLab.PathWithNamespace>("path_with_namespace");
            }
        }

        public override bool Equals(object? obj)
        {
            return this.Equals((obj as Meziantou.GitLab.ProjectIdentity));
        }

        public virtual bool Equals(Meziantou.GitLab.ProjectIdentity? obj)
        {
            return ((!object.ReferenceEquals(obj, null)) && (this.Id == obj.Id));
        }

        public override int GetHashCode()
        {
            return System.HashCode.Combine(this.Id);
        }

        public static bool operator !=(Meziantou.GitLab.ProjectIdentity? a, Meziantou.GitLab.ProjectIdentity? b)
        {
            return (!(a == b));
        }

        public static bool operator ==(Meziantou.GitLab.ProjectIdentity? a, Meziantou.GitLab.ProjectIdentity? b)
        {
            return System.Collections.Generic.EqualityComparer<Meziantou.GitLab.ProjectIdentity>.Default.Equals(a, b);
        }
    }
}

namespace Meziantou.GitLab.Serialization
{
    internal sealed partial class ProjectIdentityJsonConverter : Meziantou.GitLab.Serialization.GitLabObjectBaseJsonConverter<Meziantou.GitLab.ProjectIdentity>
    {
        protected override Meziantou.GitLab.ProjectIdentity CreateInstance(System.Text.Json.JsonElement jsonElement)
        {
            return new Meziantou.GitLab.ProjectIdentity(jsonElement);
        }
    }
}
#nullable disable
